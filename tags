!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRAY_HANDLE	src/common/mfu_daos.h	/^    ARRAY_HANDLE$/;"	e	enum:handleType
ATIME	src/common/mfu_flist_sort.c	/^    ATIME,$/;"	e	enum:__anon23	file:
ATIME	src/dsh/dsh.c	/^    ATIME,$/;"	e	enum:__anon40	file:
ATTR_NAME_LEN	src/common/mfu_daos.h	14;"	d
AVL_CHILD_LEFT	src/common/strmap.c	16;"	d	file:
AVL_CHILD_RIGHT	src/common/strmap.c	17;"	d	file:
BASEDIR	src/dfilemaker/makefile	/^BASEDIR = \/usr\/tce\/packages\/mpifileutils\/mpifileutils-0.8$/;"	m
BUFLEN	src/daos-gen/daos-gen.c	18;"	d	file:
BUF_SIZE	src/common/mfu_flist_walk.c	179;"	d	file:
BUILDDIR	doc/Makefile	/^BUILDDIR      = build$/;"	m
CHECK_DAOS_API_VERSION	src/common/mfu_daos.c	27;"	d	file:
CHECK_DAOS_API_VERSION	src/common/mfu_daos.c	31;"	d	file:
CHECK_DAOS_API_VERSION	src/daos-gen/daos-gen.c	22;"	d	file:
CHECK_DAOS_API_VERSION	src/daos-gen/daos-gen.c	26;"	d	file:
CHMOD_FAILURE	src/common/mfu_flist_chmod.c	/^  CHMOD_FAILURE,$/;"	e	enum:__anon19	file:
CHMOD_SKIPPED	src/common/mfu_flist_chmod.c	/^  CHMOD_SKIPPED,$/;"	e	enum:__anon19	file:
CHMOD_SUCCESS	src/common/mfu_flist_chmod.c	/^  CHMOD_SUCCESS,$/;"	e	enum:__anon19	file:
CHOWN_FAILURE	src/common/mfu_flist_chmod.c	/^  CHOWN_FAILURE,$/;"	e	enum:__anon19	file:
CHOWN_SKIPPED	src/common/mfu_flist_chmod.c	/^  CHOWN_SKIPPED$/;"	e	enum:__anon19	file:
CHOWN_SUCCESS	src/common/mfu_flist_chmod.c	/^  CHOWN_SUCCESS,$/;"	e	enum:__anon19	file:
CHUNK	src/common/mfu_flist_archive.c	/^    CHUNK,          \/* direct read of data, chunk list *\/$/;"	e	enum:__anon18	file:
CLEANUP	src/dcp1/common.h	/^    TREEWALK, COPY, CLEANUP, COMPARE$/;"	e	enum:__anon33
COMPARE	src/dcp1/common.h	/^    TREEWALK, COPY, CLEANUP, COMPARE$/;"	e	enum:__anon33
CONT_HANDLE	src/common/mfu_daos.h	/^    CONT_HANDLE,$/;"	e	enum:handleType
COPY	src/dcp1/common.h	/^    TREEWALK, COPY, CLEANUP, COMPARE$/;"	e	enum:__anon33
COPY_DATA	src/common/mfu_flist_archive.c	/^    COPY_DATA,   \/* copy data from user file into archive file *\/$/;"	e	enum:__anon11	file:
CREATE_CHUNK	src/common/mfu_flist_archive.c	/^    CREATE_CHUNK,    \/* direct write of data, chunk list *\/$/;"	e	enum:__anon16	file:
CREATE_DEFAULT	src/common/mfu_flist_archive.c	/^    CREATE_DEFAULT,  \/* attempt to dynamically choose best option *\/$/;"	e	enum:__anon16	file:
CREATE_LIBCIRCLE	src/common/mfu_flist_archive.c	/^    CREATE_LIBCIRCLE \/* direct write of data, chunk list to init libcircle *\/$/;"	e	enum:__anon16	file:
CTIME	src/common/mfu_flist_sort.c	/^    CTIME,$/;"	e	enum:__anon23	file:
CTIME	src/dsh/dsh.c	/^    CTIME,$/;"	e	enum:__anon40	file:
CURRENT_DIRS	src/common/mfu_flist_walk.c	/^static const char** CURRENT_DIRS;$/;"	v	file:
CURRENT_LIST	src/common/mfu_flist_walk.c	/^static flist_t* CURRENT_LIST;$/;"	v	file:
CURRENT_NUM_DIRS	src/common/mfu_flist_walk.c	/^static uint64_t CURRENT_NUM_DIRS;$/;"	v	file:
CURRENT_PFILE	src/common/mfu_flist_walk.c	/^static mfu_file_t** CURRENT_PFILE;$/;"	v	file:
DAOS	src/common/mfu_param_path.h	/^    enum                 {POSIX, DFS, DAOS} type;$/;"	e	enum:__anon24::__anon25
DAOS_API_AUTO	src/common/mfu_daos.h	/^    DAOS_API_AUTO,$/;"	e	enum:__anon1
DAOS_API_DAOS	src/common/mfu_daos.h	/^    DAOS_API_DAOS,$/;"	e	enum:__anon1
DAOS_API_DFS	src/common/mfu_daos.h	/^    DAOS_API_DFS,$/;"	e	enum:__anon1
DAOS_API_HDF5	src/common/mfu_daos.h	/^    DAOS_API_HDF5$/;"	e	enum:__anon1
DBz2_Dequeue	src/common/mfu_compress_bz2_libcircle.c	/^static void DBz2_Dequeue(CIRCLE_handle* handle)$/;"	f	file:
DBz2_Enqueue	src/common/mfu_compress_bz2_libcircle.c	/^static void DBz2_Enqueue(CIRCLE_handle* handle)$/;"	f	file:
DBz2_decompDequeue	src/common/mfu_decompress_bz2_libcircle.c	/^static void DBz2_decompDequeue(CIRCLE_handle* handle)$/;"	f	file:
DBz2_decompEnqueue	src/common/mfu_decompress_bz2_libcircle.c	/^static void DBz2_decompEnqueue(CIRCLE_handle* handle)$/;"	f	file:
DCMPF_ACL	src/dcmp/dcmp.c	/^    DCMPF_ACL,       \/* both have the same ACLs *\/$/;"	e	enum:_dcmp_field	file:
DCMPF_ACL	src/dsync/dsync.c	/^    DCMPF_ACL,       \/* both have the same ACLs *\/$/;"	e	enum:_dsync_field	file:
DCMPF_ACL_DEPEND	src/dcmp/dcmp.c	132;"	d	file:
DCMPF_ACL_DEPEND	src/dsync/dsync.c	137;"	d	file:
DCMPF_ATIME	src/dcmp/dcmp.c	/^    DCMPF_ATIME,     \/* both have the same atime *\/$/;"	e	enum:_dcmp_field	file:
DCMPF_ATIME	src/dsync/dsync.c	/^    DCMPF_ATIME,     \/* both have the same atime *\/$/;"	e	enum:_dsync_field	file:
DCMPF_ATIME_DEPEND	src/dcmp/dcmp.c	128;"	d	file:
DCMPF_ATIME_DEPEND	src/dsync/dsync.c	133;"	d	file:
DCMPF_CONTENT	src/dcmp/dcmp.c	/^    DCMPF_CONTENT,   \/* both have the same data *\/$/;"	e	enum:_dcmp_field	file:
DCMPF_CONTENT	src/dsync/dsync.c	/^    DCMPF_CONTENT,   \/* both have the same data *\/$/;"	e	enum:_dsync_field	file:
DCMPF_CONTENT_DEPEND	src/dcmp/dcmp.c	133;"	d	file:
DCMPF_CONTENT_DEPEND	src/dsync/dsync.c	138;"	d	file:
DCMPF_CTIME	src/dcmp/dcmp.c	/^    DCMPF_CTIME,     \/* both have the same ctime *\/$/;"	e	enum:_dcmp_field	file:
DCMPF_CTIME	src/dsync/dsync.c	/^    DCMPF_CTIME,     \/* both have the same ctime *\/$/;"	e	enum:_dsync_field	file:
DCMPF_CTIME_DEPEND	src/dcmp/dcmp.c	130;"	d	file:
DCMPF_CTIME_DEPEND	src/dsync/dsync.c	135;"	d	file:
DCMPF_EXIST	src/dcmp/dcmp.c	/^    DCMPF_EXIST = 0, \/* both have this file *\/$/;"	e	enum:_dcmp_field	file:
DCMPF_EXIST	src/dsync/dsync.c	/^    DCMPF_EXIST = 0, \/* both have this file *\/$/;"	e	enum:_dsync_field	file:
DCMPF_EXIST_DEPEND	src/dcmp/dcmp.c	123;"	d	file:
DCMPF_EXIST_DEPEND	src/dsync/dsync.c	128;"	d	file:
DCMPF_GID	src/dcmp/dcmp.c	/^    DCMPF_GID,       \/* both have the same GID *\/$/;"	e	enum:_dcmp_field	file:
DCMPF_GID	src/dsync/dsync.c	/^    DCMPF_GID,       \/* both have the same GID *\/$/;"	e	enum:_dsync_field	file:
DCMPF_GID_DEPEND	src/dcmp/dcmp.c	127;"	d	file:
DCMPF_GID_DEPEND	src/dsync/dsync.c	132;"	d	file:
DCMPF_MAX	src/dcmp/dcmp.c	/^    DCMPF_MAX,$/;"	e	enum:_dcmp_field	file:
DCMPF_MAX	src/dsync/dsync.c	/^    DCMPF_MAX,$/;"	e	enum:_dsync_field	file:
DCMPF_MTIME	src/dcmp/dcmp.c	/^    DCMPF_MTIME,     \/* both have the same mtime *\/$/;"	e	enum:_dcmp_field	file:
DCMPF_MTIME	src/dsync/dsync.c	/^    DCMPF_MTIME,     \/* both have the same mtime *\/$/;"	e	enum:_dsync_field	file:
DCMPF_MTIME_DEPEND	src/dcmp/dcmp.c	129;"	d	file:
DCMPF_MTIME_DEPEND	src/dsync/dsync.c	134;"	d	file:
DCMPF_PERM	src/dcmp/dcmp.c	/^    DCMPF_PERM,      \/* both have the same permission *\/$/;"	e	enum:_dcmp_field	file:
DCMPF_PERM	src/dsync/dsync.c	/^    DCMPF_PERM,      \/* both have the same permission *\/$/;"	e	enum:_dsync_field	file:
DCMPF_PERM_DEPEND	src/dcmp/dcmp.c	131;"	d	file:
DCMPF_PERM_DEPEND	src/dsync/dsync.c	136;"	d	file:
DCMPF_SIZE	src/dcmp/dcmp.c	/^    DCMPF_SIZE,      \/* both are regular file and have same size *\/$/;"	e	enum:_dcmp_field	file:
DCMPF_SIZE	src/dsync/dsync.c	/^    DCMPF_SIZE,      \/* both are regular file and have same size *\/$/;"	e	enum:_dsync_field	file:
DCMPF_SIZE_DEPEND	src/dcmp/dcmp.c	125;"	d	file:
DCMPF_SIZE_DEPEND	src/dsync/dsync.c	130;"	d	file:
DCMPF_TYPE	src/dcmp/dcmp.c	/^    DCMPF_TYPE,      \/* both are the same type *\/$/;"	e	enum:_dcmp_field	file:
DCMPF_TYPE	src/dsync/dsync.c	/^    DCMPF_TYPE,      \/* both are the same type *\/$/;"	e	enum:_dsync_field	file:
DCMPF_TYPE_DEPEND	src/dcmp/dcmp.c	124;"	d	file:
DCMPF_TYPE_DEPEND	src/dsync/dsync.c	129;"	d	file:
DCMPF_UID	src/dcmp/dcmp.c	/^    DCMPF_UID,       \/* both have the same UID *\/$/;"	e	enum:_dcmp_field	file:
DCMPF_UID	src/dsync/dsync.c	/^    DCMPF_UID,       \/* both have the same UID *\/$/;"	e	enum:_dsync_field	file:
DCMPF_UID_DEPEND	src/dcmp/dcmp.c	126;"	d	file:
DCMPF_UID_DEPEND	src/dsync/dsync.c	131;"	d	file:
DCMPS_COMMON	src/dcmp/dcmp.c	/^    DCMPS_COMMON,$/;"	e	enum:_dcmp_state	file:
DCMPS_COMMON	src/dsync/dsync.c	/^    DCMPS_COMMON,$/;"	e	enum:_dsync_state	file:
DCMPS_DIFFER	src/dcmp/dcmp.c	/^    DCMPS_DIFFER,$/;"	e	enum:_dcmp_state	file:
DCMPS_DIFFER	src/dsync/dsync.c	/^    DCMPS_DIFFER,$/;"	e	enum:_dsync_state	file:
DCMPS_INIT	src/dcmp/dcmp.c	/^    DCMPS_INIT = 'A',$/;"	e	enum:_dcmp_state	file:
DCMPS_INIT	src/dsync/dsync.c	/^    DCMPS_INIT = 'A',$/;"	e	enum:_dsync_state	file:
DCMPS_MAX	src/dcmp/dcmp.c	/^    DCMPS_MAX,$/;"	e	enum:_dcmp_state	file:
DCMPS_MAX	src/dsync/dsync.c	/^    DCMPS_MAX,$/;"	e	enum:_dsync_state	file:
DCMPS_ONLY_DEST	src/dcmp/dcmp.c	/^    DCMPS_ONLY_DEST,$/;"	e	enum:_dcmp_state	file:
DCMPS_ONLY_DEST	src/dsync/dsync.c	/^    DCMPS_ONLY_DEST,$/;"	e	enum:_dsync_state	file:
DCMPS_ONLY_SRC	src/dcmp/dcmp.c	/^    DCMPS_ONLY_SRC,$/;"	e	enum:_dcmp_state	file:
DCMPS_ONLY_SRC	src/dsync/dsync.c	/^    DCMPS_ONLY_SRC,$/;"	e	enum:_dsync_state	file:
DCMP_CONJUNCTION_DELIMITER	src/dcmp/dcmp.c	1898;"	d	file:
DCMP_CONJUNCTION_DELIMITER	src/dsync/dsync.c	2674;"	d	file:
DCMP_DISJUNCTION_DELIMITER	src/dcmp/dcmp.c	1897;"	d	file:
DCMP_DISJUNCTION_DELIMITER	src/dsync/dsync.c	2673;"	d	file:
DCMP_EXPRESSION_DELIMITER	src/dcmp/dcmp.c	1899;"	d	file:
DCMP_EXPRESSION_DELIMITER	src/dsync/dsync.c	2675;"	d	file:
DCMP_OUTPUT_PREFIX	src/dcmp/dcmp.c	1813;"	d	file:
DCMP_OUTPUT_PREFIX	src/dsync/dsync.c	2593;"	d	file:
DCMP_PATH_DELIMITER	src/dcmp/dcmp.c	1896;"	d	file:
DCMP_PATH_DELIMITER	src/dsync/dsync.c	2672;"	d	file:
DCOPY_CHUNK_SIZE	src/dcp1/common.h	65;"	d
DCOPY_DEF_PERMS_DIR	src/common/mfu_flist.h	60;"	d
DCOPY_DEF_PERMS_DIR	src/dcp1/common.h	60;"	d
DCOPY_DEF_PERMS_FILE	src/common/mfu_flist.h	59;"	d
DCOPY_DEF_PERMS_FILE	src/dcp1/common.h	59;"	d
DCOPY_abort	src/dcp1/common.c	/^void DCOPY_abort(int code)$/;"	f
DCOPY_add_objects	src/dcp1/dcp1.c	/^static void DCOPY_add_objects(CIRCLE_handle* handle)$/;"	f	file:
DCOPY_blocksize	src/dcp1/common.c	/^size_t DCOPY_blocksize;$/;"	v
DCOPY_check_paths	src/dcp1/handle_args.c	/^static void DCOPY_check_paths(void)$/;"	f	file:
DCOPY_chunksize	src/dcp1/common.c	/^size_t DCOPY_chunksize;$/;"	v
DCOPY_close_file	src/dcp1/common.c	/^int DCOPY_close_file(DCOPY_file_cache_t* cache)$/;"	f
DCOPY_copy_ownership	src/dcp1/common.c	/^void DCOPY_copy_ownership($/;"	f
DCOPY_copy_permissions	src/dcp1/common.c	/^void DCOPY_copy_permissions($/;"	f
DCOPY_copy_timestamps	src/dcp1/common.c	/^void DCOPY_copy_timestamps($/;"	f
DCOPY_copy_xattrs	src/dcp1/common.c	/^void DCOPY_copy_xattrs($/;"	f
DCOPY_decode_operation	src/dcp1/common.c	/^DCOPY_operation_t* DCOPY_decode_operation(char* op)$/;"	f
DCOPY_do_cleanup	src/dcp1/cleanup.c	/^void DCOPY_do_cleanup(DCOPY_operation_t* op, \\$/;"	f
DCOPY_do_compare	src/dcp1/compare.c	/^void DCOPY_do_compare(DCOPY_operation_t* op,$/;"	f
DCOPY_do_copy	src/dcp1/copy.c	/^void DCOPY_do_copy(DCOPY_operation_t* op,$/;"	f
DCOPY_do_treewalk	src/dcp1/treewalk.c	/^void DCOPY_do_treewalk(DCOPY_operation_t* op,$/;"	f
DCOPY_dst_cache	src/dcp1/common.c	/^DCOPY_file_cache_t DCOPY_dst_cache;$/;"	v
DCOPY_encode_operation	src/dcp1/common.c	/^char* DCOPY_encode_operation(DCOPY_operation_code_t code, \\$/;"	f
DCOPY_enqueue_cleanup_stage	src/dcp1/copy.c	/^static void DCOPY_enqueue_cleanup_stage(DCOPY_operation_t* op,$/;"	f	file:
DCOPY_enqueue_work_objects	src/dcp1/handle_args.c	/^void DCOPY_enqueue_work_objects(CIRCLE_handle* handle)$/;"	f
DCOPY_epilogue	src/dcp1/dcp1.c	/^static void DCOPY_epilogue(void)$/;"	f	file:
DCOPY_exit	src/dcp1/common.c	/^void DCOPY_exit(int code)$/;"	f
DCOPY_file_cache_t	src/dcp1/common.h	/^} DCOPY_file_cache_t;$/;"	t	typeref:struct:__anon37
DCOPY_free_path_args	src/dcp1/handle_args.c	/^void DCOPY_free_path_args(void)$/;"	f
DCOPY_global_rank	src/dcp1/common.c	/^int DCOPY_global_rank;$/;"	v
DCOPY_jump_table	src/dcp1/common.c	/^void (*DCOPY_jump_table[5])(DCOPY_operation_t* op, CIRCLE_handle* handle);$/;"	v
DCOPY_list_head	src/dcp1/common.c	/^DCOPY_stat_elem_t* DCOPY_list_head = NULL;$/;"	v
DCOPY_list_tail	src/dcp1/common.c	/^DCOPY_stat_elem_t* DCOPY_list_tail = NULL;$/;"	v
DCOPY_open_file	src/dcp1/common.c	/^int DCOPY_open_file(const char* file, int read_flag, DCOPY_file_cache_t* cache)$/;"	f
DCOPY_operation_code_t	src/dcp1/common.h	/^} DCOPY_operation_code_t;$/;"	t	typeref:enum:__anon33
DCOPY_operation_t	src/dcp1/common.h	/^} DCOPY_operation_t;$/;"	t	typeref:struct:__anon34
DCOPY_opt_free	src/dcp1/common.c	/^void DCOPY_opt_free(DCOPY_operation_t** optptr)$/;"	f
DCOPY_options_t	src/dcp1/common.h	/^} DCOPY_options_t;$/;"	t	typeref:struct:__anon36
DCOPY_parse_path_args	src/dcp1/handle_args.c	/^void DCOPY_parse_path_args(char** argv, \\$/;"	f
DCOPY_perform_compare	src/dcp1/compare.c	/^static int DCOPY_perform_compare(DCOPY_operation_t* op,$/;"	f	file:
DCOPY_perform_copy	src/dcp1/copy.c	/^static int DCOPY_perform_copy(DCOPY_operation_t* op,$/;"	f	file:
DCOPY_print_usage	src/dcp1/dcp1.c	/^void DCOPY_print_usage(void)$/;"	f
DCOPY_process_objects	src/dcp1/dcp1.c	/^static void DCOPY_process_objects(CIRCLE_handle* handle)$/;"	f	file:
DCOPY_reduce_fini	src/dcp1/dcp1.c	/^static void DCOPY_reduce_fini(const void* buf, size_t size)$/;"	f	file:
DCOPY_reduce_init	src/dcp1/dcp1.c	/^static void DCOPY_reduce_init(void)$/;"	f	file:
DCOPY_reduce_op	src/dcp1/dcp1.c	/^static void DCOPY_reduce_op(const void* buf1, size_t size1, const void* buf2, size_t size2)$/;"	f	file:
DCOPY_retry_failed_operation	src/dcp1/common.c	/^void DCOPY_retry_failed_operation(DCOPY_operation_code_t target, \\$/;"	f
DCOPY_set_metadata	src/dcp1/dcp1.c	/^static void DCOPY_set_metadata(void)$/;"	f	file:
DCOPY_src_cache	src/dcp1/common.c	/^DCOPY_file_cache_t DCOPY_src_cache;$/;"	v
DCOPY_stat_elem_t	src/dcp1/common.h	/^} DCOPY_stat_elem_t;$/;"	t	typeref:struct:list_elem
DCOPY_stat_process_dir	src/dcp1/treewalk.c	/^static void DCOPY_stat_process_dir(DCOPY_operation_t* op,$/;"	f	file:
DCOPY_stat_process_file	src/dcp1/treewalk.c	/^static void DCOPY_stat_process_file(DCOPY_operation_t* op,$/;"	f	file:
DCOPY_stat_process_link	src/dcp1/treewalk.c	/^static void DCOPY_stat_process_link(DCOPY_operation_t* op,$/;"	f	file:
DCOPY_statistics	src/dcp1/common.c	/^DCOPY_statistics_t DCOPY_statistics;$/;"	v
DCOPY_statistics_t	src/dcp1/common.h	/^} DCOPY_statistics_t;$/;"	t	typeref:struct:__anon35
DCOPY_sum_int64	src/dcp1/dcp1.c	/^static int64_t DCOPY_sum_int64(int64_t val)$/;"	f	file:
DCOPY_truncate_file	src/dcp1/cleanup.c	/^static void DCOPY_truncate_file(DCOPY_operation_t* op, \\$/;"	f	file:
DCOPY_user_opts	src/dcp1/common.c	/^DCOPY_options_t DCOPY_user_opts;$/;"	v
DDUP_CHUNK_SIZE	src/ddup/ddup.c	17;"	d	file:
DDUP_KEY_SIZE	src/ddup/ddup.c	14;"	d	file:
DEBUG	src/dfind/common.h	12;"	d
DEBUG	test/legacy/dtest/dtest	/^	DEBUG = False$/;"	v	class:test
DEFAULT	src/common/mfu_flist_archive.c	/^    DEFAULT,        \/* attempt to dynamically choose best option *\/$/;"	e	enum:__anon18	file:
DEREFERENCE	src/common/mfu_flist_walk.c	/^static int DEREFERENCE;$/;"	v	file:
DFS	src/common/mfu_param_path.h	/^    enum                 {POSIX, DFS, DAOS} type;$/;"	e	enum:__anon24::__anon25
DGREP_ARGS	src/dgrep/dgrep.c	/^char *DGREP_ARGS;$/;"	v
DGREP_H	src/dgrep/dgrep.h	2;"	d
DGREP_LOG_DBG	src/dgrep/log.h	/^    DGREP_LOG_DBG   = 5$/;"	e	enum:__anon39
DGREP_LOG_ERR	src/dgrep/log.h	/^    DGREP_LOG_ERR   = 2,$/;"	e	enum:__anon39
DGREP_LOG_FATAL	src/dgrep/log.h	/^    DGREP_LOG_FATAL = 1,$/;"	e	enum:__anon39
DGREP_LOG_INFO	src/dgrep/log.h	/^    DGREP_LOG_INFO  = 4,$/;"	e	enum:__anon39
DGREP_LOG_WARN	src/dgrep/log.h	/^    DGREP_LOG_WARN  = 3,$/;"	e	enum:__anon39
DGREP_PATH	src/dgrep/dgrep.c	/^char *DGREP_PATH;$/;"	v
DGREP_debug_level	src/dgrep/dgrep.c	/^DGREP_loglevel DGREP_debug_level;$/;"	v
DGREP_debug_stream	src/dgrep/dgrep.c	/^FILE *DGREP_debug_stream;$/;"	v
DGREP_global_rank	src/dgrep/dgrep.c	/^int DGREP_global_rank;$/;"	v
DGREP_loglevel	src/dgrep/log.h	/^} DGREP_loglevel;$/;"	t	typeref:enum:__anon39
DGREP_search	src/dgrep/dgrep.c	/^DGREP_search(CIRCLE_handle *handle)$/;"	f
DGREP_start	src/dgrep/dgrep.c	/^DGREP_start(CIRCLE_handle *handle)$/;"	f
DIRECT	src/common/mfu_flist_remove.c	/^  DIRECT = 0,$/;"	e	enum:mfu_remove_algos_t	file:
DIR_PERMS	src/dfilemaker/dfilemaker.c	12;"	d	file:
DPARALLEL_LOG_DBG	src/dparallel/log.h	/^                                  DPARALLEL_LOG_DBG   = 5$/;"	e	enum:DPARALLEL_loglevel
DPARALLEL_LOG_ERR	src/dparallel/log.h	/^                                  DPARALLEL_LOG_ERR   = 2,$/;"	e	enum:DPARALLEL_loglevel
DPARALLEL_LOG_FATAL	src/dparallel/log.h	/^typedef enum DPARALLEL_loglevel { DPARALLEL_LOG_FATAL = 1,$/;"	e	enum:DPARALLEL_loglevel
DPARALLEL_LOG_INFO	src/dparallel/log.h	/^                                  DPARALLEL_LOG_INFO  = 4,$/;"	e	enum:DPARALLEL_loglevel
DPARALLEL_LOG_WARN	src/dparallel/log.h	/^                                  DPARALLEL_LOG_WARN  = 3,$/;"	e	enum:DPARALLEL_loglevel
DPARALLEL_debug_level	src/dparallel/dparallel.c	/^enum DPARALLEL_loglevel DPARALLEL_debug_level;$/;"	v	typeref:enum:DPARALLEL_loglevel
DPARALLEL_debug_stream	src/dparallel/dparallel.c	/^FILE* DPARALLEL_debug_stream;$/;"	v
DPARALLEL_global_rank	src/dparallel/dparallel.c	/^int32_t DPARALLEL_global_rank;$/;"	v
DPARALLEL_loglevel	src/dparallel/log.h	/^                                } DPARALLEL_loglevel;$/;"	t	typeref:enum:DPARALLEL_loglevel
DPARALLEL_loglevel	src/dparallel/log.h	/^typedef enum DPARALLEL_loglevel { DPARALLEL_LOG_FATAL = 1,$/;"	g
DPARALLEL_process	src/dparallel/dparallel.c	/^void DPARALLEL_process(CIRCLE_handle* handle)$/;"	f
DPARALLEL_readline	src/dparallel/dparallel.c	/^char* DPARALLEL_readline()$/;"	f
DTAR_INDEX_FILENAME_SUFFIX	src/common/mfu_flist_archive.c	1020;"	d	file:
DTAR_LOG_DBG	test/legacy/dtar_tests/dir/log.h	/^    DTAR_LOG_DBG   = 5$/;"	e	enum:__anon41
DTAR_LOG_ERR	test/legacy/dtar_tests/dir/log.h	/^    DTAR_LOG_ERR   = 2,$/;"	e	enum:__anon41
DTAR_LOG_FATAL	test/legacy/dtar_tests/dir/log.h	/^    DTAR_LOG_FATAL = 1,$/;"	e	enum:__anon41
DTAR_LOG_INFO	test/legacy/dtar_tests/dir/log.h	/^    DTAR_LOG_INFO  = 4,$/;"	e	enum:__anon41
DTAR_LOG_WARN	test/legacy/dtar_tests/dir/log.h	/^    DTAR_LOG_WARN  = 3,$/;"	e	enum:__anon41
DTAR_MAGIC	src/common/mfu_flist_archive.c	44;"	d	file:
DTAR_abort	src/common/mfu_flist_archive.c	/^static void DTAR_abort(int code)$/;"	f	file:
DTAR_abort	src/dtar/dtar.c	/^static void DTAR_abort(int code)$/;"	f	file:
DTAR_data_chunks	src/common/mfu_flist_archive.c	/^mfu_file_chunk* DTAR_data_chunks = NULL; \/* linked list of chunks from mfu_file_chunk_list_alloc *\/$/;"	v
DTAR_data_offsets	src/common/mfu_flist_archive.c	/^uint64_t* DTAR_data_offsets      = NULL; \/* byte offset within archive file for start of data of each entry *\/$/;"	v
DTAR_decode_operation	src/common/mfu_flist_archive.c	/^static DTAR_operation_t* DTAR_decode_operation(char* op)$/;"	f	file:
DTAR_encode_operation	src/common/mfu_flist_archive.c	/^static char* DTAR_encode_operation($/;"	f	file:
DTAR_enqueue_copy_chunk	src/common/mfu_flist_archive.c	/^static void DTAR_enqueue_copy_chunk(CIRCLE_handle* handle)$/;"	f	file:
DTAR_enqueue_extract	src/common/mfu_flist_archive.c	/^static void DTAR_enqueue_extract(CIRCLE_handle* handle)$/;"	f	file:
DTAR_err	src/common/mfu_flist_archive.c	/^static int DTAR_err = 0; \/* whether a process encounters an error while executing libcircle ops *\/$/;"	v	file:
DTAR_exit	src/common/mfu_flist_archive.c	/^static void DTAR_exit(int code)$/;"	f	file:
DTAR_exit	src/dtar/dtar.c	/^static void DTAR_exit(int code)$/;"	f	file:
DTAR_flist	src/common/mfu_flist_archive.c	/^mfu_flist DTAR_flist;                    \/* source flist of set of items being copied into archive *\/$/;"	v
DTAR_loglevel	test/legacy/dtar_tests/dir/log.h	/^} DTAR_loglevel;$/;"	t	typeref:enum:__anon41
DTAR_operation_code_t	src/common/mfu_flist_archive.c	/^} DTAR_operation_code_t;$/;"	t	typeref:enum:__anon11	file:
DTAR_operation_t	src/common/mfu_flist_archive.c	/^} DTAR_operation_t;$/;"	t	typeref:struct:__anon12	file:
DTAR_opts	src/common/mfu_flist_archive.c	/^mfu_archive_opts_t* DTAR_opts    = NULL; \/* pointer to archive options *\/$/;"	v
DTAR_perform_copy	src/common/mfu_flist_archive.c	/^static void DTAR_perform_copy(CIRCLE_handle* handle)$/;"	f	file:
DTAR_perform_extract	src/common/mfu_flist_archive.c	/^static void DTAR_perform_extract(CIRCLE_handle* handle)$/;"	f	file:
DTAR_rank_disps	src/common/mfu_flist_archive.c	/^int* DTAR_rank_disps             = NULL; \/* given a rank, get offset into data offsets array for its files *\/$/;"	v
DTAR_total_bytes	src/common/mfu_flist_archive.c	/^uint64_t DTAR_total_bytes = 0;$/;"	v
DTAR_total_items	src/common/mfu_flist_archive.c	/^uint64_t DTAR_total_items = 0;$/;"	v
DTAR_writer	src/common/mfu_flist_archive.c	/^DTAR_writer_t DTAR_writer; \/* state of open archive file and I\/O buffer *\/$/;"	v
DTAR_writer_t	src/common/mfu_flist_archive.c	/^} DTAR_writer_t;$/;"	t	typeref:struct:__anon13	file:
ENOATTR	src/common/mfu_flist.h	54;"	d
ENOATTR	src/dcp1/common.h	54;"	d
ENUM_DESC_BUF	src/common/mfu_daos.h	12;"	d
ENUM_DESC_NR	src/common/mfu_daos.h	11;"	d
ENUM_KEY_BUF	src/common/mfu_daos.h	9;"	d
ENUM_LARGE_KEY_BUF	src/common/mfu_daos.h	10;"	d
EXTRACT_DATA	src/common/mfu_flist_archive.c	/^    EXTRACT_DATA \/* extract data from archive into user files *\/$/;"	e	enum:__anon11	file:
FD_BLOCK_SIZE	src/dcp1/common.h	68;"	d
FD_PAGE_CACHE_SIZE	src/common/mfu_flist.h	77;"	d
FD_PAGE_CACHE_SIZE	src/dcp1/common.h	77;"	d
FILENAME	src/common/mfu_flist_sort.c	/^    FILENAME,$/;"	e	enum:__anon23	file:
FILENAME	src/dsh/dsh.c	/^    FILENAME,$/;"	e	enum:__anon40	file:
FILENAME_LEN	src/common/mfu_daos.h	15;"	d
FILESIZE	src/common/mfu_flist_sort.c	/^    FILESIZE,$/;"	e	enum:__anon23	file:
FILESIZE	src/dsh/dsh.c	/^    FILESIZE,$/;"	e	enum:__anon40	file:
FILE_MODE	src/common/mfu_bz2_static.c	26;"	d	file:
FILE_MODE	src/common/mfu_compress_bz2_libcircle.c	26;"	d	file:
FILE_MODE	src/common/mfu_decompress_bz2_libcircle.c	26;"	d	file:
FILE_PERMS	src/dfilemaker/dfilemaker.c	11;"	d	file:
FS_IOC_FIEMAP	test/tests/test_dcp/checkfiemap.c	48;"	d	file:
GCS_SUCCESS	src/dbcast/dbcast.c	35;"	d	file:
GCS_Shmem_alloc	src/dbcast/dbcast.c	/^static void* GCS_Shmem_alloc(size_t size, MPI_Comm comm)$/;"	f	file:
GCS_Shmem_free	src/dbcast/dbcast.c	/^static int GCS_Shmem_free(void* ptr, MPI_Comm comm)$/;"	f	file:
GROUPID	src/common/mfu_flist_sort.c	/^    GROUPID,$/;"	e	enum:__anon23	file:
GROUPID	src/dsh/dsh.c	/^    GROUPID,$/;"	e	enum:__anon40	file:
GROUPNAME	src/common/mfu_flist_sort.c	/^    GROUPNAME,$/;"	e	enum:__anon23	file:
GROUPNAME	src/dsh/dsh.c	/^    GROUPNAME,$/;"	e	enum:__anon40	file:
H5Sencode1	src/common/mfu_daos.c	22;"	d	file:
HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC	src/common/mfu.h	14;"	d
HLIST_HEAD	src/common/list.h	295;"	d
HLIST_HEAD_INIT	src/common/list.h	294;"	d
INCLOC	src/dfilemaker/makefile	/^INCLOC = ${BASEDIR}\/install\/include$/;"	m
INDEX_FILE	src/common/mfu_flist_archive.c	/^    INDEX_FILE,  \/* write index as a separate file from the archive *\/$/;"	e	enum:__anon15	file:
INDEX_FOOTER	src/common/mfu_flist_archive.c	/^    INDEX_FOOTER \/* write index as footer entry in archive *\/$/;"	e	enum:__anon15	file:
INDEX_XATTR	src/common/mfu_flist_archive.c	/^    INDEX_XATTR, \/* write index as xattr *\/$/;"	e	enum:__anon15	file:
INIT_HLIST_HEAD	src/common/list.h	296;"	d
INIT_HLIST_NODE	src/common/list.h	297;"	d
INIT_LIST_HEAD	src/common/list.h	35;"	d
ITEM_COUNT	src/common/mfu_flist_chmod.c	/^  ITEM_COUNT = 0,$/;"	e	enum:__anon19	file:
LIBARCHIVE	src/common/mfu_flist_archive.c	/^    LIBARCHIVE,     \/* read\/write through libarchvie, round-robin items across ranks *\/$/;"	e	enum:__anon18	file:
LIBARCHIVE_IDX	src/common/mfu_flist_archive.c	/^    LIBARCHIVE_IDX, \/* read\/write through libarchvie, lseek to each entry *\/$/;"	e	enum:__anon18	file:
LIBCIRCLE	src/common/mfu_flist_archive.c	/^    LIBCIRCLE       \/* direct read of data, chunk list to init libcircle *\/$/;"	e	enum:__anon18	file:
LIBCIRCLE	src/common/mfu_flist_remove.c	/^  LIBCIRCLE$/;"	e	enum:mfu_remove_algos_t	file:
LIBLOC	src/dfilemaker/makefile	/^LIBLOC = ${BASEDIR}\/install\/lib$/;"	m
LIST_H	src/common/list.h	9;"	d
LIST_HEAD	src/common/list.h	32;"	d
LIST_HEAD_INIT	src/common/list.h	30;"	d
LOG	src/dgrep/log.h	15;"	d
LOG	src/dparallel/log.h	17;"	d
LOG	test/legacy/dtar_tests/dir/log.h	16;"	d
LOG_H	src/dgrep/log.h	2;"	d
LOG_H	test/legacy/dtar_tests/dir/log.h	2;"	d
MAP	src/common/mfu_flist_remove.c	/^  MAP,$/;"	e	enum:mfu_remove_algos_t	file:
MAX_ARGS	src/common/mfu_flist.h	84;"	d
MAX_ARGS	src/common/mfu_flist.h	86;"	d
MAX_ARGS	src/dcp1/common.h	84;"	d
MAX_ARGS	src/dcp1/common.h	86;"	d
MAX_DISTRIBUTE_SEPARATORS	src/dwalk/dwalk.c	42;"	d	file:
MFU_ABORT	src/common/mfu_util.h	116;"	d
MFU_BUFFER_SIZE	src/common/mfu_flist.h	68;"	d
MFU_BUFFER_SIZE_STR	src/common/mfu_flist.h	67;"	d
MFU_BZ2_H	src/common/mfu_bz2.h	2;"	d
MFU_CALLOC	src/common/mfu_util.h	136;"	d
MFU_CHUNK_SIZE	src/common/mfu_flist.h	64;"	d
MFU_CHUNK_SIZE_STR	src/common/mfu_flist.h	63;"	d
MFU_ERR	src/common/mfu_errors.h	24;"	d
MFU_ERRF	src/common/mfu_errors.h	36;"	d
MFU_ERRORS_H	src/common/mfu_errors.h	9;"	d
MFU_ERRP	src/common/mfu_errors.h	37;"	d
MFU_ERR_DAOS	src/common/mfu_errors.h	32;"	d
MFU_ERR_DAOS_INVAL_ARG	src/common/mfu_errors.h	33;"	d
MFU_ERR_DCP	src/common/mfu_errors.h	28;"	d
MFU_ERR_DCP_COPY	src/common/mfu_errors.h	29;"	d
MFU_ERR_INVAL_ARG	src/common/mfu_errors.h	25;"	d
MFU_FAILURE	src/common/mfu.h	10;"	d
MFU_FLIST_H	src/common/mfu_flist.h	10;"	d
MFU_FLIST_INTERNAL_H	src/common/mfu_flist_internal.h	10;"	d
MFU_FLIST_NULL	src/common/mfu_flist.c	/^mfu_flist MFU_FLIST_NULL = &flist_null;$/;"	v
MFU_H	src/common/mfu.h	7;"	d
MFU_IO_H	src/common/mfu_io.h	9;"	d
MFU_IO_TRIES	src/common/mfu_io.c	20;"	d	file:
MFU_IO_USLEEP	src/common/mfu_io.c	21;"	d	file:
MFU_LOG	src/common/mfu_util.h	83;"	d
MFU_LOG_DBG	src/common/mfu_util.h	/^    MFU_LOG_DBG     = 6$/;"	e	enum:__anon32
MFU_LOG_ERR	src/common/mfu_util.h	/^    MFU_LOG_ERR     = 2,$/;"	e	enum:__anon32
MFU_LOG_FATAL	src/common/mfu_util.h	/^    MFU_LOG_FATAL   = 1,$/;"	e	enum:__anon32
MFU_LOG_INFO	src/common/mfu_util.h	/^    MFU_LOG_INFO    = 4,$/;"	e	enum:__anon32
MFU_LOG_NONE	src/common/mfu_util.h	/^    MFU_LOG_NONE    = 0,$/;"	e	enum:__anon32
MFU_LOG_VERBOSE	src/common/mfu_util.h	/^    MFU_LOG_VERBOSE = 5,$/;"	e	enum:__anon32
MFU_LOG_WARN	src/common/mfu_util.h	/^    MFU_LOG_WARN    = 3,$/;"	e	enum:__anon32
MFU_MALLOC	src/common/mfu_util.h	127;"	d
MFU_MEMALIGN	src/common/mfu_util.h	147;"	d
MFU_PARAM_PATH_H	src/common/mfu_param_path.h	10;"	d
MFU_PATH_DEST_CHILD	src/common/mfu_path.h	/^    MFU_PATH_DEST_CHILD,  \/* dest is contained within child *\/$/;"	e	enum:__anon30
MFU_PATH_DIFF	src/common/mfu_path.h	/^    MFU_PATH_DIFF,        \/* src and dest are different and one does not contain the other *\/$/;"	e	enum:__anon30
MFU_PATH_EQUAL	src/common/mfu_path.h	/^    MFU_PATH_EQUAL   = 0, \/* src and dest paths are same *\/$/;"	e	enum:__anon30
MFU_PATH_H	src/common/mfu_path.h	2;"	d
MFU_PATH_SRC_CHILD	src/common/mfu_path.h	/^    MFU_PATH_SRC_CHILD,   \/* src is contained within dest *\/$/;"	e	enum:__anon30
MFU_PRED_AMIN	src/common/mfu_pred.c	/^int MFU_PRED_AMIN (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_ANEWER	src/common/mfu_pred.c	/^int MFU_PRED_ANEWER (mfu_flist flist, uint64_t idx, void * arg)$/;"	f
MFU_PRED_ATIME	src/common/mfu_pred.c	/^int MFU_PRED_ATIME (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_CMIN	src/common/mfu_pred.c	/^int MFU_PRED_CMIN (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_CNEWER	src/common/mfu_pred.c	/^int MFU_PRED_CNEWER (mfu_flist flist, uint64_t idx, void * arg)$/;"	f
MFU_PRED_CTIME	src/common/mfu_pred.c	/^int MFU_PRED_CTIME (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_EXEC	src/dfind/dfind.c	/^int MFU_PRED_EXEC (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_GID	src/common/mfu_pred.c	/^int MFU_PRED_GID (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_GROUP	src/common/mfu_pred.c	/^int MFU_PRED_GROUP (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_H	src/common/mfu_pred.h	7;"	d
MFU_PRED_MMIN	src/common/mfu_pred.c	/^int MFU_PRED_MMIN (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_MNEWER	src/common/mfu_pred.c	/^int MFU_PRED_MNEWER (mfu_flist flist, uint64_t idx, void * arg)$/;"	f
MFU_PRED_MTIME	src/common/mfu_pred.c	/^int MFU_PRED_MTIME (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_NAME	src/common/mfu_pred.c	/^int MFU_PRED_NAME (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_PATH	src/common/mfu_pred.c	/^int MFU_PRED_PATH (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_PRINT	src/dfind/dfind.c	/^int MFU_PRED_PRINT (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_REGEX	src/common/mfu_pred.c	/^int MFU_PRED_REGEX (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_SIZE	src/common/mfu_pred.c	/^int MFU_PRED_SIZE (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_TYPE	src/common/mfu_pred.c	/^int MFU_PRED_TYPE (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_UID	src/common/mfu_pred.c	/^int MFU_PRED_UID (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PRED_USER	src/common/mfu_pred.c	/^int MFU_PRED_USER (mfu_flist flist, uint64_t idx, void* arg)$/;"	f
MFU_PROGRESS_H	src/common/mfu_progress.h	7;"	d
MFU_STRDUP	src/common/mfu_util.h	157;"	d
MFU_STRDUPF	src/common/mfu_util.h	175;"	d
MFU_SUCCESS	src/common/mfu.h	9;"	d
MFU_TYPE_DIR	src/common/mfu_flist.h	/^    MFU_TYPE_DIR     = 3, \/* directory *\/$/;"	e	enum:mfu_filetypes_e
MFU_TYPE_FILE	src/common/mfu_flist.h	/^    MFU_TYPE_FILE    = 2, \/* regular file *\/$/;"	e	enum:mfu_filetypes_e
MFU_TYPE_LINK	src/common/mfu_flist.h	/^    MFU_TYPE_LINK    = 4, \/* symlink *\/$/;"	e	enum:mfu_filetypes_e
MFU_TYPE_NULL	src/common/mfu_flist.h	/^    MFU_TYPE_NULL    = 0, \/* type not set *\/$/;"	e	enum:mfu_filetypes_e
MFU_TYPE_UNKNOWN	src/common/mfu_flist.h	/^    MFU_TYPE_UNKNOWN = 1, \/* type not known *\/$/;"	e	enum:mfu_filetypes_e
MFU_UTIL_H	src/common/mfu_util.h	10;"	d
MPCC	src/dfilemaker/makefile	/^MPCC = mpicc$/;"	m
MTIME	src/common/mfu_flist_sort.c	/^    MTIME,$/;"	e	enum:__anon23	file:
MTIME	src/dsh/dsh.c	/^    MTIME,$/;"	e	enum:__anon40	file:
NSECS_IN_DAY	src/common/mfu_pred.c	/^static uint64_t NSECS_IN_DAY = (uint64_t) (1000000000ULL * 60ULL * 60ULL * 24ULL);$/;"	v	file:
NSECS_IN_MIN	src/common/mfu_pred.c	/^static uint64_t NSECS_IN_MIN = (uint64_t) (1000000000ULL * 60ULL);$/;"	v	file:
NULLFIELD	src/common/mfu_flist_sort.c	/^    NULLFIELD = 0,$/;"	e	enum:__anon23	file:
NULLFIELD	src/dsh/dsh.c	/^    NULLFIELD = 0,$/;"	e	enum:__anon40	file:
NULL_P	src/common/list.h	284;"	d
NULL_P	src/common/list.h	286;"	d
NUM_UNITS_BW	src/common/mfu_util.c	335;"	d	file:
NUM_UNITS_BYTES	src/common/mfu_util.c	326;"	d	file:
NUM_UNITS_COUNT	src/common/mfu_util.c	284;"	d	file:
OID_ARR_SIZE	src/common/mfu_daos.h	13;"	d
ONEMB	test/tests/test_dcp/checkfiemap.c	51;"	d	file:
PATH_MAX	src/common/mfu_flist.h	80;"	d
PATH_MAX	src/dcp1/common.h	80;"	d
POOL_HANDLE	src/common/mfu_daos.h	/^    POOL_HANDLE,$/;"	e	enum:handleType
POSIX	src/common/mfu_param_path.h	/^    enum                 {POSIX, DFS, DAOS} type;$/;"	e	enum:__anon24::__anon25
REDUCE_BYTES	src/common/mfu_flist_archive.c	195;"	d	file:
REDUCE_ITEMS	src/common/mfu_flist_archive.c	196;"	d	file:
REMOVE_FILES	src/common/mfu_flist_walk.c	/^static int REMOVE_FILES;$/;"	v	file:
SCAN_LINEAR	src/common/mfu_flist_archive.c	/^    SCAN_LINEAR,   \/* distributed read, with linear scan across processes *\/$/;"	e	enum:__anon17	file:
SCAN_PARALLEL	src/common/mfu_flist_archive.c	/^    SCAN_PARALLEL, \/* distributed read, with parallel scan (experimental, requires a well-formed archive) *\/$/;"	e	enum:__anon17	file:
SCAN_SINGLE	src/common/mfu_flist_archive.c	/^    SCAN_SINGLE,   \/* single process scans the archive *\/$/;"	e	enum:__anon17	file:
SET_DIR_PERMS	src/common/mfu_flist_walk.c	/^static int SET_DIR_PERMS;$/;"	v	file:
SORT	src/common/mfu_flist_remove.c	/^  SORT,$/;"	e	enum:mfu_remove_algos_t	file:
SOURCEDIR	doc/Makefile	/^SOURCEDIR     = rst$/;"	m
SPHINXBUILD	doc/Makefile	/^SPHINXBUILD   = python -msphinx$/;"	m
SPHINXOPTS	doc/Makefile	/^SPHINXOPTS    =$/;"	m
SPHINXPROJ	doc/Makefile	/^SPHINXPROJ    = mpiFileUtils$/;"	m
SPREAD	src/common/mfu_flist_remove.c	/^  SPREAD,$/;"	e	enum:mfu_remove_algos_t	file:
STRMAP_FAILURE	src/common/strmap.c	14;"	d	file:
STRMAP_H	src/common/strmap.h	2;"	d
STRMAP_SUCCESS	src/common/strmap.h	15;"	d
SYS_getdents	src/common/mfu_flist_walk.c	195;"	d	file:
TREEWALK	src/dcp1/common.h	/^    TREEWALK, COPY, CLEANUP, COMPARE$/;"	e	enum:__anon33
TV_ttf_display_type	src/common/mfu_path.c	/^static int TV_ttf_display_type(const mfu_path* path)$/;"	f	file:
Thread	test/legacy/dtest/dtest	/^from threading import Thread$/;"	i
ULLONG_MAX	src/common/mfu_util.c	23;"	d	file:
USERID	src/common/mfu_flist_sort.c	/^    USERID,$/;"	e	enum:__anon23	file:
USERID	src/dsh/dsh.c	/^    USERID,$/;"	e	enum:__anon40	file:
USERNAME	src/common/mfu_flist_sort.c	/^    USERNAME,$/;"	e	enum:__anon23	file:
USERNAME	src/dsh/dsh.c	/^    USERNAME,$/;"	e	enum:__anon40	file:
UUID_LEN	src/common/mfu_daos.h	16;"	d
UUID_STR_LEN	src/daos-gen/daos-gen.c	19;"	d	file:
XATTR_COPY_ALL	src/common/mfu_param_path.h	/^    XATTR_COPY_ALL,$/;"	e	enum:__anon27
XATTR_COPY_INVAL	src/common/mfu_param_path.h	/^    XATTR_COPY_INVAL,$/;"	e	enum:__anon27
XATTR_COPY_NONE	src/common/mfu_param_path.h	/^    XATTR_COPY_NONE,$/;"	e	enum:__anon27
XATTR_SKIP_LUSTRE	src/common/mfu_param_path.h	/^    XATTR_SKIP_LUSTRE,$/;"	e	enum:__anon27
XATTR_USE_LIBATTR	src/common/mfu_param_path.h	/^    XATTR_USE_LIBATTR,$/;"	e	enum:__anon27
_BSD_SOURCE	src/common/mfu_flist.h	32;"	d
_BSD_SOURCE	src/dcp1/common.h	26;"	d
_COMMON_H	src/dfind/common.h	2;"	d
_DPARALLEL_DPARALLEL_H	src/dparallel/dparallel.h	2;"	d
_DPARALLEL_LOG_H	src/dparallel/log.h	2;"	d
_FILE_OFFSET_BITS	src/common/mfu_flist.h	14;"	d
_FILE_OFFSET_BITS	src/common/mfu_flist.h	15;"	d
_FILE_OFFSET_BITS	src/common/mfu_io.h	14;"	d
_FILE_OFFSET_BITS	src/common/mfu_io.h	15;"	d
_FILE_OFFSET_BITS	src/dcp1/common.h	8;"	d
_FILE_OFFSET_BITS	src/dcp1/common.h	9;"	d
_GNU_SOURCE	src/common/mfu_bz2_static.c	2;"	d	file:
_GNU_SOURCE	src/common/mfu_compress_bz2_libcircle.c	2;"	d	file:
_GNU_SOURCE	src/common/mfu_daos.c	1;"	d	file:
_GNU_SOURCE	src/common/mfu_decompress_bz2_libcircle.c	2;"	d	file:
_GNU_SOURCE	src/common/mfu_flist.c	1;"	d	file:
_GNU_SOURCE	src/common/mfu_flist.h	37;"	d
_GNU_SOURCE	src/common/mfu_flist_archive.c	11;"	d	file:
_GNU_SOURCE	src/common/mfu_flist_copy.c	1;"	d	file:
_GNU_SOURCE	src/common/mfu_flist_io.c	3;"	d	file:
_GNU_SOURCE	src/common/mfu_flist_usrgrp.c	3;"	d	file:
_GNU_SOURCE	src/common/mfu_flist_walk.c	3;"	d	file:
_GNU_SOURCE	src/common/mfu_io.c	1;"	d	file:
_GNU_SOURCE	src/common/mfu_param_path.c	1;"	d	file:
_GNU_SOURCE	src/common/mfu_util.c	2;"	d	file:
_GNU_SOURCE	src/dbcast/dbcast.c	3;"	d	file:
_GNU_SOURCE	src/dcp1/common.h	31;"	d
_LARGEFILE64_SOURCE	src/common/mfu_bz2_static.c	4;"	d	file:
_LARGEFILE64_SOURCE	src/common/mfu_compress_bz2_libcircle.c	4;"	d	file:
_LARGEFILE64_SOURCE	src/common/mfu_decompress_bz2_libcircle.c	4;"	d	file:
_LARGEFILE64_SOURCE	src/common/mfu_flist.h	19;"	d
_LARGEFILE64_SOURCE	src/common/mfu_flist_archive.c	14;"	d	file:
_LARGEFILE64_SOURCE	src/common/mfu_io.h	19;"	d
_LARGEFILE64_SOURCE	src/dcp1/common.h	13;"	d
_LARGEFILE_SOURCE	src/common/mfu_flist.h	27;"	d
_LARGEFILE_SOURCE	src/common/mfu_io.h	27;"	d
_LARGEFILE_SOURCE	src/dcp1/common.h	21;"	d
_XOPEN_SOURCE	src/common/mfu.h	20;"	d
_XOPEN_SOURCE	src/dcmp/dcmp.c	12;"	d	file:
_XOPEN_SOURCE	src/dsync/dsync.c	32;"	d	file:
__COMMON_H_	src/dcp1/common.h	4;"	d
__DCOPY_HANDLE_ARGS_H	src/dcp1/handle_args.h	4;"	d
__DCP_CLEANUP_H	src/dcp1/cleanup.h	4;"	d
__DCP_COMPARE_H	src/dcp1/compare.h	4;"	d
__DCP_COPY_H	src/dcp1/copy.h	4;"	d
__DCP_H_	src/dcp1/dcp1.h	4;"	d
__DCP_TREEWALK_H	src/dcp1/treewalk.h	4;"	d
__G_MACROS_H__	src/common/mfu_flist.c	3;"	d	file:
__G_MACROS_H__	src/common/mfu_flist_copy.c	3;"	d	file:
__USE_LARGEFILE64	src/common/mfu_flist.h	23;"	d
__USE_LARGEFILE64	src/common/mfu_io.h	23;"	d
__USE_LARGEFILE64	src/dcp1/common.h	17;"	d
__check_fiemap	test/tests/test_dcp/checkfiemap.c	/^static int __check_fiemap(int fd, long long orig_size, int test)$/;"	f	file:
__hlist_del	src/common/list.h	/^static inline void __hlist_del(hlist_node_t *n)$/;"	f
__init__	test/legacy/dtest/dtest	/^	def __init__(self):$/;"	m	class:test
__init__	test/legacy/dtest/moab.py	/^	def __init__(self, id):$/;"	m	class:job
__list_add	src/common/list.h	/^static inline void __list_add(struct list_head * new,$/;"	f
__list_del	src/common/list.h	/^static inline void __list_del(struct list_head *prev,$/;"	f
__list_splice	src/common/list.h	/^static inline void __list_splice(struct list_head *list,$/;"	f
__validate__	test/legacy/dtest/dtest	/^	def __validate__(self):$/;"	m	class:test	file:
_dcmp_field	src/dcmp/dcmp.c	/^typedef enum _dcmp_field {$/;"	g	file:
_dcmp_state	src/dcmp/dcmp.c	/^typedef enum _dcmp_state {$/;"	g	file:
_dsync_field	src/dsync/dsync.c	/^typedef enum _dsync_field {$/;"	g	file:
_dsync_state	src/dsync/dsync.c	/^typedef enum _dsync_state {$/;"	g	file:
_total_size	test/legacy/dtest/dtest	/^	def _total_size(self, source):$/;"	m	class:test
a	src/common/mfu_compress_bz2_libcircle.c	/^static char** a;$/;"	v	file:
add_parent_dirs	src/dtar/dtar.c	/^static int add_parent_dirs($/;"	f	file:
add_type	src/dfind/dfind.c	/^static int add_type(mfu_pred* p, char t)$/;"	f	file:
ak	src/common/mfu_daos.h	/^    akey_t **ak;$/;"	m	struct:hdf5_args
akey_data	src/common/mfu_daos.h	/^    akey_t *akey_data;$/;"	m	struct:hdf5_args
akey_dims	src/common/mfu_daos.h	/^    hsize_t akey_dims[1];     $/;"	m	struct:hdf5_args
akey_dset	src/common/mfu_daos.h	/^    hid_t akey_dset;$/;"	m	struct:hdf5_args
akey_dspace	src/common/mfu_daos.h	/^    hid_t akey_dspace;$/;"	m	struct:hdf5_args
akey_memtype	src/common/mfu_daos.h	/^    hid_t akey_memtype;$/;"	m	struct:hdf5_args
akey_offset	src/common/mfu_daos.h	/^	uint64_t akey_offset;$/;"	m	struct:__anon6
akey_t	src/common/mfu_daos.h	/^} akey_t;$/;"	t	typeref:struct:__anon7
akey_val	src/common/mfu_daos.h	/^	hvl_t akey_val;$/;"	m	struct:__anon7
akey_vtype	src/common/mfu_daos.h	/^    hid_t akey_vtype;$/;"	m	struct:hdf5_args
all	src/common/mfu_flist.h	/^    int all;             \/* set to 1 if all bits should be set (e.g. a+r) *\/$/;"	m	struct:mfu_perms_t
allgather_offsets	src/common/mfu_flist_archive.c	/^static void allgather_offsets($/;"	f	file:
alloc_iov_buf	src/common/mfu_daos.c	/^static int alloc_iov_buf($/;"	f	file:
allow_exist_dst_cont	src/common/mfu_daos.h	/^    bool allow_exist_dst_cont;          \/* whether to allow the dst container to exist for DAOS API *\/$/;"	m	struct:__anon2
api	src/common/mfu_daos.h	/^    daos_api_t api;         \/* API to use *\/$/;"	m	struct:__anon2
archive_index_filename	src/common/mfu_flist_archive.c	/^static char* archive_index_filename(const char* file)$/;"	f	file:
arg	src/common/mfu_flist.h	/^    void* arg;                    \/* argument to be passed to function *\/$/;"	m	struct:mfu_pred_item_t
arg_to_regex	src/dsh/dsh.c	/^static char* arg_to_regex(const char* arg)$/;"	f	file:
argparse	test/legacy/dtest/dtest	/^ 	import argparse$/;"	i
assignment	src/common/mfu_flist.h	/^    int assignment;      \/* set to 1 if operation is an assignment (e.g. g=u) *\/$/;"	m	struct:mfu_perms_t
assume_all	src/common/mfu_flist.h	/^    int assume_all;      \/* if this flag is set umask is taken into account *\/$/;"	m	struct:mfu_perms_t
atime	src/common/mfu_flist_internal.h	/^    uint64_t atime;         \/* access time *\/$/;"	m	struct:list_elem
atime_nsec	src/common/mfu_flist_internal.h	/^    uint64_t atime_nsec;    \/* access time nanoseconds *\/$/;"	m	struct:list_elem
attr_copy_t	src/common/mfu_param_path.h	/^} attr_copy_t;$/;"	t	typeref:enum:__anon27
attr_dims	src/common/mfu_daos.h	/^    hsize_t attr_dims[1];$/;"	m	struct:hdf5_args
attr_dspace	src/common/mfu_daos.h	/^    hid_t attr_dspace;$/;"	m	struct:hdf5_args
attr_dtype	src/common/mfu_daos.h	/^    hid_t attr_dtype;$/;"	m	struct:hdf5_args
attr_name	src/common/mfu_daos.h	/^    char* attr_name;$/;"	m	struct:__anon4
attr_val	src/common/mfu_daos.h	/^    hvl_t attr_val;$/;"	m	struct:__anon4
author	doc/rst/conf.py	/^author = u'HPC'$/;"	v
base	src/dcmp/dcmp.c	/^    int base;                      \/* whether to do base check *\/$/;"	m	struct:dcmp_options	file:
base64	test/legacy/dtest/dtest	/^import base64$/;"	i
basetest	test/tests/test_dcmp/test_dcmp.sh	/^basetest() {$/;"	f
batch_files	src/common/mfu_param_path.h	/^    uint64_t     batch_files;      \/* max batch size to copy files, 0 implies no limit *\/$/;"	m	struct:__anon28
bc_size	src/common/mfu_compress_bz2_libcircle.c	/^static int bc_size;$/;"	v	file:
bcast_req	src/common/mfu_progress.h	/^    MPI_Request bcast_req;  \/* request for outstanding bcast *\/$/;"	m	struct:__anon31
bin_name	test/legacy/dtest/dtest	/^	bin_name = ''$/;"	v	class:test
bin_path	test/legacy/dtest/dtest	/^	bin_path = ''$/;"	v	class:test
binaries	test/legacy/dtest/dtest	/^	binaries = ['dtar', 'dcp']$/;"	v	class:test
block_buf1	src/common/mfu_param_path.h	/^    char*        block_buf1;       \/* buffer to read \/ write data *\/$/;"	m	struct:__anon28
block_buf1	src/dcp1/common.h	/^    char*  block_buf1;$/;"	m	struct:__anon36
block_buf2	src/common/mfu_param_path.h	/^    char*        block_buf2;       \/* another buffer to read \/ write data *\/$/;"	m	struct:__anon28
block_buf2	src/dcp1/common.h	/^    char*  block_buf2;$/;"	m	struct:__anon36
block_info	src/common/mfu_compress_bz2_libcircle.c	/^struct block_info {$/;"	s	file:
block_meta	src/common/mfu_decompress_bz2_libcircle.c	/^static int64_t block_meta;$/;"	v	file:
block_size	src/common/mfu_compress_bz2_libcircle.c	/^static int64_t block_size;$/;"	v	file:
block_size	src/common/mfu_decompress_bz2_libcircle.c	/^static int64_t block_size;$/;"	v	file:
block_size	src/dcp1/common.h	/^    size_t block_size; \/* block size to read\/write to file system *\/$/;"	m	struct:__anon36
block_size	test/legacy/dtest/dtest	/^	block_size = '256M'$/;"	v	class:test
block_total	src/common/mfu_decompress_bz2_libcircle.c	/^static int64_t block_total;$/;"	v	file:
blocks_done	src/common/mfu_compress_bz2_libcircle.c	/^static int64_t blocks_done = 0;$/;"	v	file:
blocks_pn_pw	src/common/mfu_compress_bz2_libcircle.c	/^static int64_t blocks_pn_pw;$/;"	v	file:
blocks_processed	src/common/mfu_compress_bz2_libcircle.c	/^static int64_t blocks_processed = 0;$/;"	v	file:
buf	src/common/mfu_flist_internal.h	/^    void* buf;       \/* pointer to memory buffer holding data *\/$/;"	m	struct:__anon22
buf	src/dfilemaker/dfilemaker.c	/^char* buf;$/;"	v
buf_size	src/common/mfu_flist.h	/^    size_t  buf_size;$/;"	m	struct:__anon10
buf_size	src/common/mfu_param_path.h	/^    size_t       buf_size;         \/* buffer size to read\/write to file system *\/$/;"	m	struct:__anon28
buf_t	src/common/mfu_flist_internal.h	/^} buf_t;$/;"	t	typeref:struct:__anon22
bufsize	src/common/mfu_flist_internal.h	/^    size_t bufsize;  \/* number of bytes in buffer *\/$/;"	m	struct:__anon22
bufsize	src/dfilemaker/dfilemaker.c	/^size_t bufsize = 1024 * 1024;$/;"	v
buft_copy	src/common/mfu_flist_usrgrp.c	/^static void buft_copy(buf_t* src, buf_t* dst)$/;"	f	file:
buft_free	src/common/mfu_flist_usrgrp.c	/^static void buft_free(buf_t* items)$/;"	f	file:
buft_init	src/common/mfu_flist_usrgrp.c	/^static void buft_init(buf_t* items)$/;"	f	file:
buft_pack	src/common/mfu_flist_io.c	/^static void buft_pack(void* buf, const buf_t* items)$/;"	f	file:
buft_pack_size	src/common/mfu_flist_io.c	/^static size_t buft_pack_size(const buf_t* items)$/;"	f	file:
buft_unpack	src/common/mfu_flist_io.c	/^static void buft_unpack(const void* buf, buf_t* items)$/;"	f	file:
build_path	src/common/mfu_flist_walk.c	/^static int build_path(char* path, size_t path_len, const char* dir, const char* name)$/;"	f	file:
bytes_read	src/common/mfu_daos.h	/^    uint64_t bytes_read;    \/* sum of bytes read (src and dst) *\/$/;"	m	struct:mfu_daos_stats
bytes_written	src/common/mfu_daos.h	/^    uint64_t bytes_written; \/* sum of bytes written *\/$/;"	m	struct:mfu_daos_stats
call	test/tests/test_dcp1/test_all.py	/^from subprocess import call$/;"	i
call	test/tests/test_dcp1/test_many_dir_to_single_dir.py	/^from subprocess import call$/;"	i
call	test/tests/test_dcp1/test_many_dir_to_single_file.py	/^from subprocess import call$/;"	i
call	test/tests/test_dcp1/test_many_file_to_single_dir.py	/^from subprocess import call$/;"	i
call	test/tests/test_dcp1/test_many_file_to_single_file.py	/^from subprocess import call$/;"	i
call	test/tests/test_dcp1/test_single_dir_to_single_dir.py	/^from subprocess import call$/;"	i
call	test/tests/test_dcp1/test_single_dir_to_single_file.py	/^from subprocess import call$/;"	i
call	test/tests/test_dcp1/test_single_file_to_single_dir.py	/^from subprocess import call$/;"	i
call	test/tests/test_dcp1/test_single_file_to_single_file.py	/^from subprocess import call$/;"	i
capchown	src/common/mfu_flist.h	/^    bool capchown;  \/* whether process has CAP_CHOWN capability *\/$/;"	m	struct:__anon9
capfowner	src/common/mfu_flist.h	/^    bool capfowner; \/* whether process has CAP_FOWNER capability *\/$/;"	m	struct:__anon9
capital_execute	src/common/mfu_flist.h	/^    int capital_execute; \/* set to 1 if 'X' is given *\/$/;"	m	struct:mfu_perms_t
chars	src/common/mfu_flist_internal.h	/^    uint64_t chars;  \/* max name of item *\/$/;"	m	struct:__anon22
chars	src/common/mfu_path.h	/^  size_t chars;          \/* number of chars in path *\/$/;"	m	struct:__anon29
chars	src/common/mfu_path.h	/^  size_t chars;    \/* number of chars in component *\/$/;"	m	struct:mfu_path_elem_struct
check_fiemap	test/tests/test_dcp/checkfiemap.c	/^static int check_fiemap(int fd, long long orig_size) {$/;"	f	file:
check_time	src/common/mfu_pred.c	/^static int check_time (uint64_t secs, uint64_t nsecs, uint64_t units, void* arg)$/;"	f	file:
chmod_count	src/common/mfu_flist_chmod.c	/^uint64_t chmod_count;$/;"	v
chmod_count_total	src/common/mfu_flist_chmod.c	/^uint64_t chmod_count_total;$/;"	v
chmod_list	src/common/mfu_flist_chmod.c	/^static int chmod_list($/;"	f	file:
chmod_prog	src/common/mfu_flist_chmod.c	/^mfu_progress* chmod_prog;$/;"	v
chmod_progress_fn	src/common/mfu_flist_chmod.c	/^static void chmod_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
chmod_stat	src/common/mfu_flist_chmod.c	/^} chmod_stat;$/;"	v	typeref:enum:__anon19	file:
chunk	src/dcp1/common.h	/^    int64_t chunk;$/;"	m	struct:__anon34
chunk_index	src/common/mfu_flist_archive.c	/^    uint64_t chunk_index;       \/* chunk id of this work item, chunks are fixed size *\/$/;"	m	struct:__anon12	file:
chunk_size	src/common/mfu_flist.h	/^    size_t  chunk_size;$/;"	m	struct:__anon10
chunk_size	src/common/mfu_param_path.h	/^    size_t       chunk_size;       \/* size to chunk files by *\/$/;"	m	struct:__anon28
chunk_size	src/dcp1/common.h	/^    size_t chunk_size; \/* size to chunk files by *\/$/;"	m	struct:__anon36
circle_count	src/common/mfu_flist_remove.c	/^static uint64_t circle_count;   \/* number of items local process has removed *\/$/;"	v	file:
circle_list	src/common/mfu_flist_remove.c	/^static mfu_flist circle_list; \/* list of items we're deleting *\/$/;"	v	file:
circle_mfu_file	src/common/mfu_flist_remove.c	/^static mfu_file_t* circle_mfu_file; \/* mfu_file for I\/O functions *\/$/;"	v	file:
clean	test/legacy/dtest/dtest	/^	def clean(self):$/;"	m	class:test
cleanup_dir	test/tests/test_dcmp/test_dcmp.sh	/^cleanup_dir()$/;"	f
code	src/common/mfu_flist_archive.c	/^    DTAR_operation_code_t code; \/* for now, just copy operation *\/$/;"	m	struct:__anon12	file:
code	src/dcp1/common.h	/^    DCOPY_operation_code_t code;$/;"	m	struct:__anon34
comm	src/common/mfu_progress.h	/^    MPI_Comm comm;          \/* dup'ed communicator to execute bcast\/reduce *\/$/;"	m	struct:__anon31
comm_split_str	src/dbcast/dbcast.c	/^static void comm_split_str(MPI_Comm comm, const char* str, MPI_Comm* newcomm)$/;"	f	file:
comp_buff_size	src/common/mfu_compress_bz2_libcircle.c	/^static int64_t comp_buff_size;$/;"	v	file:
compare	src/dcp1/common.h	/^    bool   compare;$/;"	m	struct:__anon36
compare_progress_fn	src/dcmp/dcmp.c	/^static void compare_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
compare_progress_fn	src/dsync/dsync.c	/^static void compare_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
compare_total_count	src/dcmp/dcmp.c	/^static uint64_t compare_total_count;$/;"	v	file:
compare_xattr_lists	test/tests/test_dsync/test_xattr.sh	/^function compare_xattr_lists()$/;"	f
component	src/common/mfu_path.h	/^  char* component; \/* pointer to strdup'd component string *\/$/;"	m	struct:mfu_path_elem_struct
components	src/common/mfu_path.h	/^  int components;        \/* number of components in path *\/$/;"	m	struct:__anon29
compute_depth	src/dcp1/treewalk.c	/^static int compute_depth(const char* path)$/;"	f	file:
compute_entry_sizes	src/common/mfu_flist_archive.c	/^static int compute_entry_sizes($/;"	f	file:
compute_offset_size	src/dbcast/dbcast.c	/^void compute_offset_size($/;"	f
conjunctions	src/dcmp/dcmp.c	/^    struct list_head conjunctions; \/* list of logical conjunction *\/$/;"	m	struct:dcmp_disjunction	typeref:struct:dcmp_disjunction::list_head	file:
conjunctions	src/dsync/dsync.c	/^    struct list_head conjunctions; \/* list of logical conjunction *\/$/;"	m	struct:dsync_disjunction	typeref:struct:dsync_disjunction::list_head	file:
cont_attr	src/common/mfu_daos.h	/^    hid_t cont_attr;$/;"	m	struct:hdf5_args
cont_deserialize_akeys	src/common/mfu_daos.c	/^static int cont_deserialize_akeys(struct hdf5_args *hdf5,$/;"	f	file:
cont_deserialize_all_props	src/common/mfu_daos.c	/^int cont_deserialize_all_props(struct hdf5_args *hdf5, $/;"	f
cont_deserialize_keys	src/common/mfu_daos.c	/^static int cont_deserialize_keys(struct hdf5_args *hdf5,$/;"	f	file:
cont_deserialize_prop_acl	src/common/mfu_daos.c	/^static int cont_deserialize_prop_acl(struct hdf5_args* hdf5,$/;"	f	file:
cont_deserialize_prop_roots	src/common/mfu_daos.c	/^static int cont_deserialize_prop_roots(struct hdf5_args* hdf5,$/;"	f	file:
cont_deserialize_prop_str	src/common/mfu_daos.c	/^static int cont_deserialize_prop_str(struct hdf5_args* hdf5,$/;"	f	file:
cont_deserialize_prop_uint	src/common/mfu_daos.c	/^static int cont_deserialize_prop_uint(struct hdf5_args* hdf5,$/;"	f	file:
cont_deserialize_recx	src/common/mfu_daos.c	/^static int cont_deserialize_recx(struct hdf5_args *hdf5,$/;"	f	file:
cont_deserialize_usr_attrs	src/common/mfu_daos.c	/^int cont_deserialize_usr_attrs(struct hdf5_args* hdf5,$/;"	f
cont_free_usr_attrs	src/common/mfu_daos.c	/^static void cont_free_usr_attrs(int n, char*** _names, void*** _buffers,$/;"	f	file:
cont_get_props	src/common/mfu_daos.c	/^static int cont_get_props(daos_handle_t coh, daos_prop_t** _props,$/;"	f	file:
cont_get_usr_attrs	src/common/mfu_daos.c	/^static int cont_get_usr_attrs(daos_handle_t coh,$/;"	f	file:
cont_serialize_prop_acl	src/common/mfu_daos.c	/^static int cont_serialize_prop_acl(struct hdf5_args* hdf5,$/;"	f	file:
cont_serialize_prop_roots	src/common/mfu_daos.c	/^static int cont_serialize_prop_roots(struct hdf5_args* hdf5,$/;"	f	file:
cont_serialize_prop_str	src/common/mfu_daos.c	/^static int cont_serialize_prop_str(struct hdf5_args* hdf5,$/;"	f	file:
cont_serialize_prop_uint	src/common/mfu_daos.c	/^static int cont_serialize_prop_uint(struct hdf5_args *hdf5,$/;"	f	file:
cont_serialize_props	src/common/mfu_daos.c	/^int cont_serialize_props(struct hdf5_args *hdf5,$/;"	f
cont_serialize_usr_attrs	src/common/mfu_daos.c	/^int cont_serialize_usr_attrs(struct hdf5_args *hdf5, daos_handle_t cont)$/;"	f
cont_serialize_version	src/common/mfu_daos.c	/^static int cont_serialize_version(struct hdf5_args *hdf5, float version)$/;"	f	file:
contents	src/dsync/dsync.c	/^    int contents;                  \/* check file contents rather than size and mtime *\/$/;"	m	struct:dsync_options	file:
convert_units	test/legacy/dtest/dtest	/^	def convert_units(self, size):$/;"	m	class:test
copy_count	src/common/mfu_flist_copy.c	/^static uint64_t copy_count;$/;"	v	file:
copy_data	src/common/mfu_flist_archive.c	/^static int copy_data(struct archive* ar, struct archive* aw)$/;"	f	file:
copy_into_dir	src/common/mfu_param_path.h	/^    int          copy_into_dir;    \/* flag indicating whether copying into existing dir *\/$/;"	m	struct:__anon28
copy_into_dir	src/dcp1/common.h	/^    int    copy_into_dir;$/;"	m	struct:__anon36
copy_prog	src/common/mfu_flist_copy.c	/^static mfu_progress* copy_prog;$/;"	v	file:
copy_progress_fn	src/common/mfu_flist_copy.c	/^static void copy_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
copy_total_count	src/common/mfu_flist_copy.c	/^static uint64_t copy_total_count;$/;"	v	file:
copy_usr_attrs	src/common/mfu_daos.c	/^static int copy_usr_attrs(daos_handle_t src_coh, daos_handle_t dst_coh)$/;"	f	file:
copy_xattrs	src/common/mfu_param_path.h	/^    attr_copy_t  copy_xattrs;      \/* which xattrs to copy; important for Lustre *\/$/;"	m	struct:__anon28
copyright	doc/rst/conf.py	/^copyright = u'2022, LLNL\/LANL\/UT-Battelle\/DDN'$/;"	v
count	src/common/mfu_flist_internal.h	/^    uint64_t count;  \/* number of items *\/$/;"	m	struct:__anon22
count	src/common/mfu_progress.h	/^    int count;              \/* number of items in values arrays *\/$/;"	m	struct:__anon31
count	src/dcmp/dcmp.c	/^    unsigned count;                \/* logical conjunctions count *\/$/;"	m	struct:dcmp_disjunction	file:
count	src/dsync/dsync.c	/^    unsigned count;		   \/* logical conjunctions count *\/$/;"	m	struct:dsync_disjunction	file:
count_files	src/daos-deserialize/daos-deserialize.c	/^static int count_files(char **argpaths, char ***paths, int *numpaths) {$/;"	f	file:
create_default_separators	src/dwalk/dwalk.c	/^static void create_default_separators(struct distribute_option *option,$/;"	f	file:
create_directory	src/common/mfu_flist_create.c	/^static int create_directory(mfu_flist list, uint64_t idx)$/;"	f	file:
create_file	src/common/mfu_flist_create.c	/^static int create_file(mfu_flist list, uint64_t idx, mfu_create_opts_t* opts)$/;"	f	file:
create_libcircle	src/common/mfu_flist.h	/^    int     create_libcircle;$/;"	m	struct:__anon10
create_prog	src/dstripe/dstripe.c	/^mfu_progress* create_prog;$/;"	v
create_prog_count	src/dstripe/dstripe.c	/^uint64_t create_prog_count;$/;"	v
create_prog_count_total	src/dstripe/dstripe.c	/^uint64_t create_prog_count_total;$/;"	v
create_progress_fn	src/common/mfu_flist_archive.c	/^static void create_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
create_progress_fn	src/common/mfu_flist_copy.c	/^static void create_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
create_progress_fn	src/dstripe/dstripe.c	/^static void create_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
create_stattype	src/common/mfu_flist_io.c	/^static void create_stattype(int detail, int chars, MPI_Datatype* dt_stat)$/;"	f	file:
create_targets	src/dfilemaker/dfilemaker.c	/^static void create_targets(int nlevels, int linktot, int* nfiles, uint64_t* targIDs, char** tnames, char** tarray)$/;"	f	file:
ctime	src/common/mfu_flist_internal.h	/^    uint64_t ctime;         \/* create time *\/$/;"	m	struct:list_elem
ctime_nsec	src/common/mfu_flist_internal.h	/^    uint64_t ctime_nsec;    \/* create time nanoseconds *\/$/;"	m	struct:list_elem
ctx	src/ddup/ddup.c	/^    SHA256_CTX ctx;$/;"	m	struct:file_item	file:
cwd	test/legacy/dtest/dtest	/^	cwd = ''$/;"	v	class:test
d_ino	src/common/mfu_flist_walk.c	/^    long           d_ino;$/;"	m	struct:linux_dirent	file:
d_name	src/common/mfu_flist_walk.c	/^    char           d_name[];$/;"	m	struct:linux_dirent	file:
d_off	src/common/mfu_flist_walk.c	/^    off_t          d_off;$/;"	m	struct:linux_dirent	file:
d_reclen	src/common/mfu_flist_walk.c	/^    unsigned short d_reclen;$/;"	m	struct:linux_dirent	file:
daos_access	src/common/mfu_io.c	/^int daos_access(const char* path, int amode, mfu_file_t* mfu_file)$/;"	f
daos_any_error	src/common/mfu_daos.c	/^static int daos_any_error(int rank, bool local_daos_error, int flag_daos_args)$/;"	f	file:
daos_api_t	src/common/mfu_daos.h	/^} daos_api_t;$/;"	t	typeref:enum:__anon1
daos_args_delete	src/common/mfu_daos.c	/^void daos_args_delete(daos_args_t** pda)$/;"	f
daos_args_new	src/common/mfu_daos.c	/^daos_args_t* daos_args_new(void)$/;"	f
daos_args_t	src/common/mfu_daos.h	/^} daos_args_t;$/;"	t	typeref:struct:__anon2
daos_bcast_handle	src/common/mfu_daos.c	/^void daos_bcast_handle($/;"	f
daos_check_args	src/common/mfu_daos.c	/^static int daos_check_args($/;"	f	file:
daos_check_cont_status	src/common/mfu_daos.c	/^static int daos_check_cont_status(daos_handle_t coh, bool *status_healthy)$/;"	f	file:
daos_check_prefix	src/common/mfu_daos.c	/^static bool daos_check_prefix($/;"	f	file:
daos_chmod	src/common/mfu_io.c	/^int daos_chmod(const char *path, mode_t mode, mfu_file_t* mfu_file)$/;"	f
daos_cleanup	src/common/mfu_daos.c	/^int daos_cleanup($/;"	f
daos_close	src/common/mfu_io.c	/^int daos_close(const char* file, mfu_file_t* mfu_file)$/;"	f
daos_closedir	src/common/mfu_io.c	/^int daos_closedir(DIR* dirp, mfu_file_t* mfu_file)$/;"	f
daos_connect	src/common/mfu_daos.c	/^int daos_connect($/;"	f
daos_cont_deserialize_connect	src/common/mfu_daos.c	/^int daos_cont_deserialize_connect(daos_args_t *daos_args,$/;"	f
daos_cont_deserialize_hdlr	src/common/mfu_daos.c	/^int daos_cont_deserialize_hdlr(int rank, daos_args_t *da, const char *h5filename,$/;"	f
daos_cont_serialize_files_generated	src/common/mfu_daos.c	/^int daos_cont_serialize_files_generated(struct hdf5_args *hdf5,$/;"	f
daos_cont_serialize_hdlr	src/common/mfu_daos.c	/^int daos_cont_serialize_hdlr(int rank, struct hdf5_args *hdf5, char *output_dir,$/;"	f
daos_faccessat	src/common/mfu_io.c	/^int daos_faccessat(int dirfd, const char* path, int amode, int flags, mfu_file_t* mfu_file)$/;"	f
daos_ftruncate	src/common/mfu_io.c	/^int daos_ftruncate(mfu_file_t* mfu_file, off_t length)$/;"	f
daos_get_cont_type	src/common/mfu_daos.c	/^static int daos_get_cont_type($/;"	f	file:
daos_getxattr	src/common/mfu_io.c	/^ssize_t daos_getxattr(const char* path, const char* name, void* value, size_t size, mfu_file_t* mfu_file)$/;"	f
daos_lchown	src/common/mfu_io.c	/^int daos_lchown(const char* path, uid_t owner, gid_t group, mfu_file_t* mfu_file)$/;"	f
daos_lgetxattr	src/common/mfu_io.c	/^ssize_t daos_lgetxattr(const char* path, const char* name, void* value, size_t size, mfu_file_t* mfu_file)$/;"	f
daos_listxattr	src/common/mfu_io.c	/^ssize_t daos_listxattr(const char* path, char* list, size_t size, mfu_file_t* mfu_file)$/;"	f
daos_llistxattr	src/common/mfu_io.c	/^ssize_t daos_llistxattr(const char* path, char* list, size_t size, mfu_file_t* mfu_file)$/;"	f
daos_lseek	src/common/mfu_io.c	/^int daos_lseek(const char* file, mfu_file_t* mfu_file, off_t pos, int whence)$/;"	f
daos_lsetxattr	src/common/mfu_io.c	/^int daos_lsetxattr(const char* path, const char* name, const void* value, size_t size, int flags,$/;"	f
daos_lstat	src/common/mfu_io.c	/^int daos_lstat(const char* path, struct stat* buf, mfu_file_t* mfu_file)$/;"	f
daos_mkdir	src/common/mfu_io.c	/^int daos_mkdir(const char* dir, mode_t mode, mfu_file_t* mfu_file)$/;"	f
daos_mknod	src/common/mfu_io.c	/^int daos_mknod(const char* path, mode_t mode, mfu_file_t* mfu_file)$/;"	f
daos_open	src/common/mfu_io.c	/^int daos_open(const char* file, int flags, mode_t mode, mfu_file_t* mfu_file)$/;"	f
daos_opendir	src/common/mfu_io.c	/^DIR* daos_opendir(const char* dir, mfu_file_t* mfu_file)$/;"	f
daos_parse_api_str	src/common/mfu_daos.c	/^int daos_parse_api_str($/;"	f
daos_parse_epc_str	src/common/mfu_daos.c	/^int daos_parse_epc_str($/;"	f
daos_parse_path	src/common/mfu_daos.c	/^int daos_parse_path($/;"	f
daos_pread	src/common/mfu_io.c	/^ssize_t daos_pread(const char* file, void* buf, size_t size, off_t offset, mfu_file_t* mfu_file)$/;"	f
daos_preserve	src/common/mfu_daos.h	/^    bool daos_preserve;                 \/* preserve daos cont props and user attrs *\/$/;"	m	struct:__anon2
daos_preserve_path	src/common/mfu_daos.h	/^    char *daos_preserve_path;           \/* set path to write daos props and user attrs *\/$/;"	m	struct:__anon2
daos_pwrite	src/common/mfu_io.c	/^ssize_t daos_pwrite(const char* file, const void* buf, size_t size, off_t offset, mfu_file_t* mfu_file)$/;"	f
daos_read	src/common/mfu_io.c	/^ssize_t daos_read(const char* file, void* buf, size_t size, mfu_file_t* mfu_file)$/;"	f
daos_readdir	src/common/mfu_io.c	/^struct dirent* daos_readdir(DIR* dirp, mfu_file_t* mfu_file)$/;"	f
daos_readlink	src/common/mfu_io.c	/^ssize_t daos_readlink(const char* path, char* buf, size_t bufsize, mfu_file_t* mfu_file)$/;"	f
daos_realpath	src/common/mfu_io.c	/^char* daos_realpath(const char* path, char* resolved_path, mfu_file_t* mfu_file)$/;"	f
daos_remove	src/common/mfu_io.c	/^int daos_remove(const char* path, mfu_file_t* mfu_file)$/;"	f
daos_rmdir	src/common/mfu_io.c	/^int daos_rmdir(const char* dir, mfu_file_t* mfu_file)$/;"	f
daos_set_api_compat	src/common/mfu_daos.c	/^static int daos_set_api_compat($/;"	f	file:
daos_set_api_cont_type	src/common/mfu_daos.c	/^static int daos_set_api_cont_type($/;"	f	file:
daos_set_paths	src/common/mfu_daos.c	/^static int daos_set_paths($/;"	f	file:
daos_setup	src/common/mfu_daos.c	/^int daos_setup($/;"	f
daos_stat	src/common/mfu_io.c	/^int daos_stat(const char* path, struct stat* buf, mfu_file_t* mfu_file)$/;"	f
daos_symlink	src/common/mfu_io.c	/^int daos_symlink(const char* oldpath, const char* newpath, mfu_file_t* mfu_file)$/;"	f
daos_truncate	src/common/mfu_io.c	/^int daos_truncate(const char* file, off_t length, mfu_file_t* mfu_file)$/;"	f
daos_unlink	src/common/mfu_io.c	/^int daos_unlink(const char* file, mfu_file_t* mfu_file)$/;"	f
daos_utimensat	src/common/mfu_io.c	/^int daos_utimensat(int dirfd, const char* pathname, const struct timespec times[2], int flags,$/;"	f
daos_uuid_valid	src/common/mfu_daos.c	/^bool daos_uuid_valid(const uuid_t uuid)$/;"	f
daos_write	src/common/mfu_io.c	/^ssize_t daos_write(const char* file, const void* buf, size_t size, mfu_file_t* mfu_file)$/;"	f
data_string	test/legacy/dtest/dtest	/^	data_string = ''$/;"	v	class:test
datarep_ext32	src/common/mfu_flist_io.c	/^static char datarep_ext32[]  = "external32";$/;"	v	file:
datarep_native	src/common/mfu_flist_io.c	/^static char datarep_native[] = "native";$/;"	v	file:
dbprintf	src/dfind/common.h	15;"	d
dbprintf	src/dfind/common.h	17;"	d
dchmod_path	test/tests/test_dchmod/test_octal.py	/^dchmod_path = "~\/mpifileutils\/install\/bin\/dchmod" $/;"	v
dcmp_compare_acl	src/dcmp/dcmp.c	/^static void dcmp_compare_acl($/;"	f	file:
dcmp_compare_metadata	src/dcmp/dcmp.c	/^static int dcmp_compare_metadata($/;"	f	file:
dcmp_conjunction	src/dcmp/dcmp.c	/^struct dcmp_conjunction {$/;"	s	file:
dcmp_conjunction_add_expression	src/dcmp/dcmp.c	/^static void dcmp_conjunction_add_expression($/;"	f	file:
dcmp_conjunction_alloc	src/dcmp/dcmp.c	/^static struct dcmp_conjunction* dcmp_conjunction_alloc(void)$/;"	f	file:
dcmp_conjunction_free	src/dcmp/dcmp.c	/^static void dcmp_conjunction_free(struct dcmp_conjunction *conjunction)$/;"	f	file:
dcmp_conjunction_match	src/dcmp/dcmp.c	/^static int dcmp_conjunction_match($/;"	f	file:
dcmp_conjunction_parse	src/dcmp/dcmp.c	/^static int dcmp_conjunction_parse($/;"	f	file:
dcmp_conjunction_print	src/dcmp/dcmp.c	/^static void dcmp_conjunction_print($/;"	f	file:
dcmp_default_outputs	src/dcmp/dcmp.c	/^const char *dcmp_default_outputs[] = {$/;"	v
dcmp_disjunction	src/dcmp/dcmp.c	/^struct dcmp_disjunction {$/;"	s	file:
dcmp_disjunction_add_conjunction	src/dcmp/dcmp.c	/^static void dcmp_disjunction_add_conjunction($/;"	f	file:
dcmp_disjunction_alloc	src/dcmp/dcmp.c	/^static struct dcmp_disjunction* dcmp_disjunction_alloc(void)$/;"	f	file:
dcmp_disjunction_free	src/dcmp/dcmp.c	/^static void dcmp_disjunction_free(struct dcmp_disjunction* disjunction)$/;"	f	file:
dcmp_disjunction_match	src/dcmp/dcmp.c	/^static int dcmp_disjunction_match($/;"	f	file:
dcmp_disjunction_parse	src/dcmp/dcmp.c	/^static int dcmp_disjunction_parse($/;"	f	file:
dcmp_disjunction_print	src/dcmp/dcmp.c	/^static void dcmp_disjunction_print($/;"	f	file:
dcmp_expression	src/dcmp/dcmp.c	/^struct dcmp_expression {$/;"	s	file:
dcmp_expression_alloc	src/dcmp/dcmp.c	/^static struct dcmp_expression* dcmp_expression_alloc(void)$/;"	f	file:
dcmp_expression_free	src/dcmp/dcmp.c	/^static void dcmp_expression_free(struct dcmp_expression *expression)$/;"	f	file:
dcmp_expression_match	src/dcmp/dcmp.c	/^static int dcmp_expression_match($/;"	f	file:
dcmp_expression_parse	src/dcmp/dcmp.c	/^static int dcmp_expression_parse($/;"	f	file:
dcmp_expression_print	src/dcmp/dcmp.c	/^static void dcmp_expression_print($/;"	f	file:
dcmp_field	src/dcmp/dcmp.c	/^} dcmp_field;$/;"	t	typeref:enum:_dcmp_field	file:
dcmp_field_depend	src/dcmp/dcmp.c	/^uint64_t dcmp_field_depend[] = {$/;"	v
dcmp_field_from_string	src/dcmp/dcmp.c	/^static int dcmp_field_from_string(const char* string, dcmp_field *field)$/;"	f	file:
dcmp_field_to_string	src/dcmp/dcmp.c	/^static const char* dcmp_field_to_string(dcmp_field field, int simple)$/;"	f	file:
dcmp_map_fn	src/dcmp/dcmp.c	/^static int dcmp_map_fn($/;"	f	file:
dcmp_option_add_comparison	src/dcmp/dcmp.c	/^static void dcmp_option_add_comparison(dcmp_field field)$/;"	f	file:
dcmp_option_add_output	src/dcmp/dcmp.c	/^static void dcmp_option_add_output(struct dcmp_output *output, int add_at_head)$/;"	f	file:
dcmp_option_fini	src/dcmp/dcmp.c	/^static void dcmp_option_fini(void)$/;"	f	file:
dcmp_option_need_compare	src/dcmp/dcmp.c	/^static int dcmp_option_need_compare(dcmp_field field)$/;"	f	file:
dcmp_option_output_parse	src/dcmp/dcmp.c	/^static int dcmp_option_output_parse(const char *option, int add_at_head)$/;"	f	file:
dcmp_options	src/dcmp/dcmp.c	/^struct dcmp_options {$/;"	s	file:
dcmp_output	src/dcmp/dcmp.c	/^struct dcmp_output {$/;"	s	file:
dcmp_output_alloc	src/dcmp/dcmp.c	/^static struct dcmp_output* dcmp_output_alloc(void)$/;"	f	file:
dcmp_output_flist_match	src/dcmp/dcmp.c	/^static int dcmp_output_flist_match($/;"	f	file:
dcmp_output_free	src/dcmp/dcmp.c	/^static void dcmp_output_free(struct dcmp_output* output)$/;"	f	file:
dcmp_output_init_disjunction	src/dcmp/dcmp.c	/^static void dcmp_output_init_disjunction($/;"	f	file:
dcmp_output_write	src/dcmp/dcmp.c	/^static int dcmp_output_write($/;"	f	file:
dcmp_outputs_write	src/dcmp/dcmp.c	/^static int dcmp_outputs_write($/;"	f	file:
dcmp_state	src/dcmp/dcmp.c	/^} dcmp_state;$/;"	t	typeref:enum:_dcmp_state	file:
dcmp_state_from_string	src/dcmp/dcmp.c	/^static int dcmp_state_from_string(const char* string, dcmp_state *state)$/;"	f	file:
dcmp_state_to_string	src/dcmp/dcmp.c	/^static const char* dcmp_state_to_string(dcmp_state state, int simple)$/;"	f	file:
dcmp_strmap_check	src/dcmp/dcmp.c	/^static void dcmp_strmap_check($/;"	f	file:
dcmp_strmap_check_dst	src/dcmp/dcmp.c	/^static void dcmp_strmap_check_dst(strmap* src_map,$/;"	f	file:
dcmp_strmap_check_src	src/dcmp/dcmp.c	/^static void dcmp_strmap_check_src(strmap* src_map,$/;"	f	file:
dcmp_strmap_compare	src/dcmp/dcmp.c	/^static int dcmp_strmap_compare($/;"	f	file:
dcmp_strmap_compare_data	src/dcmp/dcmp.c	/^static int dcmp_strmap_compare_data($/;"	f	file:
dcmp_strmap_creat	src/dcmp/dcmp.c	/^static strmap* dcmp_strmap_creat(mfu_flist list, const char* prefix)$/;"	f	file:
dcmp_strmap_item_index	src/dcmp/dcmp.c	/^static int dcmp_strmap_item_index($/;"	f	file:
dcmp_strmap_item_init	src/dcmp/dcmp.c	/^static void dcmp_strmap_item_init($/;"	f	file:
dcmp_strmap_item_state	src/dcmp/dcmp.c	/^static int dcmp_strmap_item_state($/;"	f	file:
dcmp_strmap_item_update	src/dcmp/dcmp.c	/^static void dcmp_strmap_item_update($/;"	f	file:
dcmp_tmp_file	test/tests/test_dcp/test_fiemap.py	/^dcmp_tmp_file  = "file_test_fiemap_XXX"$/;"	v
dcp_cmp_bin	test/tests/test_dcp/test_fiemap.py	/^dcp_cmp_bin    = "diff"$/;"	v
dcp_dest_dir	test/tests/test_dcp/test_fiemap.py	/^dcp_dest_dir   = "\/mnt\/lustre2"$/;"	v
dcp_mpirun_bin	test/tests/test_dcp/test_fiemap.py	/^dcp_mpirun_bin = "mpirun"$/;"	v
dcp_src_dir	test/tests/test_dcp/test_fiemap.py	/^dcp_src_dir    = "\/mnt\/lustre"$/;"	v
dcp_test_bin	test/tests/test_dcp/test_fiemap.py	/^dcp_test_bin   = "\/root\/mpifileutils\/install\/bin\/dcp"$/;"	v
debug	src/dcmp/dcmp.c	/^    int debug;                     \/* check result after get result *\/$/;"	m	struct:dcmp_options	file:
debug	src/dsync/dsync.c	/^    int debug;                     \/* check result after get result *\/$/;"	m	struct:dsync_options	file:
decode_addr	src/dsh/dsh.c	/^static uint64_t* decode_addr(const char* str)$/;"	f	file:
delete	src/dsync/dsync.c	/^    int delete;                    \/* delete extraneous files from destination dirs *\/$/;"	m	struct:dsync_options	file:
delete	test/legacy/dtest/moab.py	/^	def delete(self):$/;"	m	class:job
delete	test/legacy/dtest/moab.py	/^def delete(id):$/;"	f
depth	src/common/mfu_flist_internal.h	/^    int depth;              \/* depth within directory tree *\/$/;"	m	struct:list_elem
depth	src/dcp1/common.h	/^  int depth;$/;"	m	struct:list_elem
dereference	src/common/mfu_param_path.h	/^    int          dereference;      \/* if true, dereference symbolic links in the source.$/;"	m	struct:__anon28
dereference	src/common/mfu_param_path.h	/^    int dereference;    \/* flag option to dereference symbolic links *\/$/;"	m	struct:__anon26
dest_base_appendix	src/dcp1/common.h	/^    char* dest_base_appendix;$/;"	m	struct:__anon34
dest_dir	test/legacy/dtest/dtest	/^	dest_dir = ''$/;"	v	class:test
dest_full_path	src/dcp1/common.h	/^    char* dest_full_path;$/;"	m	struct:__anon34
dest_param	src/dcp1/handle_args.c	/^static mfu_param_path  dest_param;$/;"	v	file:
dest_path	src/common/mfu_flist.h	/^    char*   dest_path;$/;"	m	struct:__anon10
dest_path	src/common/mfu_param_path.h	/^    char*        dest_path;        \/* prefex of destination directory *\/$/;"	m	struct:__anon28
dest_path	src/dcp1/common.h	/^    char*  dest_path;$/;"	m	struct:__anon36
detail	src/common/mfu_flist_internal.h	/^    int detail;              \/* set to 1 if we have stat, 0 if just file name *\/$/;"	m	struct:flist
detail	src/common/mfu_flist_internal.h	/^    int detail;             \/* flag to indicate whether we have stat data *\/$/;"	m	struct:list_elem
dfs	src/common/mfu_param_path.h	/^    dfs_t*               dfs;     \/* handle for lower-level file operations *\/$/;"	m	struct:__anon24
dfs_prefix	src/common/mfu_daos.h	/^    char* dfs_prefix;       \/* prefix for UNS *\/$/;"	m	struct:__anon2
dfs_sys	src/common/mfu_param_path.h	/^    dfs_sys_t*           dfs_sys; \/* handle for high-level file operations *\/$/;"	m	struct:__anon24
dir_chance	test/legacy/dtest/dtest	/^	dir_chance = 0.2$/;"	v	class:test
dir_perms	src/common/mfu_param_path.h	/^    int dir_perms;      \/* flag option to update dir perms during walk *\/$/;"	m	struct:__anon26
dir_size	test/legacy/dtest/dtest	/^	dir_size = 0$/;"	v	class:test
direct	src/common/mfu_param_path.h	/^    bool         direct;           \/* whether to use O_DIRECT *\/$/;"	m	struct:__anon28
direction	src/common/mfu_pred.h	/^    int direction;      \/* -1 (less than), 0 (equal), 1 (greater than) *\/$/;"	m	struct:mfu_pred_times_rel_t
disjunction	src/dcmp/dcmp.c	/^    struct dcmp_disjunction *disjunction; \/* logical disjunction rules *\/$/;"	m	struct:dcmp_output	typeref:struct:dcmp_output::dcmp_disjunction	file:
disjunction	src/dsync/dsync.c	/^    struct dsync_disjunction *disjunction; \/* logical disjunction rules *\/$/;"	m	struct:dsync_output	typeref:struct:dsync_output::dsync_disjunction	file:
distribute_option	src/dwalk/dwalk.c	/^struct distribute_option {$/;"	s	file:
distribute_separator_add	src/dwalk/dwalk.c	/^static int distribute_separator_add(struct distribute_option *option, uint64_t separator)$/;"	f	file:
distribution_parse	src/dwalk/dwalk.c	/^static int distribution_parse(struct distribute_option *option, const char *string)$/;"	f	file:
dk	src/common/mfu_daos.h	/^    dkey_t **dk;$/;"	m	struct:hdf5_args
dkey_data	src/common/mfu_daos.h	/^    dkey_t *dkey_data;$/;"	m	struct:hdf5_args
dkey_dims	src/common/mfu_daos.h	/^    hsize_t dkey_dims[1];     $/;"	m	struct:hdf5_args
dkey_dset	src/common/mfu_daos.h	/^    hid_t dkey_dset;$/;"	m	struct:hdf5_args
dkey_dspace	src/common/mfu_daos.h	/^    hid_t dkey_dspace;$/;"	m	struct:hdf5_args
dkey_memtype	src/common/mfu_daos.h	/^    hid_t dkey_memtype;$/;"	m	struct:hdf5_args
dkey_offset	src/common/mfu_daos.h	/^	uint64_t dkey_offset;$/;"	m	struct:__anon5
dkey_t	src/common/mfu_daos.h	/^} dkey_t;$/;"	t	typeref:struct:__anon6
dkey_val	src/common/mfu_daos.h	/^	hvl_t dkey_val;$/;"	m	struct:__anon6
dkey_vtype	src/common/mfu_daos.h	/^    hid_t dkey_vtype;$/;"	m	struct:hdf5_args
dnamcomp	src/dfilemaker/dfilemaker.c	/^int dnamcomp(const void* a, const void* b)$/;"	f
dnamsort	src/dfilemaker/dfilemaker.c	/^void dnamsort(char** buff, int nitems)$/;"	f
do_archive	test/legacy/dtest/dtest	/^	def do_archive(self):$/;"	m	class:test
do_sync	src/common/mfu_param_path.h	/^    int          do_sync;          \/* flag option to sync src dir with dest dir *\/$/;"	m	struct:__anon28
dry_run	src/dsync/dsync.c	/^    int dry_run;                   \/* dry run *\/$/;"	m	struct:dsync_options	file:
dst_coh	src/common/mfu_daos.h	/^    daos_handle_t dst_coh;  \/* destination container handle *\/$/;"	m	struct:__anon2
dst_cont	src/common/mfu_daos.h	/^    char dst_cont[DAOS_PROP_LABEL_MAX_LEN + 1];$/;"	m	struct:__anon2
dst_cont_type	src/common/mfu_daos.h	/^    enum daos_cont_props dst_cont_type; \/* type of the destination container *\/$/;"	m	struct:__anon2	typeref:enum:__anon2::daos_cont_props
dst_cont_uuid	src/common/mfu_daos.h	/^    uuid_t dst_cont_uuid;   \/* destination container UUID *\/$/;"	m	struct:__anon2
dst_epc	src/common/mfu_daos.h	/^    daos_epoch_t dst_epc;   \/* dst container epoch *\/$/;"	m	struct:__anon2
dst_matched_list	src/dcmp/dcmp.c	/^    mfu_flist dst_matched_list;    \/* matched dst items in this conjunction *\/$/;"	m	struct:dcmp_conjunction	file:
dst_matched_list	src/dsync/dsync.c	/^    mfu_flist dst_matched_list;    \/* matched dst items in this conjunction *\/$/;"	m	struct:dsync_conjunction	file:
dst_name	src/common/mfu_compress_bz2_libcircle.c	/^static char* dst_name;$/;"	v	file:
dst_name	src/common/mfu_decompress_bz2_libcircle.c	/^static char* dst_name;$/;"	v	file:
dst_path	src/common/mfu_daos.h	/^    char* dst_path;         \/* allocated dst path *\/$/;"	m	struct:__anon2
dst_poh	src/common/mfu_daos.h	/^    daos_handle_t dst_poh;  \/* destination pool handle *\/$/;"	m	struct:__anon2
dst_pool	src/common/mfu_daos.h	/^    char dst_pool[DAOS_PROP_LABEL_MAX_LEN + 1];$/;"	m	struct:__anon2
dsync_compare_acl	src/dsync/dsync.c	/^static void dsync_compare_acl($/;"	f	file:
dsync_compare_field	src/dsync/dsync.c	506;"	d	file:
dsync_compare_metadata	src/dsync/dsync.c	/^static int dsync_compare_metadata($/;"	f	file:
dsync_conjunction	src/dsync/dsync.c	/^struct dsync_conjunction {$/;"	s	file:
dsync_conjunction_add_expression	src/dsync/dsync.c	/^static void dsync_conjunction_add_expression($/;"	f	file:
dsync_conjunction_alloc	src/dsync/dsync.c	/^static struct dsync_conjunction* dsync_conjunction_alloc(void)$/;"	f	file:
dsync_conjunction_free	src/dsync/dsync.c	/^static void dsync_conjunction_free(struct dsync_conjunction *conjunction)$/;"	f	file:
dsync_conjunction_match	src/dsync/dsync.c	/^static int dsync_conjunction_match($/;"	f	file:
dsync_conjunction_parse	src/dsync/dsync.c	/^static int dsync_conjunction_parse($/;"	f	file:
dsync_conjunction_print	src/dsync/dsync.c	/^static void dsync_conjunction_print($/;"	f	file:
dsync_daos	src/dsync/dsync.c	/^static int dsync_daos($/;"	f	file:
dsync_daos_setup	src/dsync/dsync.c	/^static int dsync_daos_setup($/;"	f	file:
dsync_default_outputs	src/dsync/dsync.c	/^const char *dsync_default_outputs[] = {$/;"	v
dsync_dest_dir	test/tests/test_dsync/test_xattr.py	/^dsync_dest_dir   = "\/mnt\/lustre2"$/;"	v
dsync_disjunction	src/dsync/dsync.c	/^struct dsync_disjunction {$/;"	s	file:
dsync_disjunction_add_conjunction	src/dsync/dsync.c	/^static void dsync_disjunction_add_conjunction($/;"	f	file:
dsync_disjunction_alloc	src/dsync/dsync.c	/^static struct dsync_disjunction* dsync_disjunction_alloc(void)$/;"	f	file:
dsync_disjunction_free	src/dsync/dsync.c	/^static void dsync_disjunction_free(struct dsync_disjunction* disjunction)$/;"	f	file:
dsync_disjunction_match	src/dsync/dsync.c	/^static int dsync_disjunction_match($/;"	f	file:
dsync_disjunction_parse	src/dsync/dsync.c	/^static int dsync_disjunction_parse($/;"	f	file:
dsync_disjunction_print	src/dsync/dsync.c	/^static void dsync_disjunction_print($/;"	f	file:
dsync_expression	src/dsync/dsync.c	/^struct dsync_expression {$/;"	s	file:
dsync_expression_alloc	src/dsync/dsync.c	/^static struct dsync_expression* dsync_expression_alloc(void)$/;"	f	file:
dsync_expression_free	src/dsync/dsync.c	/^static void dsync_expression_free(struct dsync_expression *expression)$/;"	f	file:
dsync_expression_match	src/dsync/dsync.c	/^static int dsync_expression_match($/;"	f	file:
dsync_expression_parse	src/dsync/dsync.c	/^static int dsync_expression_parse($/;"	f	file:
dsync_expression_print	src/dsync/dsync.c	/^static void dsync_expression_print($/;"	f	file:
dsync_field	src/dsync/dsync.c	/^} dsync_field;$/;"	t	typeref:enum:_dsync_field	file:
dsync_field_depend	src/dsync/dsync.c	/^uint64_t dsync_field_depend[] = {$/;"	v
dsync_field_from_string	src/dsync/dsync.c	/^static int dsync_field_from_string(const char* string, dsync_field *field)$/;"	f	file:
dsync_field_to_string	src/dsync/dsync.c	/^static const char* dsync_field_to_string(dsync_field field, int simple)$/;"	f	file:
dsync_generate_real_lists	src/dsync/dsync.c	/^static void dsync_generate_real_lists($/;"	f	file:
dsync_map_fn	src/dsync/dsync.c	/^static int dsync_map_fn($/;"	f	file:
dsync_only_dst	src/dsync/dsync.c	/^static void dsync_only_dst(strmap* src_map,$/;"	f	file:
dsync_option_add_comparison	src/dsync/dsync.c	/^static void dsync_option_add_comparison(dsync_field field)$/;"	f	file:
dsync_option_add_output	src/dsync/dsync.c	/^static void dsync_option_add_output(struct dsync_output *output, int add_at_head)$/;"	f	file:
dsync_option_fini	src/dsync/dsync.c	/^static void dsync_option_fini(void)$/;"	f	file:
dsync_option_need_compare	src/dsync/dsync.c	/^static int dsync_option_need_compare(dsync_field field)$/;"	f	file:
dsync_option_output_parse	src/dsync/dsync.c	/^static int dsync_option_output_parse(const char *option, int add_at_head)$/;"	f	file:
dsync_options	src/dsync/dsync.c	/^struct dsync_options {$/;"	s	file:
dsync_output	src/dsync/dsync.c	/^struct dsync_output {$/;"	s	file:
dsync_output_alloc	src/dsync/dsync.c	/^static struct dsync_output* dsync_output_alloc(void)$/;"	f	file:
dsync_output_flist_match	src/dsync/dsync.c	/^static int dsync_output_flist_match($/;"	f	file:
dsync_output_free	src/dsync/dsync.c	/^static void dsync_output_free(struct dsync_output* output)$/;"	f	file:
dsync_output_init_disjunction	src/dsync/dsync.c	/^static void dsync_output_init_disjunction($/;"	f	file:
dsync_output_write	src/dsync/dsync.c	/^static int dsync_output_write($/;"	f	file:
dsync_outputs_write	src/dsync/dsync.c	/^static int dsync_outputs_write($/;"	f	file:
dsync_src_dir	test/tests/test_dsync/test_xattr.py	/^dsync_src_dir    = "\/mnt\/lustre"$/;"	v
dsync_state	src/dsync/dsync.c	/^} dsync_state;$/;"	t	typeref:enum:_dsync_state	file:
dsync_state_from_string	src/dsync/dsync.c	/^static int dsync_state_from_string(const char* string, dsync_state *state)$/;"	f	file:
dsync_state_to_string	src/dsync/dsync.c	/^static const char* dsync_state_to_string(dsync_state state, int simple)$/;"	f	file:
dsync_strmap_check	src/dsync/dsync.c	/^static void dsync_strmap_check($/;"	f	file:
dsync_strmap_check_dst	src/dsync/dsync.c	/^static void dsync_strmap_check_dst(strmap* src_map,$/;"	f	file:
dsync_strmap_check_src	src/dsync/dsync.c	/^static void dsync_strmap_check_src(strmap* src_map,$/;"	f	file:
dsync_strmap_compare	src/dsync/dsync.c	/^static int dsync_strmap_compare($/;"	f	file:
dsync_strmap_compare_data	src/dsync/dsync.c	/^static int dsync_strmap_compare_data($/;"	f	file:
dsync_strmap_compare_data_link_dest	src/dsync/dsync.c	/^static void dsync_strmap_compare_data_link_dest($/;"	f	file:
dsync_strmap_compare_link_dest	src/dsync/dsync.c	/^static int dsync_strmap_compare_link_dest($/;"	f	file:
dsync_strmap_compare_lite	src/dsync/dsync.c	/^static int dsync_strmap_compare_lite($/;"	f	file:
dsync_strmap_compare_lite_link_dest	src/dsync/dsync.c	/^static void dsync_strmap_compare_lite_link_dest($/;"	f	file:
dsync_strmap_creat	src/dsync/dsync.c	/^static strmap* dsync_strmap_creat(mfu_flist list, const char* prefix)$/;"	f	file:
dsync_strmap_item_index	src/dsync/dsync.c	/^static int dsync_strmap_item_index($/;"	f	file:
dsync_strmap_item_init	src/dsync/dsync.c	/^static void dsync_strmap_item_init($/;"	f	file:
dsync_strmap_item_state	src/dsync/dsync.c	/^static int dsync_strmap_item_state($/;"	f	file:
dsync_strmap_item_update	src/dsync/dsync.c	/^static void dsync_strmap_item_update($/;"	f	file:
dsync_sync_files	src/dsync/dsync.c	/^static int dsync_sync_files($/;"	f	file:
dsync_test_bin	test/tests/test_dsync/test_xattr.py	/^dsync_test_bin   = "\/root\/mpifileutils\/install\/bin\/dsync"$/;"	v
dsync_test_file	test/tests/test_dsync/test_xattr.py	/^dsync_test_file  = "file_test_xattr_XXX"$/;"	v
dsync_total_count	src/dsync/dsync.c	/^static uint64_t dsync_total_count;$/;"	v	file:
dsync_validate_link_dest	src/dsync/dsync.c	/^static int dsync_validate_link_dest(const char *link_dest, const char *dest, mfu_file_t* mfu_file)$/;"	f	file:
dt	src/common/mfu_flist_internal.h	/^    MPI_Datatype dt; \/* MPI datatype for sending\/receiving\/writing to file *\/$/;"	m	struct:__anon22
dtar_path	test/legacy/dtest/dtest	/^	dtar_path = '\/ccs\/home\/tag\/work\/dtar' ### CHANGE THIS TO YOUR DTAR INSTALL DIRECTORY ###$/;"	v	class:test
dts_oid_gen	src/daos-gen/daos-gen.c	/^daos_obj_id_t dts_oid_gen(unsigned seed)$/;"	f
dump_sha256_digest	src/ddup/ddup.c	/^static void dump_sha256_digest(char* digest_string, unsigned char digest[])$/;"	f	file:
elem_t	src/common/mfu_flist_internal.h	/^} elem_t;$/;"	t	typeref:struct:list_elem
encode_header	src/common/mfu_flist_archive.c	/^static int encode_header($/;"	f	file:
encode_header_to_buffer	src/common/mfu_flist_archive.c	/^static int encode_header_to_buffer($/;"	f	file:
encode_index_header	src/common/mfu_flist_archive.c	/^static int encode_index_header($/;"	f	file:
error	test/tests/test_dcmp/test_dcmp.sh	/^error()$/;"	f
error_exit	test/tests/test_dcmp/test_dcmp.sh	/^error_exit() {$/;"	f
error_noexit	test/tests/test_dcmp/test_dcmp.sh	/^error_noexit()$/;"	f
exa	src/common/mfu_util.c	/^static unsigned long long exa   = 1152921504606846976ULL;$/;"	v	file:
exclude_patterns	doc/rst/conf.py	/^exclude_patterns = []$/;"	v
execute	src/common/mfu_flist.h	/^    int execute;         \/* set to 1 if 'x' is given *\/$/;"	m	struct:mfu_perms_t
expressions	src/dcmp/dcmp.c	/^    struct list_head expressions;  \/* list of logical conjunction *\/$/;"	m	struct:dcmp_conjunction	typeref:struct:dcmp_conjunction::list_head	file:
expressions	src/dsync/dsync.c	/^    struct list_head expressions;  \/* list of logical conjunction *\/$/;"	m	struct:dsync_conjunction	typeref:struct:dsync_conjunction::list_head	file:
extensions	doc/rst/conf.py	/^extensions = ['sphinx.ext.coverage']$/;"	v
extract1_progress_fn	src/common/mfu_flist_archive.c	/^static void extract1_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
extract2_progress_fn	src/common/mfu_flist_archive.c	/^static void extract2_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
extract_files	src/common/mfu_flist_archive.c	/^static int extract_files($/;"	f	file:
extract_files_offsets_chunk	src/common/mfu_flist_archive.c	/^static int extract_files_offsets_chunk($/;"	f	file:
extract_files_offsets_chunk_libcircle	src/common/mfu_flist_archive.c	/^static int extract_files_offsets_chunk_libcircle($/;"	f	file:
extract_files_offsets_libarchive	src/common/mfu_flist_archive.c	/^static int extract_files_offsets_libarchive($/;"	f	file:
extract_flist	src/common/mfu_flist_archive.c	/^static int extract_flist($/;"	f	file:
extract_flist_offsets	src/common/mfu_flist_archive.c	/^static int extract_flist_offsets($/;"	f	file:
extract_libarchive	src/common/mfu_flist.h	/^    int     extract_libarchive;$/;"	m	struct:__anon10
extract_prog	src/common/mfu_flist_archive.c	/^mfu_progress* extract_prog = NULL;$/;"	v
extract_symlinks	src/common/mfu_flist_archive.c	/^static int extract_symlinks($/;"	f	file:
extract_xattrs	src/common/mfu_flist_archive.c	/^static int extract_xattrs($/;"	f	file:
f	src/common/mfu_flist.h	/^    mfu_pred_fn f;                \/* function to be executed *\/$/;"	m	struct:mfu_pred_item_t
fd	src/common/mfu_compress_bz2_libcircle.c	/^static int fd;$/;"	v	file:
fd	src/common/mfu_decompress_bz2_libcircle.c	/^static int fd;$/;"	v	file:
fd	src/common/mfu_flist_archive.c	/^    int   fd;   \/* file descriptor *\/$/;"	m	struct:__anon14	file:
fd	src/common/mfu_flist_archive.c	/^    int fd;                \/* file descriptor of archive file *\/$/;"	m	struct:__anon13	file:
fd	src/common/mfu_flist_copy.c	/^    int   fd;      \/* file descriptor *\/$/;"	m	struct:__anon21	file:
fd	src/common/mfu_param_path.h	/^    int                  fd;$/;"	m	struct:__anon24
fd	src/dcp1/common.h	/^    int   fd;$/;"	m	struct:__anon37
fd_out	src/common/mfu_compress_bz2_libcircle.c	/^static int fd_out;$/;"	v	file:
fd_out	src/common/mfu_decompress_bz2_libcircle.c	/^static int fd_out;$/;"	v	file:
field	src/dcmp/dcmp.c	/^    dcmp_field field;              \/* the concerned field *\/$/;"	m	struct:dcmp_expression	file:
field	src/dsync/dsync.c	/^    dsync_field field;              \/* the concerned field *\/$/;"	m	struct:dsync_expression	file:
file	src/common/mfu_daos.h	/^    hid_t file;$/;"	m	struct:hdf5_args
file	src/common/mfu_flist_internal.h	/^    char* file;             \/* file name (strdup'd) *\/$/;"	m	struct:list_elem
file	src/dcp1/common.h	/^  char* file;             \/* file name *\/$/;"	m	struct:list_elem
file_bcast_exit	src/dbcast/dbcast.c	/^int file_bcast_exit()$/;"	f
file_count	test/legacy/dtest/dtest	/^	file_count = 10$/;"	v	class:test
file_item	src/ddup/ddup.c	/^struct file_item {$/;"	s	file:
file_name	src/dcmp/dcmp.c	/^    char* file_name;               \/* output file name *\/$/;"	m	struct:dcmp_output	file:
file_name	src/dsync/dsync.c	/^    char* file_name;               \/* output file name *\/$/;"	m	struct:dsync_output	file:
file_size	src/common/mfu_flist.h	/^  uint64_t file_size;      \/* full size of target file *\/$/;"	m	struct:mfu_file_chunk_struct
file_size	src/common/mfu_flist_archive.c	/^    uint64_t file_size;         \/* size of user data file in bytes *\/$/;"	m	struct:__anon12	file:
file_size	src/dcp1/common.h	/^    int64_t file_size;$/;"	m	struct:__anon34
file_size	test/legacy/dtest/dtest	/^	file_size = '1G'$/;"	v	class:test
filecmp	test/legacy/dtest/dtest	/^import filecmp$/;"	i
filesize	src/common/mfu_compress_bz2_libcircle.c	/^static int64_t filesize;$/;"	v	file:
fill_count	src/common/mfu_flist_copy.c	/^static uint64_t fill_count;$/;"	v	file:
fill_prog	src/common/mfu_flist_copy.c	/^static mfu_progress* fill_prog;$/;"	v	file:
fill_progress_fn	src/common/mfu_flist_copy.c	/^static void fill_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
fillbuff	src/dfilemaker/dfilemaker.c	/^void fillbuff(int* ibuff, int nwds)$/;"	f
fillelem	src/dfilemaker/dfilemaker.c	/^void fillelem(mfu_flist flist, uint64_t index, char* fname, long int flen, mfu_filetype ftype)$/;"	f
filter_files	src/dsh/dsh.c	/^static void filter_files(mfu_flist* pflist)$/;"	f	file:
filter_files_path	src/dsh/dsh.c	/^static void filter_files_path(mfu_flist flist, mfu_path* path, int inclusive, mfu_flist* out_eligible, mfu_flist* out_leftover)$/;"	f	file:
filter_files_regex	src/dsh/dsh.c	/^static void filter_files_regex(mfu_flist flist, mfu_path* path, const char* regex, mfu_flist* out_eligible, mfu_flist* out_leftover)$/;"	f	file:
filter_list	src/dstripe/dstripe.c	/^static mfu_flist filter_list(mfu_flist list, int stripe_count, uint64_t stripe_size, uint64_t min_size, uint64_t* total_count, uint64_t* total_size)$/;"	f	file:
find_path	test/legacy/dtest/dtest	/^	def find_path(self, command):$/;"	m	class:test
find_wave_size	src/common/mfu_compress_bz2_libcircle.c	/^static void find_wave_size(int64_t size, int opts_memory)$/;"	f	file:
first	src/common/list.h	/^	hlist_node_t *first;$/;"	m	struct:hlist_head
flags	src/common/mfu_flist.h	/^    int     flags;$/;"	m	struct:__anon10
flat	test/legacy/dtest/dtest	/^	flat = True$/;"	v	class:test
flist	src/common/mfu_flist_internal.h	/^typedef struct flist {$/;"	s
flist_get_dirs	src/common/mfu_flist_archive.c	/^static mfu_flist flist_get_dirs(mfu_flist flist)$/;"	f	file:
flist_null	src/common/mfu_flist.c	/^static flist_t flist_null;$/;"	v	file:
flist_sum_bytes	src/common/mfu_flist_archive.c	/^static uint64_t flist_sum_bytes(mfu_flist flist)$/;"	f	file:
flist_t	src/common/mfu_flist_internal.h	/^} flist_t;$/;"	t	typeref:struct:flist
force	src/common/mfu_flist.h	/^    bool force;     \/* always call chmod\/chgrp on every item *\/$/;"	m	struct:__anon9
force	src/dcp1/common.h	/^    bool   force;$/;"	m	struct:__anon36
format	src/dcmp/dcmp.c	/^    int format;                    \/* output data format, 0 for text, 1 for raw *\/$/;"	m	struct:dcmp_options	file:
free_iov_buf	src/common/mfu_daos.c	/^static void free_iov_buf($/;"	f	file:
fs_type	test/tests/test_dsync/test_xattr.sh	/^function fs_type()$/;"	f
full_path_to_entry	src/common/mfu_flist_archive.c	/^static const char* full_path_to_entry($/;"	f	file:
gcs_anytrue	src/dbcast/dbcast.c	/^static int gcs_anytrue(int value, MPI_Comm comm)$/;"	f	file:
gcs_build_shmem_file	src/dbcast/dbcast.c	/^static char* gcs_build_shmem_file(MPI_Comm comm)$/;"	f	file:
gcs_get_shmem_file	src/dbcast/dbcast.c	/^static int gcs_get_shmem_file(char* file, int len, MPI_Comm comm)$/;"	f	file:
gcs_shm_file_attr_copy	src/dbcast/dbcast.c	/^static int gcs_shm_file_attr_copy(MPI_Comm oldcomm, int keyval,$/;"	f	file:
gcs_shm_file_attr_del	src/dbcast/dbcast.c	/^static int gcs_shm_file_attr_del(MPI_Comm comm, int keyval, void* attribute_val, void* extra_state)$/;"	f	file:
gcs_shm_file_key	src/dbcast/dbcast.c	/^static int gcs_shm_file_key = MPI_KEYVAL_INVALID;$/;"	v	file:
gcs_shm_ptr_tree	src/dbcast/dbcast.c	/^static strmap* gcs_shm_ptr_tree = NULL;$/;"	v	file:
gen_file	test/legacy/dtest/dtest	/^	def gen_file(self, path):$/;"	m	class:test
gen_files	test/legacy/dtest/dtest	/^	gen_files = True$/;"	v	class:test
gen_tree	test/legacy/dtest/dtest	/^	def gen_tree(self):$/;"	m	class:test
generate_pretty_size	src/dstripe/dstripe.c	/^static void generate_pretty_size(char *out, unsigned int length, uint64_t size)$/;"	f	file:
generate_suffix	src/dstripe/dstripe.c	/^static void generate_suffix(char *suffix, const int len)$/;"	f	file:
get_filesize	src/common/mfu_flist_archive.c	/^static int get_filesize(const char* file, uint64_t* out_size)$/;"	f	file:
get_filesize	src/common/mfu_flist_io.c	/^static uint64_t get_filesize(const char* name)$/;"	f	file:
get_filesize_padded	src/common/mfu_flist_archive.c	/^static uint64_t get_filesize_padded(uint64_t filesize)$/;"	f	file:
get_mtimes	src/dfind/dfind.c	/^static mfu_pred_times* get_mtimes(const char* file, mfu_file_t* mfu_file)$/;"	f	file:
get_total_bytes_read	src/dcmp/dcmp.c	/^static uint64_t get_total_bytes_read(mfu_flist src_compare_list) {$/;"	f	file:
geteuid	src/common/mfu_flist.h	/^    uid_t geteuid;  \/* result from geteuid *\/$/;"	m	struct:__anon9
getjob	test/legacy/dtest/moab.py	/^def getjob(id):$/;"	f
getjobsbyuser	test/legacy/dtest/moab.py	/^def getjobsbyuser(user):$/;"	f
getnum	src/dfilemaker/dfilemaker.c	/^int getnum(const char* fname)$/;"	f
gettime	src/dsh/dsh.c	/^static uint32_t gettime(void)$/;"	f	file:
getuid	src/common/mfu_flist.h	/^    uid_t getuid;   \/* result from getuid *\/$/;"	m	struct:__anon9
gid	src/common/mfu_flist.h	/^    gid_t gid;      \/* new group id for item's group, -1 for no change  *\/$/;"	m	struct:__anon9
gid	src/common/mfu_flist_internal.h	/^    uint64_t gid;           \/* group id *\/$/;"	m	struct:list_elem
giga	src/common/mfu_util.c	/^static unsigned long long giga  =          1073741824ULL;$/;"	v	file:
glob	test/legacy/dtest/dtest	/^import glob$/;"	i
global_vals	src/common/mfu_progress.h	/^    uint64_t* global_vals;  \/* array to hold global sum across ranks *\/$/;"	m	struct:__anon31
group	src/common/mfu_flist.h	/^    int group;           \/* set to 1 if group bits should be set (e.g. g+r) *\/$/;"	m	struct:mfu_perms_t
group_id2name	src/common/mfu_flist_internal.h	/^    strmap* group_id2name; \/* map linux gid to group name *\/$/;"	m	struct:flist
grouplock_id	src/common/mfu_param_path.h	/^    int          grouplock_id;     \/* Lustre grouplock ID *\/$/;"	m	struct:__anon28
groups	src/common/mfu_flist_internal.h	/^    buf_t groups;$/;"	m	struct:flist
handleType	src/common/mfu_daos.h	/^enum handleType {$/;"	g
have_groups	src/common/mfu_flist_internal.h	/^    int have_groups;       \/* set to 1 if group map is valid *\/$/;"	m	struct:flist
have_users	src/common/mfu_flist_internal.h	/^    int have_users;        \/* set to 1 if user map is valid *\/$/;"	m	struct:flist
hdf5_args	src/common/mfu_daos.h	/^struct hdf5_args {$/;"	s
hdf5_read_key_data	src/common/mfu_daos.c	/^static int hdf5_read_key_data(struct hdf5_args *hdf5)$/;"	f	file:
head	src/common/mfu_path.h	/^  mfu_path_elem* head; \/* pointer to first element *\/$/;"	m	struct:__anon29
header_buf	src/common/mfu_flist_archive.c	/^    void* header_buf;      \/* memory buffer in which to encode entry headers *\/$/;"	m	struct:__anon13	file:
header_bufsize	src/common/mfu_flist_archive.c	/^    size_t header_bufsize; \/* size of memory buffer in bytes *\/$/;"	m	struct:__anon13	file:
header_size	src/common/mfu_flist.h	/^    size_t  header_size;$/;"	m	struct:__anon10
height	src/common/strmap.h	/^  int    height;     \/* max height of subtree rooted at this node *\/$/;"	m	struct:strmap_node_struct
hi	src/common/mfu_daos.h	/^    uint64_t hi;$/;"	m	struct:__anon3
hlist_add_after	src/common/list.h	/^static inline void hlist_add_after(hlist_node_t *n,$/;"	f
hlist_add_before	src/common/list.h	/^static inline void hlist_add_before(hlist_node_t *n,$/;"	f
hlist_add_head	src/common/list.h	/^static inline void hlist_add_head(hlist_node_t *n,$/;"	f
hlist_del	src/common/list.h	/^static inline void hlist_del(hlist_node_t *n)$/;"	f
hlist_del_init	src/common/list.h	/^static inline void hlist_del_init(hlist_node_t *n)$/;"	f
hlist_empty	src/common/list.h	/^static inline int hlist_empty(const hlist_head_t *h)$/;"	f
hlist_entry	src/common/list.h	363;"	d
hlist_for_each	src/common/list.h	365;"	d
hlist_for_each_entry	src/common/list.h	380;"	d
hlist_for_each_entry_continue	src/common/list.h	392;"	d
hlist_for_each_entry_from	src/common/list.h	404;"	d
hlist_for_each_entry_safe	src/common/list.h	417;"	d
hlist_for_each_entry_safe_typed	src/common/list.h	537;"	d
hlist_for_each_entry_typed	src/common/list.h	531;"	d
hlist_for_each_safe	src/common/list.h	369;"	d
hlist_head	src/common/list.h	/^typedef struct hlist_head {$/;"	s
hlist_head_t	src/common/list.h	/^} hlist_head_t;$/;"	t	typeref:struct:hlist_head
hlist_node	src/common/list.h	/^typedef struct hlist_node {$/;"	s
hlist_node_t	src/common/list.h	/^} hlist_node_t;$/;"	t	typeref:struct:hlist_node
hlist_unhashed	src/common/list.h	/^static inline int hlist_unhashed(const hlist_node_t *h)$/;"	f
hold	test/legacy/dtest/moab.py	/^	def hold(self):$/;"	m	class:job
hold	test/legacy/dtest/moab.py	/^def hold(id):$/;"	f
html_theme	doc/rst/conf.py	/^html_theme = 'default'$/;"	v
htmlhelp_basename	doc/rst/conf.py	/^htmlhelp_basename = 'mpiFileUtilsdoc'$/;"	v
id	src/common/mfu_flist_usrgrp.c	/^    uint64_t id;$/;"	m	struct:strid	file:
id	test/legacy/dtest/moab.py	/^	def id(self):$/;"	m	class:job
id	test/legacy/dtest/moab.py	/^	id = 0$/;"	v	class:job
in_flist	test/tests/test_dcmp/test_dcmp.sh	/^in_flist()$/;"	f
index_data_size	src/common/mfu_flist_archive.c	/^static size_t index_data_size(uint64_t count)$/;"	f	file:
index_entries	src/common/mfu_flist_archive.c	/^static int index_entries($/;"	f	file:
index_entries_distread	src/common/mfu_flist_archive.c	/^static int index_entries_distread($/;"	f	file:
index_entries_distread_linearscan	src/common/mfu_flist_archive.c	/^static int index_entries_distread_linearscan($/;"	f	file:
index_entries_distread_parallelscan	src/common/mfu_flist_archive.c	/^static int index_entries_distread_parallelscan($/;"	f	file:
index_of_owner	src/common/mfu_flist.h	/^  uint64_t index_of_owner; \/* index value of file in original flist on its owner rank *\/$/;"	m	struct:mfu_file_chunk_struct
index_pack	src/common/mfu_flist_archive.c	/^static void index_pack($/;"	f	file:
index_unpack	src/common/mfu_flist_archive.c	/^static int index_unpack($/;"	f	file:
init_hdf5_args	src/common/mfu_daos.c	/^static inline void init_hdf5_args(struct hdf5_args *hdf5)$/;"	f	file:
init_hdf5_file	src/common/mfu_daos.c	/^static int init_hdf5_file(struct hdf5_args *hdf5, char *filename) {$/;"	f	file:
init_recx_data	src/common/mfu_daos.c	/^static int init_recx_data(struct hdf5_args *hdf5)$/;"	f	file:
input_file	src/common/mfu_param_path.h	/^    char*        input_file;       \/* file name of input list *\/$/;"	m	struct:__anon28
input_flist_skip	src/dcp/dcp.c	/^static int input_flist_skip(const char* name, void *args)$/;"	f	file:
insert_entry_into_flist	src/common/mfu_flist_archive.c	/^static void insert_entry_into_flist($/;"	f	file:
invalid_sortfields	src/dsh/dsh.c	/^static int invalid_sortfields(char* sortfields, mfu_walk_opts_t* walk_opts)$/;"	f	file:
io_buf	src/common/mfu_flist_archive.c	/^    void* io_buf;          \/* memory buffer to read\/write files *\/$/;"	m	struct:__anon13	file:
io_bufsize	src/common/mfu_flist_archive.c	/^    size_t io_bufsize;     \/* size of memory i\/o buffer in bytes *\/$/;"	m	struct:__anon13	file:
isize	src/dfilemaker/dfilemaker.c	/^size_t size, isize;$/;"	v
iterations	test/legacy/dtest/dtest	/^	iterations = 3$/;"	v	class:test
job	test/legacy/dtest/moab.py	/^class job:$/;"	c
jobid	test/legacy/dtest/dtest	/^	jobid = 0$/;"	v	class:test
jobname	test/legacy/dtest/dtest	/^	jobname = 'dtest.job'$/;"	v	class:test
keep_going	src/common/mfu_progress.h	/^    int keep_going;         \/* flag indicating whether any process is still working *\/$/;"	m	struct:__anon31
key	src/common/strmap.h	/^  const char* key;   \/* pointer to key string *\/$/;"	m	struct:strmap_node_struct
key_len	src/common/strmap.h	/^  size_t key_len;    \/* number of characters in key string (including terminating NUL) *\/$/;"	m	struct:strmap_node_struct
kilo	src/common/mfu_util.c	/^static unsigned long long kilo  =                1024ULL;$/;"	v	file:
language	doc/rst/conf.py	/^language = None$/;"	v
latex_documents	doc/rst/conf.py	/^latex_documents = [$/;"	v
latex_elements	doc/rst/conf.py	/^latex_elements = {$/;"	v
left	src/common/strmap.h	/^  struct strmap_node_struct* left;   \/* pointer to left child *\/$/;"	m	struct:strmap_node_struct	typeref:struct:strmap_node_struct::strmap_node_struct
len	src/common/strmap.h	/^  size_t len;        \/* sum of characters in all key\/value strings (including terminating NULs) *\/$/;"	m	struct:strmap_struct
length	src/common/mfu_compress_bz2_libcircle.c	/^    unsigned int length;$/;"	m	struct:block_info	file:
length	src/common/mfu_flist.h	/^  uint64_t length;         \/* length of bytes process is responsible for *\/$/;"	m	struct:mfu_file_chunk_struct
link_dest	src/dsync/dsync.c	/^    char* link_dest;               \/* link dest dir *\/$/;"	m	struct:dsync_options	file:
linkage	src/dcmp/dcmp.c	/^    struct list_head linkage;      \/* linkage to struct dcmp_conjunction *\/$/;"	m	struct:dcmp_expression	typeref:struct:dcmp_expression::list_head	file:
linkage	src/dcmp/dcmp.c	/^    struct list_head linkage;      \/* linkage to struct dcmp_disjunction *\/$/;"	m	struct:dcmp_conjunction	typeref:struct:dcmp_conjunction::list_head	file:
linkage	src/dcmp/dcmp.c	/^    struct list_head linkage;      \/* linkage to struct dcmp_options *\/$/;"	m	struct:dcmp_output	typeref:struct:dcmp_output::list_head	file:
linkage	src/dcmp/dcmp.c	/^    struct list_head linkage;      \/* linkage to struct dcmp_output *\/$/;"	m	struct:dcmp_disjunction	typeref:struct:dcmp_disjunction::list_head	file:
linkage	src/dsync/dsync.c	/^    struct list_head linkage;      \/* linkage to struct dsync_conjunction *\/$/;"	m	struct:dsync_expression	typeref:struct:dsync_expression::list_head	file:
linkage	src/dsync/dsync.c	/^    struct list_head linkage;      \/* linkage to struct dsync_disjunction *\/$/;"	m	struct:dsync_conjunction	typeref:struct:dsync_conjunction::list_head	file:
linkage	src/dsync/dsync.c	/^    struct list_head linkage;      \/* linkage to struct dsync_options *\/$/;"	m	struct:dsync_output	typeref:struct:dsync_output::list_head	file:
linkage	src/dsync/dsync.c	/^    struct list_head linkage;      \/* linkage to struct dsync_output *\/$/;"	m	struct:dsync_disjunction	typeref:struct:dsync_disjunction::list_head	file:
linux_dirent	src/common/mfu_flist_walk.c	/^struct linux_dirent {$/;"	s	file:
list_add	src/common/list.h	/^static inline void list_add(struct list_head *new,$/;"	f
list_add_tail	src/common/list.h	/^static inline void list_add_tail(struct list_head *new,$/;"	f
list_all_xattrs	test/tests/test_dsync/test_xattr.sh	/^function list_all_xattrs()$/;"	f
list_cap	src/common/mfu_flist_internal.h	/^    uint64_t list_cap;   \/* current capacity of list_index *\/$/;"	m	struct:flist
list_compute_summary	src/common/mfu_flist.c	/^static void list_compute_summary(flist_t* flist)$/;"	f	file:
list_count	src/common/mfu_flist_internal.h	/^    uint64_t list_count; \/* number of items in list *\/$/;"	m	struct:flist
list_del	src/common/list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	src/common/list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_delete	src/common/mfu_flist.c	/^static void list_delete(flist_t* flist)$/;"	f	file:
list_elem	src/common/mfu_flist_internal.h	/^typedef struct list_elem {$/;"	s
list_elem	src/dcp1/common.h	/^typedef struct list_elem {$/;"	s
list_elem_decode	src/common/mfu_flist_io.c	/^static void list_elem_decode(char* buf, elem_t* elem)$/;"	f	file:
list_elem_encode	src/common/mfu_flist_io.c	/^static size_t list_elem_encode(void* buf, const elem_t* elem)$/;"	f	file:
list_elem_encode_size	src/common/mfu_flist_io.c	/^static size_t list_elem_encode_size(const elem_t* elem)$/;"	f	file:
list_elem_pack	src/common/mfu_flist_io.c	/^static size_t list_elem_pack(void* buf, int detail, uint64_t chars, const elem_t* elem)$/;"	f	file:
list_elem_pack2	src/common/mfu_flist.c	/^static size_t list_elem_pack2(void* buf, int detail, uint64_t chars, const elem_t* elem)$/;"	f	file:
list_elem_pack2_size	src/common/mfu_flist.c	/^static size_t list_elem_pack2_size(int detail, uint64_t chars, const elem_t* elem)$/;"	f	file:
list_elem_pack_size	src/common/mfu_flist_io.c	/^static size_t list_elem_pack_size(int detail, uint64_t chars, const elem_t* elem)$/;"	f	file:
list_elem_unpack	src/common/mfu_flist_io.c	/^static size_t list_elem_unpack(const void* buf, int detail, uint64_t chars, elem_t* elem)$/;"	f	file:
list_elem_unpack2	src/common/mfu_flist.c	/^static size_t list_elem_unpack2(const void* buf, elem_t* elem)$/;"	f	file:
list_empty	src/common/list.h	/^static inline int list_empty(struct list_head *head)$/;"	f
list_empty_careful	src/common/list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	src/common/list.h	223;"	d
list_for_each	src/common/list.h	234;"	d
list_for_each_entry	src/common/list.h	444;"	d
list_for_each_entry_continue	src/common/list.h	257;"	d
list_for_each_entry_rcu	src/common/list.h	453;"	d
list_for_each_entry_rcu	src/common/list.h	458;"	d
list_for_each_entry_reverse	src/common/list.h	469;"	d
list_for_each_entry_reverse_typed	src/common/list.h	515;"	d
list_for_each_entry_safe	src/common/list.h	483;"	d
list_for_each_entry_safe_from	src/common/list.h	502;"	d
list_for_each_entry_safe_from_typed	src/common/list.h	526;"	d
list_for_each_entry_safe_typed	src/common/list.h	520;"	d
list_for_each_entry_typed	src/common/list.h	508;"	d
list_for_each_prev	src/common/list.h	431;"	d
list_for_each_safe	src/common/list.h	247;"	d
list_get_elem	src/common/mfu_flist.c	/^static elem_t* list_get_elem(flist_t* flist, uint64_t idx)$/;"	f	file:
list_head	src/common/list.h	/^struct list_head {$/;"	s
list_head	src/common/mfu_flist_internal.h	/^    elem_t*  list_head;  \/* points to item at head of list *\/$/;"	m	struct:flist
list_index	src/common/mfu_flist_internal.h	/^    elem_t** list_index; \/* an array with pointers to each item in list *\/$/;"	m	struct:flist
list_index_append	src/common/mfu_flist.c	/^static void list_index_append(flist_t* flist, elem_t* elem)$/;"	f	file:
list_insert_copy	src/common/mfu_flist.c	/^static void list_insert_copy(flist_t* flist, elem_t* src)$/;"	f	file:
list_insert_decode	src/common/mfu_flist_io.c	/^static void list_insert_decode(flist_t* flist, char* buf)$/;"	f	file:
list_insert_ptr	src/common/mfu_flist_io.c	/^static size_t list_insert_ptr(flist_t* flist, char* ptr, int detail, uint64_t chars)$/;"	f	file:
list_move	src/common/list.h	/^static inline void list_move(struct list_head *list,$/;"	f
list_move_tail	src/common/list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_sort	src/common/list.h	/^static inline void list_sort(void *priv, struct list_head *head,$/;"	f
list_splice	src/common/list.h	/^static inline void list_splice(struct list_head *list,$/;"	f
list_splice_init	src/common/list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
list_tail	src/common/mfu_flist_internal.h	/^    elem_t*  list_tail;  \/* points to item at tail of list *\/$/;"	m	struct:flist
lite	src/dcmp/dcmp.c	/^    int lite;$/;"	m	struct:dcmp_options	file:
lnamsort	src/dfilemaker/dfilemaker.c	/^void lnamsort(char** buff, int nitems, int* lind)$/;"	f
lnamunsort	src/dfilemaker/dfilemaker.c	/^void lnamunsort(char** buff, char** tarray, int* lind, int nitems)$/;"	f
lo	src/common/mfu_daos.h	/^    uint64_t lo;$/;"	m	struct:__anon3
log	test/tests/test_dcmp/test_dcmp.sh	/^log ()$/;"	f
lookup_gid	src/common/mfu_flist_chmod.c	/^static int lookup_gid(const char* name, gid_t* gid)$/;"	f	file:
lookup_uid	src/common/mfu_flist_chmod.c	/^static int lookup_uid(const char* name, uid_t* uid)$/;"	f	file:
lustre_stripe	src/common/mfu_flist.h	/^    bool lustre_stripe;   \/* whether to apply lustre striping parameters *\/$/;"	m	struct:__anon8
lustre_stripe_count	src/common/mfu_flist.h	/^    uint64_t lustre_stripe_count;   \/* number of stripes *\/$/;"	m	struct:__anon8
lustre_stripe_info	src/common/mfu_flist_walk.c	/^static void lustre_stripe_info(void* buf)$/;"	f	file:
lustre_stripe_minsize	src/common/mfu_flist.h	/^    uint64_t lustre_stripe_minsize; \/* min file size in bytes for which to stripe file *\/$/;"	m	struct:__anon8
lustre_stripe_width	src/common/mfu_flist.h	/^    uint64_t lustre_stripe_width;   \/* size of a single stripe in bytes *\/$/;"	m	struct:__anon8
magnitude	src/common/mfu_pred.h	/^    uint64_t magnitude; \/* value *\/$/;"	m	struct:mfu_pred_times_rel_t
main	src/daos-deserialize/daos-deserialize.c	/^int main(int argc, char** argv)$/;"	f
main	src/daos-gen/daos-gen.c	/^int main(int argc, char** argv)$/;"	f
main	src/daos-serialize/daos-serialize.c	/^int main(int argc, char** argv)$/;"	f
main	src/dbcast/dbcast.c	/^int main (int argc, char *argv[])$/;"	f
main	src/dbz2/dbz2.c	/^int main(int argc, char** argv)$/;"	f
main	src/dchmod/dchmod.c	/^int main(int argc, char** argv)$/;"	f
main	src/dcmp/dcmp.c	/^int main(int argc, char **argv)$/;"	f
main	src/dcp/dcp.c	/^int main(int argc, char** argv)$/;"	f
main	src/dcp1/dcp1.c	/^int main(int argc, \\$/;"	f
main	src/ddup/ddup.c	/^int main(int argc, char** argv)$/;"	f
main	src/dfilemaker/dfilemaker.c	/^int main(int narg, char** arg)$/;"	f
main	src/dfilemaker1/dfilemaker1.c	/^int main(int argc, char* argv[])$/;"	f
main	src/dfind/dfind.c	/^int main (int argc, char** argv)$/;"	f
main	src/dgrep/dgrep.c	/^main (int argc, char **argv)$/;"	f
main	src/dparallel/dparallel.c	/^int main(void)$/;"	f
main	src/dreln/dreln.c	/^int main (int argc, char* argv[])$/;"	f
main	src/drm/drm.c	/^int main(int argc, char** argv)$/;"	f
main	src/dsh/dsh.c	/^int main(int argc, char** argv)$/;"	f
main	src/dstripe/dstripe.c	/^int main(int argc, char* argv[])$/;"	f
main	src/dsync/dsync.c	/^int main(int argc, char **argv)$/;"	f
main	src/dtar/dtar.c	/^int main(int argc, char** argv)$/;"	f
main	src/dwalk/dwalk.c	/^int main(int argc, char** argv)$/;"	f
main	test/legacy/dtest/dtest	/^	def main(self):	$/;"	m	class:test
main	test/tests/test_dcp/checkfiemap.c	/^int main(int argc, char **argv)$/;"	f
man_pages	doc/rst/conf.py	/^man_pages = [$/;"	v
map_chunk_to_rank	src/common/mfu_flist_chunk.c	/^static int map_chunk_to_rank(uint64_t offset, uint64_t cutoff, uint64_t chunks_per_rank)$/;"	f	file:
map_name	src/common/mfu_flist_remove.c	/^static int map_name(mfu_flist flist, uint64_t idx, int ranks, const void* args)$/;"	f	file:
map_spread	src/common/mfu_flist.c	/^static int map_spread(mfu_flist flist, uint64_t idx, int ranks, const void* args)$/;"	f	file:
master_doc	doc/rst/conf.py	/^master_doc = 'index'$/;"	v
max_depth	src/common/mfu_flist_internal.h	/^    int max_depth;           \/* maximum file depth *\/$/;"	m	struct:flist
max_file_name	src/common/mfu_flist_internal.h	/^    uint64_t max_file_name;  \/* maximum filename strlen()+1 in global list *\/$/;"	m	struct:flist
max_group_name	src/common/mfu_flist_internal.h	/^    uint64_t max_group_name; \/* maximum groupname strlen()+1 *\/$/;"	m	struct:flist
max_user_name	src/common/mfu_flist_internal.h	/^    uint64_t max_user_name;  \/* maximum username strlen()+1 *\/$/;"	m	struct:flist
maxdepth	src/dfind/common.h	/^    int maxdepth;$/;"	m	struct:__anon38
mega	src/common/mfu_util.c	/^static unsigned long long mega  =             1048576ULL;$/;"	v	file:
mem_dims	src/common/mfu_daos.h	/^    hsize_t mem_dims[1];$/;"	m	struct:hdf5_args
mem_size	src/common/mfu_flist.h	/^    size_t  mem_size;$/;"	m	struct:__anon10
meta_progress_fn	src/common/mfu_flist_copy.c	/^static void meta_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
metaapply_progress_fn	src/common/mfu_flist_create.c	/^static void metaapply_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
mfu_abort	src/common/mfu_util.c	/^void mfu_abort(const char* file, int line, int rc, const char* fmt, ...)$/;"	f
mfu_abtoull	src/common/mfu_util.c	/^int mfu_abtoull(const char* str, unsigned long long* val)$/;"	f
mfu_access	src/common/mfu_io.c	/^int mfu_access(const char* path, int amode)$/;"	f
mfu_alltrue	src/common/mfu_util.c	/^bool mfu_alltrue(bool flag, MPI_Comm comm)$/;"	f
mfu_archive_close_file	src/common/mfu_flist_archive.c	/^static int mfu_archive_close_file($/;"	f	file:
mfu_archive_dst_cache	src/common/mfu_flist_archive.c	/^static mfu_archive_file_cache_t mfu_archive_dst_cache;$/;"	v	file:
mfu_archive_file_cache_t	src/common/mfu_flist_archive.c	/^} mfu_archive_file_cache_t;$/;"	t	typeref:struct:__anon14	file:
mfu_archive_open_file	src/common/mfu_flist_archive.c	/^static int mfu_archive_open_file($/;"	f	file:
mfu_archive_opts_delete	src/common/mfu_flist_archive.c	/^void mfu_archive_opts_delete(mfu_archive_opts_t** popts)$/;"	f
mfu_archive_opts_new	src/common/mfu_flist_archive.c	/^mfu_archive_opts_t* mfu_archive_opts_new(void)$/;"	f
mfu_archive_opts_t	src/common/mfu_flist.h	/^} mfu_archive_opts_t;$/;"	t	typeref:struct:__anon10
mfu_archive_src_cache	src/common/mfu_flist_archive.c	/^static mfu_archive_file_cache_t mfu_archive_src_cache;$/;"	v	file:
mfu_bcast_strdup	src/common/mfu_util.c	/^void mfu_bcast_strdup(const char* send, char** recv, int root, MPI_Comm comm)$/;"	f
mfu_calloc	src/common/mfu_util.c	/^void* mfu_calloc(size_t nelem, size_t elsize, const char* file, int line)$/;"	f
mfu_chmod	src/common/mfu_io.c	/^int mfu_chmod(const char* path, mode_t mode)$/;"	f
mfu_chmod_opts_delete	src/common/mfu_flist_chmod.c	/^void mfu_chmod_opts_delete(mfu_chmod_opts_t** popts)$/;"	f
mfu_chmod_opts_new	src/common/mfu_flist_chmod.c	/^mfu_chmod_opts_t* mfu_chmod_opts_new(void)$/;"	f
mfu_chmod_opts_t	src/common/mfu_flist.h	/^} mfu_chmod_opts_t;$/;"	t	typeref:struct:__anon9
mfu_close	src/common/mfu_io.c	/^int mfu_close(const char* file, int fd)$/;"	f
mfu_closedir	src/common/mfu_io.c	/^int mfu_closedir(DIR* dirp)$/;"	f
mfu_compare_contents	src/common/mfu_util.c	/^int mfu_compare_contents($/;"	f
mfu_compress_bz2	src/common/mfu_bz2.c	/^int mfu_compress_bz2(const char* src_name, const char* dst_name, int b_size)$/;"	f
mfu_compress_bz2_libcircle	src/common/mfu_compress_bz2_libcircle.c	/^int mfu_compress_bz2_libcircle(const char* src, const char* dst, int b_size, ssize_t opts_memory)$/;"	f
mfu_compress_bz2_static	src/common/mfu_bz2_static.c	/^int mfu_compress_bz2_static(const char* src_name, const char* dst_name, int b_size)$/;"	f
mfu_copy_acls	src/common/mfu_flist_copy.c	/^static int mfu_copy_acls($/;"	f	file:
mfu_copy_close_file	src/common/mfu_flist_copy.c	/^static int mfu_copy_close_file($/;"	f	file:
mfu_copy_dst_cache	src/common/mfu_flist_copy.c	/^static mfu_copy_file_cache_t mfu_copy_dst_cache;$/;"	v	file:
mfu_copy_file	src/common/mfu_flist_copy.c	/^static int mfu_copy_file($/;"	f	file:
mfu_copy_file_cache_t	src/common/mfu_flist_copy.c	/^} mfu_copy_file_cache_t;$/;"	t	typeref:struct:__anon21	file:
mfu_copy_file_fiemap	src/common/mfu_flist_copy.c	/^static int mfu_copy_file_fiemap($/;"	f	file:
mfu_copy_file_normal	src/common/mfu_flist_copy.c	/^static int mfu_copy_file_normal($/;"	f	file:
mfu_copy_files	src/common/mfu_flist_copy.c	/^static int mfu_copy_files($/;"	f	file:
mfu_copy_open_file	src/common/mfu_flist_copy.c	/^static int mfu_copy_open_file($/;"	f	file:
mfu_copy_opts_delete	src/common/mfu_flist_copy.c	/^void mfu_copy_opts_delete(mfu_copy_opts_t** popts)$/;"	f
mfu_copy_opts_new	src/common/mfu_flist_copy.c	/^mfu_copy_opts_t* mfu_copy_opts_new(void)$/;"	f
mfu_copy_opts_t	src/common/mfu_param_path.h	/^} mfu_copy_opts_t;$/;"	t	typeref:struct:__anon28
mfu_copy_ownership	src/common/mfu_flist_copy.c	/^static int mfu_copy_ownership($/;"	f	file:
mfu_copy_permissions	src/common/mfu_flist_copy.c	/^static int mfu_copy_permissions($/;"	f	file:
mfu_copy_set_metadata	src/common/mfu_flist_copy.c	/^static int mfu_copy_set_metadata($/;"	f	file:
mfu_copy_set_metadata_dirs	src/common/mfu_flist_copy.c	/^static int mfu_copy_set_metadata_dirs($/;"	f	file:
mfu_copy_src_cache	src/common/mfu_flist_copy.c	/^static mfu_copy_file_cache_t mfu_copy_src_cache;$/;"	v	file:
mfu_copy_stats	src/common/mfu_flist_copy.c	/^static mfu_copy_stats_t mfu_copy_stats;$/;"	v	file:
mfu_copy_stats_t	src/common/mfu_flist_copy.c	/^} mfu_copy_stats_t;$/;"	t	typeref:struct:__anon20	file:
mfu_copy_timestamps	src/common/mfu_flist_copy.c	/^static int mfu_copy_timestamps($/;"	f	file:
mfu_copy_xattrs	src/common/mfu_flist_copy.c	/^static int mfu_copy_xattrs($/;"	f	file:
mfu_create_directories	src/common/mfu_flist_copy.c	/^static int mfu_create_directories($/;"	f	file:
mfu_create_directory	src/common/mfu_flist_copy.c	/^static int mfu_create_directory($/;"	f	file:
mfu_create_file	src/common/mfu_flist_copy.c	/^static int mfu_create_file($/;"	f	file:
mfu_create_files	src/common/mfu_flist_copy.c	/^static int mfu_create_files($/;"	f	file:
mfu_create_fully_striped	src/common/mfu_bz2.c	/^int mfu_create_fully_striped(const char* name, mode_t mode)$/;"	f
mfu_create_hardlink	src/common/mfu_flist_copy.c	/^static int mfu_create_hardlink($/;"	f	file:
mfu_create_hardlinks	src/common/mfu_flist_copy.c	/^static int mfu_create_hardlinks($/;"	f	file:
mfu_create_link	src/common/mfu_flist_copy.c	/^static int mfu_create_link($/;"	f	file:
mfu_create_opts_delete	src/common/mfu_flist_create.c	/^void mfu_create_opts_delete(mfu_create_opts_t** popts)$/;"	f
mfu_create_opts_new	src/common/mfu_flist_create.c	/^mfu_create_opts_t* mfu_create_opts_new(void)$/;"	f
mfu_create_opts_t	src/common/mfu_flist.h	/^} mfu_create_opts_t;$/;"	t	typeref:struct:__anon8
mfu_create_output	src/common/mfu_bz2.c	/^static int mfu_create_output(const char* name, mode_t mode)$/;"	f	file:
mfu_daos_destroy_snap	src/common/mfu_daos.c	/^static inline int mfu_daos_destroy_snap(daos_handle_t coh, daos_epoch_t epoch)$/;"	f	file:
mfu_daos_flist_obj_sync	src/common/mfu_daos.c	/^static int mfu_daos_flist_obj_sync($/;"	f	file:
mfu_daos_flist_sync	src/common/mfu_daos.c	/^int mfu_daos_flist_sync($/;"	f
mfu_daos_flist_walk	src/common/mfu_daos.c	/^int mfu_daos_flist_walk($/;"	f
mfu_daos_hdf5_copy	src/common/mfu_daos.c	/^int mfu_daos_hdf5_copy(char **argpaths,$/;"	f
mfu_daos_obj_list_oids	src/common/mfu_daos.c	/^static int mfu_daos_obj_list_oids($/;"	f	file:
mfu_daos_obj_sync	src/common/mfu_daos.c	/^static int mfu_daos_obj_sync($/;"	f	file:
mfu_daos_obj_sync_keys	src/common/mfu_daos.c	/^static int mfu_daos_obj_sync_keys($/;"	f	file:
mfu_daos_obj_sync_recx_array	src/common/mfu_daos.c	/^static int mfu_daos_obj_sync_recx_array($/;"	f	file:
mfu_daos_obj_sync_recx_single	src/common/mfu_daos.c	/^static int mfu_daos_obj_sync_recx_single($/;"	f	file:
mfu_daos_stats	src/common/mfu_daos.h	/^typedef struct mfu_daos_stats {$/;"	s
mfu_daos_stats_end	src/common/mfu_daos.c	/^void mfu_daos_stats_end(mfu_daos_stats_t* stats)$/;"	f
mfu_daos_stats_init	src/common/mfu_daos.c	/^void mfu_daos_stats_init(mfu_daos_stats_t* stats)$/;"	f
mfu_daos_stats_print	src/common/mfu_daos.c	/^void mfu_daos_stats_print($/;"	f
mfu_daos_stats_print_sum	src/common/mfu_daos.c	/^void mfu_daos_stats_print_sum($/;"	f
mfu_daos_stats_start	src/common/mfu_daos.c	/^void mfu_daos_stats_start(mfu_daos_stats_t* stats)$/;"	f
mfu_daos_stats_sum	src/common/mfu_daos.c	/^void mfu_daos_stats_sum(mfu_daos_stats_t* stats, mfu_daos_stats_t* stats_sum)$/;"	f
mfu_daos_stats_t	src/common/mfu_daos.h	/^} mfu_daos_stats_t;$/;"	t	typeref:struct:mfu_daos_stats
mfu_debug_level	src/common/mfu_util.c	/^mfu_loglevel mfu_debug_level = MFU_LOG_ERR;$/;"	v
mfu_debug_stream	src/common/mfu_util.c	/^FILE* mfu_debug_stream = NULL;$/;"	v
mfu_decompress_bz2	src/common/mfu_bz2.c	/^int mfu_decompress_bz2(const char* src_name, const char* dst_name)$/;"	f
mfu_decompress_bz2_libcircle	src/common/mfu_decompress_bz2_libcircle.c	/^int mfu_decompress_bz2_libcircle(const char* src, const char* dst)$/;"	f
mfu_decompress_bz2_static	src/common/mfu_bz2_static.c	/^int mfu_decompress_bz2_static(const char* src_name, const char* dst_name)$/;"	f
mfu_dfs_mount	src/common/mfu_daos.c	/^static int mfu_dfs_mount($/;"	f	file:
mfu_dfs_umount	src/common/mfu_daos.c	/^static int mfu_dfs_umount($/;"	f	file:
mfu_errno2rc	src/common/mfu_errors.h	/^static inline int mfu_errno2rc(int err)$/;"	f
mfu_faccessat	src/common/mfu_io.c	/^int mfu_faccessat(int dirfd, const char* path, int amode, int flags)$/;"	f
mfu_file_access	src/common/mfu_io.c	/^int mfu_file_access(const char* path, int amode, mfu_file_t* mfu_file)$/;"	f
mfu_file_chmod	src/common/mfu_io.c	/^int mfu_file_chmod(const char* path, mode_t mode, mfu_file_t* mfu_file)$/;"	f
mfu_file_chunk	src/common/mfu_flist.h	/^} mfu_file_chunk;$/;"	t	typeref:struct:mfu_file_chunk_struct
mfu_file_chunk_list_alloc	src/common/mfu_flist_chunk.c	/^mfu_file_chunk* mfu_file_chunk_list_alloc(mfu_flist list, uint64_t chunk_size)$/;"	f
mfu_file_chunk_list_free	src/common/mfu_flist_chunk.c	/^void mfu_file_chunk_list_free(mfu_file_chunk** phead)$/;"	f
mfu_file_chunk_list_lor	src/common/mfu_flist_chunk.c	/^void mfu_file_chunk_list_lor(mfu_flist list, const mfu_file_chunk* head, const int* vals, int* results)$/;"	f
mfu_file_chunk_list_size	src/common/mfu_flist_chunk.c	/^uint64_t mfu_file_chunk_list_size(const mfu_file_chunk* p)$/;"	f
mfu_file_chunk_struct	src/common/mfu_flist.h	/^typedef struct mfu_file_chunk_struct {$/;"	s
mfu_file_close	src/common/mfu_io.c	/^int mfu_file_close(const char* file, mfu_file_t* mfu_file)$/;"	f
mfu_file_closedir	src/common/mfu_io.c	/^int mfu_file_closedir(DIR* dirp, mfu_file_t* mfu_file)$/;"	f
mfu_file_delete	src/common/mfu_flist_copy.c	/^void mfu_file_delete(mfu_file_t** pfile)$/;"	f
mfu_file_faccessat	src/common/mfu_io.c	/^int mfu_file_faccessat(int dirfd, const char* path, int amode, int flags, mfu_file_t* mfu_file)$/;"	f
mfu_file_ftruncate	src/common/mfu_io.c	/^int mfu_file_ftruncate(mfu_file_t* mfu_file, off_t length)$/;"	f
mfu_file_getxattr	src/common/mfu_io.c	/^ssize_t mfu_file_getxattr(const char* path, const char* name, void* value, size_t size, mfu_file_t* mfu_file)$/;"	f
mfu_file_lchown	src/common/mfu_io.c	/^int mfu_file_lchown(const char* path, uid_t owner, gid_t group, mfu_file_t* mfu_file)$/;"	f
mfu_file_lgetxattr	src/common/mfu_io.c	/^ssize_t mfu_file_lgetxattr(const char* path, const char* name, void* value, size_t size, mfu_file_t* mfu_file)$/;"	f
mfu_file_listxattr	src/common/mfu_io.c	/^ssize_t mfu_file_listxattr(const char* path, char* list, size_t size, mfu_file_t* mfu_file)$/;"	f
mfu_file_llistxattr	src/common/mfu_io.c	/^ssize_t mfu_file_llistxattr(const char* path, char* list, size_t size, mfu_file_t* mfu_file)$/;"	f
mfu_file_lseek	src/common/mfu_io.c	/^off_t mfu_file_lseek(const char* file, mfu_file_t* mfu_file, off_t pos, int whence)$/;"	f
mfu_file_lsetxattr	src/common/mfu_io.c	/^int mfu_file_lsetxattr(const char* path, const char* name, const void* value, size_t size, int flags,$/;"	f
mfu_file_lstat	src/common/mfu_io.c	/^int mfu_file_lstat(const char* path, struct stat* buf, mfu_file_t* mfu_file)$/;"	f
mfu_file_mkdir	src/common/mfu_io.c	/^int mfu_file_mkdir(const char* dir, mode_t mode, mfu_file_t* mfu_file)$/;"	f
mfu_file_mknod	src/common/mfu_io.c	/^int mfu_file_mknod(const char* path, mode_t mode, dev_t dev, mfu_file_t* mfu_file)$/;"	f
mfu_file_new	src/common/mfu_flist_copy.c	/^mfu_file_t* mfu_file_new(void)$/;"	f
mfu_file_open	src/common/mfu_io.c	/^int mfu_file_open(const char* file, int flags, mfu_file_t* mfu_file, ...)$/;"	f
mfu_file_opendir	src/common/mfu_io.c	/^DIR* mfu_file_opendir(const char* dir, mfu_file_t* mfu_file)$/;"	f
mfu_file_pread	src/common/mfu_io.c	/^ssize_t mfu_file_pread(const char* file, void* buf, size_t size, off_t offset, mfu_file_t* mfu_file)$/;"	f
mfu_file_pwrite	src/common/mfu_io.c	/^ssize_t mfu_file_pwrite(const char* file, const void* buf, size_t size, off_t offset, mfu_file_t* mfu_file)$/;"	f
mfu_file_read	src/common/mfu_io.c	/^ssize_t mfu_file_read(const char* file, void* buf, size_t size, mfu_file_t* mfu_file)$/;"	f
mfu_file_readdir	src/common/mfu_io.c	/^struct dirent* mfu_file_readdir(DIR* dirp, mfu_file_t* mfu_file)$/;"	f
mfu_file_readlink	src/common/mfu_io.c	/^ssize_t mfu_file_readlink(const char* path, char* buf, size_t bufsize, mfu_file_t* mfu_file)$/;"	f
mfu_file_realpath	src/common/mfu_io.c	/^char* mfu_file_realpath(const char* path, char* resolved_path, mfu_file_t* mfu_file)$/;"	f
mfu_file_remove	src/common/mfu_io.c	/^int mfu_file_remove(const char* path, mfu_file_t* mfu_file)$/;"	f
mfu_file_rmdir	src/common/mfu_io.c	/^int mfu_file_rmdir(const char* dir, mfu_file_t* mfu_file)$/;"	f
mfu_file_stat	src/common/mfu_io.c	/^int mfu_file_stat(const char* path, struct stat* buf, mfu_file_t* mfu_file)$/;"	f
mfu_file_symlink	src/common/mfu_io.c	/^int mfu_file_symlink(const char* oldpath, const char* newpath, mfu_file_t* mfu_file)$/;"	f
mfu_file_t	src/common/mfu_param_path.h	/^} mfu_file_t;$/;"	t	typeref:struct:__anon24
mfu_file_truncate	src/common/mfu_io.c	/^int mfu_file_truncate(const char* file, off_t length, mfu_file_t* mfu_file)$/;"	f
mfu_file_unlink	src/common/mfu_io.c	/^int mfu_file_unlink(const char* file, mfu_file_t* mfu_file)$/;"	f
mfu_file_utimensat	src/common/mfu_io.c	/^int mfu_file_utimensat(int dirfd, const char* pathname, const struct timespec times[2], int flags,$/;"	f
mfu_file_write	src/common/mfu_io.c	/^ssize_t mfu_file_write(const char* file, const void* buf, size_t size, mfu_file_t* mfu_file)$/;"	f
mfu_filetype	src/common/mfu_flist.h	/^} mfu_filetype;$/;"	t	typeref:enum:mfu_filetypes_e
mfu_filetypes_e	src/common/mfu_flist.h	/^typedef enum mfu_filetypes_e {$/;"	g
mfu_fill_file	src/common/mfu_flist_copy.c	/^static int mfu_fill_file($/;"	f	file:
mfu_finalize	src/common/mfu_util.c	/^int mfu_finalize()$/;"	f
mfu_flist	src/common/mfu_flist.h	/^typedef void* mfu_flist;$/;"	t
mfu_flist_archive_create	src/common/mfu_flist_archive.c	/^int mfu_flist_archive_create($/;"	f
mfu_flist_archive_create_algo	src/common/mfu_flist_archive.c	/^} mfu_flist_archive_create_algo;$/;"	t	typeref:enum:__anon16	file:
mfu_flist_archive_create_copy_chunk	src/common/mfu_flist_archive.c	/^static int mfu_flist_archive_create_copy_chunk($/;"	f	file:
mfu_flist_archive_create_copy_libcircle	src/common/mfu_flist_archive.c	/^static int mfu_flist_archive_create_copy_libcircle($/;"	f	file:
mfu_flist_archive_extract	src/common/mfu_flist_archive.c	/^int mfu_flist_archive_extract($/;"	f
mfu_flist_archive_extract_algo	src/common/mfu_flist_archive.c	/^} mfu_flist_archive_extract_algo;$/;"	t	typeref:enum:__anon18	file:
mfu_flist_archive_index_algo	src/common/mfu_flist_archive.c	/^} mfu_flist_archive_index_algo;$/;"	t	typeref:enum:__anon15	file:
mfu_flist_archive_scan_algo	src/common/mfu_flist_archive.c	/^} mfu_flist_archive_scan_algo;$/;"	t	typeref:enum:__anon17	file:
mfu_flist_array_by_depth	src/common/mfu_flist.c	/^void mfu_flist_array_by_depth($/;"	f
mfu_flist_array_free	src/common/mfu_flist.c	/^void mfu_flist_array_free(int levels, mfu_flist** outlists)$/;"	f
mfu_flist_chmod	src/common/mfu_flist_chmod.c	/^void mfu_flist_chmod($/;"	f
mfu_flist_compute_depth	src/common/mfu_flist.c	/^int mfu_flist_compute_depth(const char* path)$/;"	f
mfu_flist_copy	src/common/mfu_flist_copy.c	/^int mfu_flist_copy($/;"	f
mfu_flist_file_copy	src/common/mfu_flist.c	/^void mfu_flist_file_copy(mfu_flist bsrc, uint64_t idx, mfu_flist bdst)$/;"	f
mfu_flist_file_create	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_create(mfu_flist bflist)$/;"	f
mfu_flist_file_create_stat	src/common/mfu_flist.c	/^int mfu_flist_file_create_stat(mfu_flist bflist, const char* path)$/;"	f
mfu_flist_file_get_acl	src/common/mfu_flist.c	/^void *mfu_flist_file_get_acl(mfu_flist bflist, uint64_t idx, ssize_t *acl_size, char *type)$/;"	f
mfu_flist_file_get_atime	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_atime(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_atime_nsec	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_atime_nsec(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_ctime	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_ctime(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_ctime_nsec	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_ctime_nsec(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_depth	src/common/mfu_flist.c	/^int mfu_flist_file_get_depth(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_gid	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_gid(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_groupname	src/common/mfu_flist.c	/^const char* mfu_flist_file_get_groupname(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_mode	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_mode(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_mtime	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_mtime(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_mtime_nsec	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_mtime_nsec(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_name	src/common/mfu_flist.c	/^const char* mfu_flist_file_get_name(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_oid_high	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_oid_high(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_oid_low	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_oid_low(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_perm	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_perm(mfu_flist bflist, uint64_t idx) {$/;"	f
mfu_flist_file_get_size	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_size(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_type	src/common/mfu_flist.c	/^mfu_filetype mfu_flist_file_get_type(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_uid	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_get_uid(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_get_username	src/common/mfu_flist.c	/^const char* mfu_flist_file_get_username(mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_max_name	src/common/mfu_flist.c	/^uint64_t mfu_flist_file_max_name(mfu_flist bflist)$/;"	f
mfu_flist_file_pack	src/common/mfu_flist.c	/^size_t mfu_flist_file_pack(void* buf, mfu_flist bflist, uint64_t idx)$/;"	f
mfu_flist_file_pack_size	src/common/mfu_flist.c	/^size_t mfu_flist_file_pack_size(mfu_flist bflist)$/;"	f
mfu_flist_file_set_atime	src/common/mfu_flist.c	/^void mfu_flist_file_set_atime(mfu_flist bflist, uint64_t idx, uint64_t atime)$/;"	f
mfu_flist_file_set_atime_nsec	src/common/mfu_flist.c	/^void mfu_flist_file_set_atime_nsec(mfu_flist bflist, uint64_t idx, uint64_t atime_nsec)$/;"	f
mfu_flist_file_set_cont	src/common/mfu_flist.c	/^void mfu_flist_file_set_cont(mfu_flist bflist, uint64_t idx, const char* name)$/;"	f
mfu_flist_file_set_ctime	src/common/mfu_flist.c	/^void mfu_flist_file_set_ctime(mfu_flist bflist, uint64_t idx, uint64_t ctime)$/;"	f
mfu_flist_file_set_ctime_nsec	src/common/mfu_flist.c	/^void mfu_flist_file_set_ctime_nsec(mfu_flist bflist, uint64_t idx, uint64_t ctime_nsec)$/;"	f
mfu_flist_file_set_detail	src/common/mfu_flist.c	/^void mfu_flist_file_set_detail(mfu_flist bflist, uint64_t idx, int detail)$/;"	f
mfu_flist_file_set_gid	src/common/mfu_flist.c	/^void mfu_flist_file_set_gid(mfu_flist bflist, uint64_t idx, uint64_t gid)$/;"	f
mfu_flist_file_set_mode	src/common/mfu_flist.c	/^void mfu_flist_file_set_mode(mfu_flist bflist, uint64_t idx, uint64_t mode)$/;"	f
mfu_flist_file_set_mtime	src/common/mfu_flist.c	/^void mfu_flist_file_set_mtime(mfu_flist bflist, uint64_t idx, uint64_t mtime)$/;"	f
mfu_flist_file_set_mtime_nsec	src/common/mfu_flist.c	/^void mfu_flist_file_set_mtime_nsec(mfu_flist bflist, uint64_t idx, uint64_t mtime_nsec)$/;"	f
mfu_flist_file_set_name	src/common/mfu_flist.c	/^void mfu_flist_file_set_name(mfu_flist bflist, uint64_t idx, const char* name)$/;"	f
mfu_flist_file_set_oid	src/common/mfu_flist.c	/^void mfu_flist_file_set_oid(mfu_flist bflist, uint64_t idx, daos_obj_id_t oid)$/;"	f
mfu_flist_file_set_size	src/common/mfu_flist.c	/^void mfu_flist_file_set_size(mfu_flist bflist, uint64_t idx, uint64_t size)$/;"	f
mfu_flist_file_set_type	src/common/mfu_flist.c	/^void mfu_flist_file_set_type(mfu_flist bflist, uint64_t idx, mfu_filetype type)$/;"	f
mfu_flist_file_set_uid	src/common/mfu_flist.c	/^void mfu_flist_file_set_uid(mfu_flist bflist, uint64_t idx, uint64_t uid)$/;"	f
mfu_flist_file_sync_meta	src/common/mfu_flist_copy.c	/^int mfu_flist_file_sync_meta(mfu_flist src_list, uint64_t src_index,$/;"	f
mfu_flist_file_unpack	src/common/mfu_flist.c	/^size_t mfu_flist_file_unpack(const void* buf, mfu_flist bflist)$/;"	f
mfu_flist_fill	src/common/mfu_flist_copy.c	/^int mfu_flist_fill(mfu_flist list, mfu_copy_opts_t* copy_opts, mfu_file_t* mfu_file)$/;"	f
mfu_flist_filter_pred	src/common/mfu_flist.c	/^mfu_flist mfu_flist_filter_pred(mfu_flist flist, mfu_pred* p)$/;"	f
mfu_flist_filter_regex	src/common/mfu_flist.c	/^mfu_flist mfu_flist_filter_regex(mfu_flist flist, const char* regex_exp, int exclude, int name)$/;"	f
mfu_flist_free	src/common/mfu_flist.c	/^void mfu_flist_free(mfu_flist* pbflist)$/;"	f
mfu_flist_global_offset	src/common/mfu_flist.c	/^uint64_t mfu_flist_global_offset(mfu_flist bflist)$/;"	f
mfu_flist_global_size	src/common/mfu_flist.c	/^uint64_t mfu_flist_global_size(mfu_flist bflist)$/;"	f
mfu_flist_group_count	src/common/mfu_flist.c	/^uint64_t mfu_flist_group_count(mfu_flist bflist)$/;"	f
mfu_flist_group_max_name	src/common/mfu_flist.c	/^uint64_t mfu_flist_group_max_name(mfu_flist bflist)$/;"	f
mfu_flist_hardlink	src/common/mfu_flist_copy.c	/^int mfu_flist_hardlink($/;"	f
mfu_flist_have_detail	src/common/mfu_flist.c	/^int mfu_flist_have_detail(mfu_flist bflist)$/;"	f
mfu_flist_increase	src/common/mfu_flist.c	/^void mfu_flist_increase(mfu_flist* pbflist)$/;"	f
mfu_flist_insert_elem	src/common/mfu_flist.c	/^void mfu_flist_insert_elem(flist_t* flist, elem_t* elem)$/;"	f
mfu_flist_insert_stat	src/common/mfu_flist.c	/^void mfu_flist_insert_stat(flist_t* flist, const char* fpath, mode_t mode, const struct stat* sb)$/;"	f
mfu_flist_map_fn	src/common/mfu_flist.h	/^typedef int (*mfu_flist_map_fn)(mfu_flist flist, uint64_t index, int ranks, const void* args);$/;"	t
mfu_flist_max_depth	src/common/mfu_flist.c	/^int mfu_flist_max_depth(mfu_flist bflist)$/;"	f
mfu_flist_metadata_apply	src/common/mfu_flist_create.c	/^void mfu_flist_metadata_apply(mfu_flist flist, mfu_create_opts_t* opts)$/;"	f
mfu_flist_min_depth	src/common/mfu_flist.c	/^int mfu_flist_min_depth(mfu_flist bflist)$/;"	f
mfu_flist_mkdir	src/common/mfu_flist_create.c	/^void mfu_flist_mkdir(mfu_flist flist, mfu_create_opts_t* opts)$/;"	f
mfu_flist_mknod	src/common/mfu_flist_create.c	/^void mfu_flist_mknod(mfu_flist flist, mfu_create_opts_t* opts)$/;"	f
mfu_flist_mode_to_filetype	src/common/mfu_flist.c	/^mfu_filetype mfu_flist_mode_to_filetype(mode_t mode)$/;"	f
mfu_flist_new	src/common/mfu_flist.c	/^mfu_flist mfu_flist_new()$/;"	f
mfu_flist_pred	src/dfind/dfind.c	/^static void mfu_flist_pred(mfu_flist flist, mfu_pred* p)$/;"	f	file:
mfu_flist_print	src/common/mfu_flist.c	/^void mfu_flist_print(mfu_flist flist)$/;"	f
mfu_flist_print_summary	src/common/mfu_flist.c	/^void mfu_flist_print_summary(mfu_flist flist)$/;"	f
mfu_flist_read_cache	src/common/mfu_flist_io.c	/^void mfu_flist_read_cache($/;"	f
mfu_flist_remap	src/common/mfu_flist.c	/^mfu_flist mfu_flist_remap(mfu_flist list, mfu_flist_map_fn map, const void* args)$/;"	f
mfu_flist_set_detail	src/common/mfu_flist.c	/^void mfu_flist_set_detail (mfu_flist bflist, int detail)$/;"	f
mfu_flist_size	src/common/mfu_flist.c	/^uint64_t mfu_flist_size(mfu_flist bflist)$/;"	f
mfu_flist_skip_args	src/common/mfu_flist.h	/^struct mfu_flist_skip_args {$/;"	s
mfu_flist_skip_fn	src/common/mfu_flist.h	/^typedef int (*mfu_flist_skip_fn) (const char* path, void *args);$/;"	t
mfu_flist_sort	src/common/mfu_flist_sort.c	/^mfu_flist mfu_flist_sort(const char* sortfields, mfu_flist flist)$/;"	f
mfu_flist_spread	src/common/mfu_flist.c	/^mfu_flist mfu_flist_spread(mfu_flist flist)$/;"	f
mfu_flist_stat	src/common/mfu_flist_walk.c	/^void mfu_flist_stat($/;"	f
mfu_flist_subset	src/common/mfu_flist.c	/^mfu_flist mfu_flist_subset(mfu_flist src)$/;"	f
mfu_flist_summarize	src/common/mfu_flist.c	/^int mfu_flist_summarize(mfu_flist bflist)$/;"	f
mfu_flist_unlink	src/common/mfu_flist_remove.c	/^void mfu_flist_unlink(mfu_flist flist, bool traceless, mfu_file_t* mfu_file)$/;"	f
mfu_flist_user_count	src/common/mfu_flist.c	/^uint64_t mfu_flist_user_count(mfu_flist bflist)$/;"	f
mfu_flist_user_max_name	src/common/mfu_flist.c	/^uint64_t mfu_flist_user_max_name(mfu_flist bflist)$/;"	f
mfu_flist_usrgrp_copy	src/common/mfu_flist_usrgrp.c	/^void mfu_flist_usrgrp_copy(flist_t* srclist, flist_t* flist)$/;"	f
mfu_flist_usrgrp_create_map	src/common/mfu_flist_usrgrp.c	/^void mfu_flist_usrgrp_create_map(const buf_t* items, strmap* id2name)$/;"	f
mfu_flist_usrgrp_create_stridtype	src/common/mfu_flist_usrgrp.c	/^void mfu_flist_usrgrp_create_stridtype(int chars, MPI_Datatype* dt)$/;"	f
mfu_flist_usrgrp_free	src/common/mfu_flist_usrgrp.c	/^void mfu_flist_usrgrp_free(flist_t* flist)$/;"	f
mfu_flist_usrgrp_get_groups	src/common/mfu_flist_usrgrp.c	/^void mfu_flist_usrgrp_get_groups(flist_t* flist)$/;"	f
mfu_flist_usrgrp_get_name_from_id	src/common/mfu_flist_usrgrp.c	/^const char* mfu_flist_usrgrp_get_name_from_id(strmap* id2name, uint64_t id)$/;"	f
mfu_flist_usrgrp_get_users	src/common/mfu_flist_usrgrp.c	/^void mfu_flist_usrgrp_get_users(flist_t* flist)$/;"	f
mfu_flist_usrgrp_init	src/common/mfu_flist_usrgrp.c	/^void mfu_flist_usrgrp_init(flist_t* flist)$/;"	f
mfu_flist_walk_param_paths	src/common/mfu_flist_walk.c	/^void mfu_flist_walk_param_paths(uint64_t num,$/;"	f
mfu_flist_walk_path	src/common/mfu_flist_walk.c	/^void mfu_flist_walk_path(const char* dirpath,$/;"	f
mfu_flist_walk_paths	src/common/mfu_flist_walk.c	/^void mfu_flist_walk_paths(uint64_t num_paths, const char** paths,$/;"	f
mfu_flist_write_cache	src/common/mfu_flist_io.c	/^void mfu_flist_write_cache($/;"	f
mfu_flist_write_text	src/common/mfu_flist_io.c	/^void mfu_flist_write_text($/;"	f
mfu_format_1000	src/common/mfu_util.c	/^static void mfu_format_1000($/;"	f	file:
mfu_format_1024	src/common/mfu_util.c	/^static void mfu_format_1024($/;"	f	file:
mfu_format_bw	src/common/mfu_util.c	/^void mfu_format_bw(double bw, double* val, const char** units)$/;"	f
mfu_format_bytes	src/common/mfu_util.c	/^void mfu_format_bytes(uint64_t bytes, double* val, const char** units)$/;"	f
mfu_format_count	src/common/mfu_util.c	/^void mfu_format_count(uint64_t count, double* val, const char** units)$/;"	f
mfu_format_mode	src/common/mfu_util.c	/^void mfu_format_mode(mode_t mode, char* buf)$/;"	f
mfu_free	src/common/mfu_util.c	/^void mfu_free(void* p)$/;"	f
mfu_fsync	src/common/mfu_io.c	/^int mfu_fsync(const char* file, int fd)$/;"	f
mfu_ftruncate	src/common/mfu_io.c	/^int mfu_ftruncate(int fd, off_t length)$/;"	f
mfu_get_start_count	src/common/mfu_util.c	/^void mfu_get_start_count($/;"	f
mfu_getcwd	src/common/mfu_io.c	/^void mfu_getcwd(char* buf, size_t size)$/;"	f
mfu_getxattr	src/common/mfu_io.c	/^ssize_t mfu_getxattr(const char* path, const char* name, void* value, size_t size)$/;"	f
mfu_hardlink	src/common/mfu_io.c	/^int mfu_hardlink(const char* oldpath, const char* newpath)$/;"	f
mfu_hash_jenkins	src/common/mfu_util.c	/^uint32_t mfu_hash_jenkins(const char* key, size_t len)$/;"	f
mfu_hton16	src/common/mfu_util.h	43;"	d
mfu_hton16	src/common/mfu_util.h	50;"	d
mfu_hton16	src/common/mfu_util.h	58;"	d
mfu_hton32	src/common/mfu_util.h	44;"	d
mfu_hton32	src/common/mfu_util.h	51;"	d
mfu_hton32	src/common/mfu_util.h	59;"	d
mfu_hton64	src/common/mfu_util.h	45;"	d
mfu_hton64	src/common/mfu_util.h	52;"	d
mfu_hton64	src/common/mfu_util.h	60;"	d
mfu_init	src/common/mfu_util.c	/^int mfu_init()$/;"	f
mfu_initialized	src/common/mfu_util.c	/^int mfu_initialized = 0;$/;"	v
mfu_is_all_null	src/common/mfu_flist_copy.c	/^static int mfu_is_all_null(const char* buf, uint64_t buf_size)$/;"	f	file:
mfu_is_lustre	src/common/mfu_util.c	/^bool mfu_is_lustre(const char* path)$/;"	f
mfu_lchown	src/common/mfu_io.c	/^int mfu_lchown(const char* path, uid_t owner, gid_t group)$/;"	f
mfu_lgetxattr	src/common/mfu_io.c	/^ssize_t mfu_lgetxattr(const char* path, const char* name, void* value, size_t size)$/;"	f
mfu_listxattr	src/common/mfu_io.c	/^ssize_t mfu_listxattr(const char* path, char* list, size_t size)$/;"	f
mfu_llistxattr	src/common/mfu_io.c	/^ssize_t mfu_llistxattr(const char* path, char* list, size_t size)$/;"	f
mfu_loglevel	src/common/mfu_util.h	/^} mfu_loglevel;$/;"	t	typeref:enum:__anon32
mfu_lseek	src/common/mfu_io.c	/^off_t mfu_lseek(const char* file, int fd, off_t pos, int whence)$/;"	f
mfu_lsetxattr	src/common/mfu_io.c	/^int mfu_lsetxattr(const char* path, const char* name, const void* value, size_t size, int flags)$/;"	f
mfu_lstat	src/common/mfu_io.c	/^int mfu_lstat(const char* path, struct stat* buf) {$/;"	f
mfu_lstat64	src/common/mfu_io.c	/^int mfu_lstat64(const char* path, struct stat64* buf)$/;"	f
mfu_malloc	src/common/mfu_util.c	/^void* mfu_malloc(size_t size, const char* file, int line)$/;"	f
mfu_memalign	src/common/mfu_util.c	/^void* mfu_memalign(size_t size, size_t alignment, const char* file, int line)$/;"	f
mfu_mkdir	src/common/mfu_io.c	/^int mfu_mkdir(const char* dir, mode_t mode)$/;"	f
mfu_mknod	src/common/mfu_io.c	/^int mfu_mknod(const char* path, mode_t mode, dev_t dev)$/;"	f
mfu_ntoh16	src/common/mfu_util.h	40;"	d
mfu_ntoh16	src/common/mfu_util.h	47;"	d
mfu_ntoh16	src/common/mfu_util.h	55;"	d
mfu_ntoh32	src/common/mfu_util.h	41;"	d
mfu_ntoh32	src/common/mfu_util.h	48;"	d
mfu_ntoh32	src/common/mfu_util.h	56;"	d
mfu_ntoh64	src/common/mfu_util.h	42;"	d
mfu_ntoh64	src/common/mfu_util.h	49;"	d
mfu_ntoh64	src/common/mfu_util.h	57;"	d
mfu_open	src/common/mfu_io.c	/^int mfu_open(const char* file, int flags, ...)$/;"	f
mfu_opendir	src/common/mfu_io.c	/^DIR* mfu_opendir(const char* dir)$/;"	f
mfu_pack_io_uint32	src/common/mfu_flist_io.c	/^static void mfu_pack_io_uint32(char** pptr, uint32_t value)$/;"	f	file:
mfu_pack_io_uint64	src/common/mfu_flist_io.c	/^static void mfu_pack_io_uint64(char** pptr, uint64_t value)$/;"	f	file:
mfu_pack_param	src/common/mfu_param_path.c	/^static void mfu_pack_param(char** pptr, const mfu_param_path* param)$/;"	f	file:
mfu_pack_param_size	src/common/mfu_param_path.c	/^static size_t mfu_pack_param_size(const mfu_param_path* param)$/;"	f	file:
mfu_pack_stat	src/common/mfu_param_path.c	/^static void mfu_pack_stat(char** pptr, const struct stat* s)$/;"	f	file:
mfu_pack_stat_size	src/common/mfu_param_path.c	/^static size_t mfu_pack_stat_size(void)$/;"	f	file:
mfu_pack_str	src/common/mfu_param_path.c	/^static void mfu_pack_str(char** pptr, const char* str)$/;"	f	file:
mfu_pack_str_size	src/common/mfu_param_path.c	/^static size_t mfu_pack_str_size(const char* str)$/;"	f	file:
mfu_pack_uint32	src/common/mfu_util.c	/^void mfu_pack_uint32(char** pptr, uint32_t value)$/;"	f
mfu_pack_uint64	src/common/mfu_util.c	/^void mfu_pack_uint64(char** pptr, uint64_t value)$/;"	f
mfu_param_path	src/common/mfu_param_path.h	/^} mfu_param_path;$/;"	t	typeref:struct:mfu_param_path_t
mfu_param_path_check_archive	src/common/mfu_flist_archive.c	/^void mfu_param_path_check_archive($/;"	f
mfu_param_path_check_copy	src/common/mfu_param_path.c	/^void mfu_param_path_check_copy(uint64_t num, const mfu_param_path* paths, $/;"	f
mfu_param_path_copy_dest	src/common/mfu_param_path.c	/^char* mfu_param_path_copy_dest(const char* name, int numpaths,$/;"	f
mfu_param_path_free	src/common/mfu_param_path.c	/^void mfu_param_path_free(mfu_param_path* param)$/;"	f
mfu_param_path_free_all	src/common/mfu_param_path.c	/^void mfu_param_path_free_all(uint64_t num, mfu_param_path* params)$/;"	f
mfu_param_path_free_list	src/common/mfu_param_path.c	/^static void mfu_param_path_free_list(uint64_t num, mfu_param_path* params)$/;"	f	file:
mfu_param_path_init	src/common/mfu_param_path.c	/^static void mfu_param_path_init(mfu_param_path* param)$/;"	f	file:
mfu_param_path_relative	src/common/mfu_flist_archive.c	/^char* mfu_param_path_relative($/;"	f
mfu_param_path_set	src/common/mfu_param_path.c	/^void mfu_param_path_set(const char* path, mfu_param_path* param, mfu_file_t* mfu_file, bool warn)$/;"	f
mfu_param_path_set_all	src/common/mfu_param_path.c	/^void mfu_param_path_set_all($/;"	f
mfu_param_path_t	src/common/mfu_param_path.h	/^typedef struct mfu_param_path_t {$/;"	s
mfu_path	src/common/mfu_path.h	/^} mfu_path;$/;"	t	typeref:struct:__anon29
mfu_path_abs_reduce	src/common/mfu_path.c	/^mfu_path* mfu_path_abs_reduce(const mfu_path* path)$/;"	f
mfu_path_alloc	src/common/mfu_path.c	/^static mfu_path* mfu_path_alloc(void)$/;"	f	file:
mfu_path_alloc_strf	src/common/mfu_path.c	/^static char* mfu_path_alloc_strf(const char* format, va_list args1, va_list args2)$/;"	f	file:
mfu_path_append	src/common/mfu_path.c	/^int mfu_path_append(mfu_path* path1, const mfu_path* path2)$/;"	f
mfu_path_append_str	src/common/mfu_path.c	/^int mfu_path_append_str(mfu_path* path, const char* str)$/;"	f
mfu_path_append_strf	src/common/mfu_path.c	/^int mfu_path_append_strf(mfu_path* path, const char* format, ...)$/;"	f
mfu_path_basename	src/common/mfu_path.c	/^int mfu_path_basename(mfu_path* path)$/;"	f
mfu_path_cmp	src/common/mfu_path.c	/^mfu_path_result mfu_path_cmp(const mfu_path* src, const mfu_path* dst)$/;"	f
mfu_path_combine	src/common/mfu_path.c	/^static int mfu_path_combine(mfu_path* path1, int offset, mfu_path** ptr_path2)$/;"	f	file:
mfu_path_components	src/common/mfu_path.c	/^int mfu_path_components(const mfu_path* path)$/;"	f
mfu_path_cut	src/common/mfu_path.c	/^mfu_path* mfu_path_cut(mfu_path* path, int offset)$/;"	f
mfu_path_delete	src/common/mfu_path.c	/^int mfu_path_delete(mfu_path** ptr_path)$/;"	f
mfu_path_dirname	src/common/mfu_path.c	/^int mfu_path_dirname(mfu_path* path)$/;"	f
mfu_path_dup	src/common/mfu_path.c	/^mfu_path* mfu_path_dup(const mfu_path* path)$/;"	f
mfu_path_elem	src/common/mfu_path.h	/^} mfu_path_elem;$/;"	t	typeref:struct:mfu_path_elem_struct
mfu_path_elem_alloc	src/common/mfu_path.c	/^static mfu_path_elem* mfu_path_elem_alloc(void)$/;"	f	file:
mfu_path_elem_dup	src/common/mfu_path.c	/^static mfu_path_elem* mfu_path_elem_dup(const mfu_path_elem* elem)$/;"	f	file:
mfu_path_elem_extract	src/common/mfu_path.c	/^static int mfu_path_elem_extract(mfu_path* path, mfu_path_elem* elem)$/;"	f	file:
mfu_path_elem_free	src/common/mfu_path.c	/^static int mfu_path_elem_free(mfu_path_elem** ptr_elem)$/;"	f	file:
mfu_path_elem_index	src/common/mfu_path.c	/^static mfu_path_elem* mfu_path_elem_index(const mfu_path* path, int idx)$/;"	f	file:
mfu_path_elem_init	src/common/mfu_path.c	/^static inline int mfu_path_elem_init(mfu_path_elem* elem)$/;"	f	file:
mfu_path_elem_insert	src/common/mfu_path.c	/^static int mfu_path_elem_insert(mfu_path* path, int offset, mfu_path_elem* elem)$/;"	f	file:
mfu_path_elem_struct	src/common/mfu_path.h	/^typedef struct mfu_path_elem_struct {$/;"	s
mfu_path_from_str	src/common/mfu_path.c	/^mfu_path* mfu_path_from_str(const char* str)$/;"	f
mfu_path_from_strf	src/common/mfu_path.c	/^mfu_path* mfu_path_from_strf(const char* format, ...)$/;"	f
mfu_path_init	src/common/mfu_path.c	/^static inline int mfu_path_init(mfu_path* path)$/;"	f	file:
mfu_path_insert	src/common/mfu_path.c	/^int mfu_path_insert(mfu_path* path1, int offset, const mfu_path* path2)$/;"	f
mfu_path_insert_str	src/common/mfu_path.c	/^int mfu_path_insert_str(mfu_path* path, int offset, const char* str)$/;"	f
mfu_path_insert_strf	src/common/mfu_path.c	/^int mfu_path_insert_strf(mfu_path* path, int offset, const char* format, ...)$/;"	f
mfu_path_is_absolute	src/common/mfu_path.c	/^int mfu_path_is_absolute(const mfu_path* path)$/;"	f
mfu_path_is_null	src/common/mfu_path.c	/^int mfu_path_is_null(const mfu_path* path)$/;"	f
mfu_path_new	src/common/mfu_path.c	/^mfu_path* mfu_path_new()$/;"	f
mfu_path_prepend	src/common/mfu_path.c	/^int mfu_path_prepend(mfu_path* path1, const mfu_path* path2)$/;"	f
mfu_path_prepend_str	src/common/mfu_path.c	/^int mfu_path_prepend_str(mfu_path* path, const char* str)$/;"	f
mfu_path_prepend_strf	src/common/mfu_path.c	/^int mfu_path_prepend_strf(mfu_path* path, const char* format, ...)$/;"	f
mfu_path_reduce	src/common/mfu_path.c	/^int mfu_path_reduce(mfu_path* path)$/;"	f
mfu_path_relative	src/common/mfu_path.c	/^mfu_path* mfu_path_relative(const mfu_path* src, const mfu_path* dst)$/;"	f
mfu_path_result	src/common/mfu_path.h	/^} mfu_path_result;$/;"	t	typeref:enum:__anon30
mfu_path_slice	src/common/mfu_path.c	/^int mfu_path_slice(mfu_path* path, int offset, int length)$/;"	f
mfu_path_strcpy	src/common/mfu_path.c	/^size_t mfu_path_strcpy(char* buf, size_t n, const mfu_path* path)$/;"	f
mfu_path_strcpy_internal	src/common/mfu_path.c	/^static int mfu_path_strcpy_internal(char* buf, const mfu_path* path)$/;"	f	file:
mfu_path_strdup	src/common/mfu_path.c	/^char* mfu_path_strdup(const mfu_path* path)$/;"	f
mfu_path_strdup_abs_reduce_str	src/common/mfu_path.c	/^char* mfu_path_strdup_abs_reduce_str(const char* str)$/;"	f
mfu_path_strdup_reduce_str	src/common/mfu_path.c	/^char* mfu_path_strdup_reduce_str(const char* str)$/;"	f
mfu_path_strlen	src/common/mfu_path.c	/^size_t mfu_path_strlen(const mfu_path* path)$/;"	f
mfu_path_sub	src/common/mfu_path.c	/^mfu_path* mfu_path_sub(mfu_path* path, int offset, int length)$/;"	f
mfu_perms	src/common/mfu_flist.h	/^} mfu_perms;$/;"	t	typeref:struct:mfu_perms_t
mfu_perms_free	src/common/mfu_flist_chmod.c	/^void mfu_perms_free(mfu_perms** p_head)$/;"	f
mfu_perms_need_dir_rx	src/common/mfu_flist_chmod.c	/^void mfu_perms_need_dir_rx(const mfu_perms* head, mfu_walk_opts_t* walk_opts)$/;"	f
mfu_perms_parse	src/common/mfu_flist_chmod.c	/^int mfu_perms_parse(const char* modestr, mfu_perms** p_head)$/;"	f
mfu_perms_t	src/common/mfu_flist.h	/^typedef struct mfu_perms_t {$/;"	s
mfu_pread	src/common/mfu_io.c	/^ssize_t mfu_pread(const char* file, int fd, void* buf, size_t size, off_t offset)$/;"	f
mfu_pred	src/common/mfu_flist.h	/^} mfu_pred;$/;"	t	typeref:struct:mfu_pred_item_t
mfu_pred_add	src/common/mfu_pred.c	/^void mfu_pred_add(mfu_pred* head, mfu_pred_fn predicate, void* arg)$/;"	f
mfu_pred_execute	src/common/mfu_pred.c	/^int mfu_pred_execute (mfu_flist flist, uint64_t idx, const mfu_pred* root)$/;"	f
mfu_pred_fn	src/common/mfu_flist.h	/^typedef int (*mfu_pred_fn)(mfu_flist flist, uint64_t idx, void* arg);$/;"	t
mfu_pred_free	src/common/mfu_pred.c	/^void mfu_pred_free (mfu_pred** phead)$/;"	f
mfu_pred_item_t	src/common/mfu_flist.h	/^typedef struct mfu_pred_item_t {$/;"	s
mfu_pred_new	src/common/mfu_pred.c	/^mfu_pred* mfu_pred_new(void)$/;"	f
mfu_pred_now	src/common/mfu_pred.c	/^mfu_pred_times* mfu_pred_now(void)$/;"	f
mfu_pred_relative	src/common/mfu_pred.c	/^mfu_pred_times_rel* mfu_pred_relative(const char* str, const mfu_pred_times* t)$/;"	f
mfu_pred_times	src/common/mfu_pred.h	/^} mfu_pred_times;$/;"	t	typeref:struct:mfu_pred_times_t
mfu_pred_times_rel	src/common/mfu_pred.h	/^} mfu_pred_times_rel;$/;"	t	typeref:struct:mfu_pred_times_rel_t
mfu_pred_times_rel_t	src/common/mfu_pred.h	/^typedef struct mfu_pred_times_rel_t {$/;"	s
mfu_pred_times_t	src/common/mfu_pred.h	/^typedef struct mfu_pred_times_t {$/;"	s
mfu_progress	src/common/mfu_progress.h	/^} mfu_progress;$/;"	t	typeref:struct:__anon31
mfu_progress_complete	src/common/mfu_progress.c	/^void mfu_progress_complete(uint64_t* vals, mfu_progress** pprg)$/;"	f
mfu_progress_fn	src/common/mfu_progress.h	/^typedef void (*mfu_progress_fn)(const uint64_t* vals, int count, int complete, int ranks, double secs);$/;"	t
mfu_progress_reduce	src/common/mfu_progress.c	/^static void mfu_progress_reduce(uint64_t complete, uint64_t* vals, mfu_progress* prg)$/;"	f	file:
mfu_progress_start	src/common/mfu_progress.c	/^mfu_progress* mfu_progress_start(int secs, int count, MPI_Comm comm, mfu_progress_fn progfn)$/;"	f
mfu_progress_timeout	src/common/mfu_util.c	/^int mfu_progress_timeout = 10;$/;"	v
mfu_progress_update	src/common/mfu_progress.c	/^void mfu_progress_update(uint64_t* vals, mfu_progress* prg)$/;"	f
mfu_pwrite	src/common/mfu_io.c	/^ssize_t mfu_pwrite(const char* file, int fd, const void* buf, size_t size, off_t offset)$/;"	f
mfu_rank	src/common/mfu_util.c	/^int mfu_rank = -1;$/;"	v
mfu_read	src/common/mfu_io.c	/^ssize_t mfu_read(const char* file, int fd, void* buf, size_t size)$/;"	f
mfu_readdir	src/common/mfu_io.c	/^struct dirent* mfu_readdir(DIR* dirp)$/;"	f
mfu_readlink	src/common/mfu_io.c	/^ssize_t mfu_readlink(const char* path, char* buf, size_t bufsize)$/;"	f
mfu_realpath	src/common/mfu_io.c	/^char* mfu_realpath(const char* path, char* resolved_path)$/;"	f
mfu_remove	src/common/mfu_io.c	/^int mfu_remove(const char* path)$/;"	f
mfu_remove_algos	src/common/mfu_flist_remove.c	/^} mfu_remove_algos;$/;"	t	typeref:enum:mfu_remove_algos_t	file:
mfu_remove_algos_t	src/common/mfu_flist_remove.c	/^typedef enum mfu_remove_algos_t {$/;"	g	file:
mfu_rmdir	src/common/mfu_io.c	/^int mfu_rmdir(const char* dir)$/;"	f
mfu_set_ownership	src/common/mfu_flist_create.c	/^static int mfu_set_ownership($/;"	f	file:
mfu_set_permissions	src/common/mfu_flist_create.c	/^static int mfu_set_permissions($/;"	f	file:
mfu_set_stripes	src/common/mfu_flist_archive.c	/^static void mfu_set_stripes($/;"	f	file:
mfu_set_timestamps	src/common/mfu_flist_create.c	/^static int mfu_set_timestamps($/;"	f	file:
mfu_stat	src/common/mfu_io.c	/^int mfu_stat(const char* path, struct stat* buf) {$/;"	f
mfu_stat_get_atimes	src/common/mfu_util.c	/^void mfu_stat_get_atimes(const struct stat* sb, uint64_t* secs, uint64_t* nsecs)$/;"	f
mfu_stat_get_ctimes	src/common/mfu_util.c	/^void mfu_stat_get_ctimes (const struct stat* sb, uint64_t* secs, uint64_t* nsecs)$/;"	f
mfu_stat_get_mtimes	src/common/mfu_util.c	/^void mfu_stat_get_mtimes (const struct stat* sb, uint64_t* secs, uint64_t* nsecs)$/;"	f
mfu_stat_set_atimes	src/common/mfu_util.c	/^void mfu_stat_set_atimes (struct stat* sb, uint64_t secs, uint64_t nsecs)$/;"	f
mfu_stat_set_ctimes	src/common/mfu_util.c	/^void mfu_stat_set_ctimes (struct stat* sb, uint64_t secs, uint64_t nsecs)$/;"	f
mfu_stat_set_mtimes	src/common/mfu_util.c	/^void mfu_stat_set_mtimes (struct stat* sb, uint64_t secs, uint64_t nsecs)$/;"	f
mfu_strdup	src/common/mfu_util.c	/^char* mfu_strdup(const char* str, const char* file, int line)$/;"	f
mfu_strdupf	src/common/mfu_util.c	/^char* mfu_strdupf(const char* file, int line, const char* format, ...)$/;"	f
mfu_stripe_get	src/common/mfu_util.c	/^int mfu_stripe_get(const char *path, uint64_t *stripe_size, uint64_t *stripe_count)$/;"	f
mfu_stripe_set	src/common/mfu_util.c	/^void mfu_stripe_set(const char *path, uint64_t stripe_size, int stripe_count)$/;"	f
mfu_symlink	src/common/mfu_io.c	/^int mfu_symlink(const char* oldpath, const char* newpath)$/;"	f
mfu_sync_all	src/common/mfu_flist_copy.c	/^static void mfu_sync_all(const char* msg)$/;"	f	file:
mfu_truncate	src/common/mfu_io.c	/^int mfu_truncate(const char* file, off_t length)$/;"	f
mfu_unlink	src/common/mfu_io.c	/^int mfu_unlink(const char* file)$/;"	f
mfu_unpack_io_uint32	src/common/mfu_flist_io.c	/^static void mfu_unpack_io_uint32(const char** pptr, uint32_t* value)$/;"	f	file:
mfu_unpack_io_uint64	src/common/mfu_flist_io.c	/^static void mfu_unpack_io_uint64(const char** pptr, uint64_t* value)$/;"	f	file:
mfu_unpack_param	src/common/mfu_param_path.c	/^static void mfu_unpack_param(const char** pptr, mfu_param_path* param)$/;"	f	file:
mfu_unpack_stat	src/common/mfu_param_path.c	/^static void mfu_unpack_stat(const char** pptr, struct stat* s)$/;"	f	file:
mfu_unpack_str	src/common/mfu_param_path.c	/^static void mfu_unpack_str(const char** pptr, char** pstr)$/;"	f	file:
mfu_unpack_uint32	src/common/mfu_util.c	/^void mfu_unpack_uint32(const char** pptr, uint32_t* value)$/;"	f
mfu_unpack_uint64	src/common/mfu_util.c	/^void mfu_unpack_uint64(const char** pptr, uint64_t* value)$/;"	f
mfu_utimensat	src/common/mfu_io.c	/^int mfu_utimensat(int dirfd, const char* pathname, const struct timespec times[2], int flags)$/;"	f
mfu_walk_opts_delete	src/common/mfu_flist.c	/^void mfu_walk_opts_delete(mfu_walk_opts_t** popts)$/;"	f
mfu_walk_opts_new	src/common/mfu_flist.c	/^mfu_walk_opts_t* mfu_walk_opts_new(void)$/;"	f
mfu_walk_opts_t	src/common/mfu_param_path.h	/^} mfu_walk_opts_t;$/;"	t	typeref:struct:__anon26
mfu_write	src/common/mfu_io.c	/^ssize_t mfu_write(const char* file, int fd, const void* buf, size_t size)$/;"	f
min_depth	src/common/mfu_flist_internal.h	/^    int min_depth;           \/* minimum file depth *\/$/;"	m	struct:flist
mkdir_progress_fn	src/common/mfu_flist_copy.c	/^static void mkdir_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
mkdir_progress_fn	src/common/mfu_flist_create.c	/^static void mkdir_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
mkdir_total_count	src/common/mfu_flist_copy.c	/^static uint64_t mkdir_total_count;$/;"	v	file:
mkdir_total_count	src/common/mfu_flist_create.c	/^static uint64_t mkdir_total_count;$/;"	v	file:
mkdirp	src/dbcast/dbcast.c	/^int mkdirp(const char* path)$/;"	f
mknod_progress_fn	src/common/mfu_flist_create.c	/^static void mknod_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
mknod_total_count	src/common/mfu_flist_copy.c	/^static uint64_t mknod_total_count;$/;"	v	file:
mknod_total_count	src/common/mfu_flist_create.c	/^static uint64_t mknod_total_count;$/;"	v	file:
moab	test/legacy/dtest/dtest	/^import moab$/;"	i
mode	src/common/mfu_flist_internal.h	/^    uint64_t mode;          \/* stat mode *\/$/;"	m	struct:list_elem
mode_format	src/dsh/dsh.c	/^static char mode_format[11];$/;"	v	file:
mode_octal	src/common/mfu_flist.h	/^    long mode_octal;     \/* records octal mode (converted to an integer) *\/$/;"	m	struct:mfu_perms_t
mpi_rank	src/common/mfu_io.c	/^static int mpi_rank;$/;"	v	file:
mpi_type_fini	src/ddup/ddup.c	/^static void mpi_type_fini(MPI_Datatype* key, MPI_Datatype* keysat)$/;"	f	file:
mpi_type_init	src/ddup/ddup.c	/^static void mpi_type_init(MPI_Datatype* key, MPI_Datatype* keysat)$/;"	f	file:
mpierrlen	src/common/mfu_flist_io.c	/^static int mpierrlen;$/;"	v	file:
mpierrstr	src/common/mfu_flist_io.c	/^static char mpierrstr[MPI_MAX_ERROR_STRING];$/;"	v	file:
mpifu_path	test/tests/test_dchmod/test_octal.py	/^mpifu_path  = "~\/mpifileutils\/test\/tests\/test_dchmod\/test_octal.sh"$/;"	v
mpifu_path	test/tests/test_dcp/test_fiemap.py	/^mpifu_path     = "~\/mpifileutils\/test\/tests\/test_dcp\/test_fiemap.sh" $/;"	v
mpifu_path	test/tests/test_dsync/test_xattr.py	/^mpifu_path     = "~\/mpifileutils\/test\/tests\/test_dsync\/test_xattr.sh"$/;"	v
mtcmp_cmp_fini	src/ddup/ddup.c	/^static void mtcmp_cmp_fini(DTCMP_Op* cmp)$/;"	f	file:
mtcmp_cmp_init	src/ddup/ddup.c	/^static int mtcmp_cmp_init(DTCMP_Op* cmp)$/;"	f	file:
mtime	src/common/mfu_flist_internal.h	/^    uint64_t mtime;         \/* modify time *\/$/;"	m	struct:list_elem
mtime_nsec	src/common/mfu_flist_internal.h	/^    uint64_t mtime_nsec;    \/* modify time nanoseconds *\/$/;"	m	struct:list_elem
my_blocks	src/common/mfu_compress_bz2_libcircle.c	/^static struct block_info* my_blocks;$/;"	v	typeref:struct:block_info	file:
my_prev_blocks	src/common/mfu_compress_bz2_libcircle.c	/^static int64_t my_prev_blocks = 0;$/;"	v	file:
my_strcmp	src/common/mfu_flist_sort.c	/^static int my_strcmp(const void* a, const void* b)$/;"	f	file:
my_strcmp	src/dsh/dsh.c	/^static int my_strcmp(const void* a, const void* b)$/;"	f	file:
my_strcmp_rev	src/common/mfu_flist_sort.c	/^static int my_strcmp_rev(const void* a, const void* b)$/;"	f	file:
my_strcmp_rev	src/dsh/dsh.c	/^static int my_strcmp_rev(const void* a, const void* b)$/;"	f	file:
my_tot_blocks	src/common/mfu_compress_bz2_libcircle.c	/^static int64_t my_tot_blocks = 0;$/;"	v	file:
name	src/common/mfu_flist.h	/^  const char* name;        \/* full path to file name *\/$/;"	m	struct:mfu_file_chunk_struct
name	src/common/mfu_flist_archive.c	/^    char* name; \/* name of open file (NULL if none) *\/$/;"	m	struct:__anon14	file:
name	src/common/mfu_flist_archive.c	/^    const char* name;      \/* file name of archive *\/$/;"	m	struct:__anon13	file:
name	src/common/mfu_flist_copy.c	/^    char* name;    \/* name of open file (NULL if none) *\/$/;"	m	struct:__anon21	file:
name	src/common/mfu_flist_usrgrp.c	/^    char* name;$/;"	m	struct:strid	file:
name	src/dcp1/common.h	/^    char* name;$/;"	m	struct:__anon37
name	test/legacy/dtest/moab.py	/^	def name(self): $/;"	m	class:job
need_compare	src/dcmp/dcmp.c	/^    int need_compare[DCMPF_MAX];   \/* fields that need to be compared  *\/$/;"	m	struct:dcmp_options	file:
need_compare	src/dsync/dsync.c	/^    int need_compare[DCMPF_MAX];   \/* fields that need to be compared  *\/$/;"	m	struct:dsync_options	file:
next	src/common/list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	src/common/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	src/common/mfu_flist.h	/^    struct mfu_perms_t* next;  \/* pointer to next perms struct in linked list *\/$/;"	m	struct:mfu_perms_t	typeref:struct:mfu_perms_t::mfu_perms_t
next	src/common/mfu_flist.h	/^    struct mfu_pred_item_t* next; \/* pointer to next element in list *\/$/;"	m	struct:mfu_pred_item_t	typeref:struct:mfu_pred_item_t::mfu_pred_item_t
next	src/common/mfu_flist.h	/^  struct mfu_file_chunk_struct* next; \/* pointer to next chunk element *\/$/;"	m	struct:mfu_file_chunk_struct	typeref:struct:mfu_file_chunk_struct::mfu_file_chunk_struct
next	src/common/mfu_flist_internal.h	/^    struct list_elem* next; \/* pointer to next item *\/$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
next	src/common/mfu_flist_usrgrp.c	/^    struct strid* next;$/;"	m	struct:strid	typeref:struct:strid::strid	file:
next	src/common/mfu_path.h	/^  struct mfu_path_elem_struct* next; \/* pointer to next element *\/$/;"	m	struct:mfu_path_elem_struct	typeref:struct:mfu_path_elem_struct::mfu_path_elem_struct
next	src/dcp1/common.h	/^  struct list_elem* next; \/* pointer to next item *\/$/;"	m	struct:list_elem	typeref:struct:list_elem::list_elem
nnum	src/dfilemaker/dfilemaker.c	/^int nnum;$/;"	v
no_dereference	src/common/mfu_param_path.h	/^    int          no_dereference;   \/* if true, don't dereference source symbolic links *\/$/;"	m	struct:__anon28
noclean	test/legacy/dtest/dtest	/^	noclean = False$/;"	v	class:test
nsecs	src/common/mfu_pred.h	/^    uint64_t nsecs; \/* nanoseconds since last second *\/$/;"	m	struct:mfu_pred_times_t
num_proc	test/legacy/dtest/dtest	/^	num_proc = 3$/;"	v	class:test
num_src_params	src/dcp1/handle_args.c	/^static int num_src_params;$/;"	v	file:
numdir	src/dfilemaker/dfilemaker.c	/^static int numfile = 0, numdir = 0, numlink = 0;$/;"	v	file:
numfile	src/dfilemaker/dfilemaker.c	/^static int numfile = 0, numdir = 0, numlink = 0;$/;"	v	file:
numlink	src/dfilemaker/dfilemaker.c	/^static int numfile = 0, numdir = 0, numlink = 0;$/;"	v	file:
numpaths	src/common/mfu_flist.h	/^    int numpaths;$/;"	m	struct:mfu_flist_skip_args
obj	src/common/mfu_flist_copy.c	/^    dfs_obj_t* obj; \/* open object *\/$/;"	m	struct:__anon21	file:
obj	src/common/mfu_param_path.h	/^    dfs_obj_t*           obj;     \/* open object handle *\/$/;"	m	struct:__anon24
obj_id_gen	src/daos-gen/daos-gen.c	/^static uint32_t obj_id_gen = 1;$/;"	v	file:
obj_id_hi	src/common/mfu_flist_internal.h	/^    uint64_t obj_id_hi;$/;"	m	struct:list_elem
obj_id_lo	src/common/mfu_flist_internal.h	/^    uint64_t obj_id_lo;$/;"	m	struct:list_elem
obj_id_t	src/common/mfu_daos.h	/^} obj_id_t;$/;"	t	typeref:struct:__anon3
obj_is_kv	src/common/mfu_daos.c	/^static bool obj_is_kv(daos_obj_id_t oid)$/;"	f	file:
octal	src/common/mfu_flist.h	/^    int octal;           \/* set to 1 if mode_octal is valid *\/$/;"	m	struct:mfu_perms_t
offset	src/common/mfu_compress_bz2_libcircle.c	/^    int64_t offset;$/;"	m	struct:block_info	file:
offset	src/common/mfu_flist.h	/^  uint64_t offset;         \/* starting byte offset in file *\/$/;"	m	struct:mfu_file_chunk_struct
offset	src/common/mfu_flist_archive.c	/^    uint64_t offset;            \/* byte offset into archive file *\/$/;"	m	struct:__anon12	file:
offset	src/common/mfu_flist_internal.h	/^    uint64_t offset;         \/* global offset of our file across all procs *\/$/;"	m	struct:flist
offset	src/common/mfu_param_path.h	/^    daos_off_t           offset;  \/* file offset *\/$/;"	m	struct:__anon24
oid	src/common/mfu_daos.h	/^    oid_t  **oid;$/;"	m	struct:hdf5_args
oid_data	src/common/mfu_daos.h	/^    oid_t *oid_data;$/;"	m	struct:hdf5_args
oid_dims	src/common/mfu_daos.h	/^    hsize_t oid_dims[1];$/;"	m	struct:hdf5_args
oid_dset	src/common/mfu_daos.h	/^    hid_t oid_dset;$/;"	m	struct:hdf5_args
oid_dspace	src/common/mfu_daos.h	/^    hid_t oid_dspace;$/;"	m	struct:hdf5_args
oid_dtype	src/common/mfu_daos.h	/^    hid_t oid_dtype;$/;"	m	struct:hdf5_args
oid_hi	src/common/mfu_daos.h	/^	uint64_t oid_hi;$/;"	m	struct:__anon5
oid_low	src/common/mfu_daos.h	/^	uint64_t oid_low;$/;"	m	struct:__anon5
oid_memtype	src/common/mfu_daos.h	/^    hid_t oid_memtype;$/;"	m	struct:hdf5_args
oid_t	src/common/mfu_daos.h	/^} oid_t;$/;"	t	typeref:struct:__anon5
op_dnamcomp	src/dfilemaker/dfilemaker.c	/^DTCMP_Op op_dnamcomp, op_tnamcomp;$/;"	v
op_tnamcomp	src/dfilemaker/dfilemaker.c	/^DTCMP_Op op_dnamcomp, op_tnamcomp;$/;"	v
operand	src/common/mfu_flist_archive.c	/^    char* operand;              \/* full path to user data file *\/$/;"	m	struct:__anon12	file:
operand	src/dcp1/common.h	/^    char* operand;$/;"	m	struct:__anon34
options	src/dcmp/dcmp.c	/^struct dcmp_options options = {$/;"	v	typeref:struct:dcmp_options
options	src/dfind/common.h	/^} options;$/;"	v	typeref:struct:__anon38
options	src/dsync/dsync.c	/^struct dsync_options options = {$/;"	v	typeref:struct:dsync_options
opts_blocksize	src/dbz2/dbz2.c	/^static int opts_blocksize  = 9;$/;"	v	file:
opts_compress	src/dbz2/dbz2.c	/^static int opts_compress   = 0;$/;"	v	file:
opts_debug	src/dbz2/dbz2.c	/^static int opts_debug      = 0;$/;"	v	file:
opts_decompress	src/dbz2/dbz2.c	/^static int opts_decompress = 0;$/;"	v	file:
opts_force	src/dbz2/dbz2.c	/^static int opts_force      = 0;$/;"	v	file:
opts_keep	src/dbz2/dbz2.c	/^static int opts_keep       = 0;$/;"	v	file:
opts_memory	src/dbz2/dbz2.c	/^static ssize_t opts_memory = -1;$/;"	v	file:
opts_verbose	src/dbz2/dbz2.c	/^static int opts_verbose    = 0;$/;"	v	file:
orig	src/common/mfu_param_path.h	/^    char* orig;              \/* original path as specified by user *\/$/;"	m	struct:mfu_param_path_t
os	test/legacy/dtest/dtest	/^import os$/;"	i
other	src/common/mfu_flist.h	/^    int other;           \/* set to 1 if other bits should be set (e.g. o+r) *\/$/;"	m	struct:mfu_perms_t
outputs	src/dcmp/dcmp.c	/^    struct list_head outputs;      \/* list of outputs *\/$/;"	m	struct:dcmp_options	typeref:struct:dcmp_options::list_head	file:
outputs	src/dsync/dsync.c	/^    struct list_head outputs;      \/* list of outputs *\/$/;"	m	struct:dsync_options	typeref:struct:dsync_options::list_head	file:
overwrite	src/common/mfu_flist.h	/^    bool overwrite;       \/* whether to replace unlink existing items (non-directories) *\/$/;"	m	struct:__anon8
parent	src/common/strmap.h	/^  struct strmap_node_struct* parent; \/* pointer to parent node *\/$/;"	m	struct:strmap_node_struct	typeref:struct:strmap_node_struct::strmap_node_struct
parseArgs	test/legacy/dtest/dtest	/^	def parseArgs(self):$/;"	m	class:test
parse_copy_xattrs_option	src/common/mfu_param_path.c	/^attr_copy_t parse_copy_xattrs_option(char *optarg)$/;"	f
parse_number	src/common/mfu_pred.c	/^static void parse_number(const char* str, int* cmp, uint64_t* val)$/;"	f	file:
parse_plusminus	src/common/mfu_flist_chmod.c	/^static int parse_plusminus(const char* str, mfu_perms* p)$/;"	f	file:
parse_rwx	src/common/mfu_flist_chmod.c	/^static int parse_rwx(const char* str, mfu_perms* p)$/;"	f	file:
parse_source	src/common/mfu_flist_chmod.c	/^static int parse_source(const char* str, mfu_perms* p)$/;"	f	file:
parse_ugoa	src/common/mfu_flist_chmod.c	/^static int parse_ugoa(const char* str, mfu_perms* p)$/;"	f	file:
pass	test/tests/test_dcmp/test_dcmp.sh	/^pass() {$/;"	f
path	src/common/mfu_param_path.h	/^    char* path;              \/* reduced path, but still includes symlinks *\/$/;"	m	struct:mfu_param_path_t
path	test/legacy/dtest/dtest	/^from os import path$/;"	i
path_stat	src/common/mfu_param_path.h	/^    struct stat path_stat;   \/* stat of path *\/$/;"	m	struct:mfu_param_path_t	typeref:struct:mfu_param_path_t::stat
path_stat_valid	src/common/mfu_param_path.h	/^    int   path_stat_valid;   \/* flag to indicate whether path_stat is valid *\/$/;"	m	struct:mfu_param_path_t
paths	src/common/mfu_flist.h	/^    const mfu_param_path* paths;$/;"	m	struct:mfu_flist_skip_args
peta	src/common/mfu_util.c	/^static unsigned long long peta  =    1125899906842624ULL;$/;"	v	file:
plist	src/common/mfu_daos.h	/^    hid_t plist;$/;"	m	struct:hdf5_args
plus	src/common/mfu_flist.h	/^    int plus;            \/* set to 1 if mode has plus, set to 0 for minus *\/$/;"	m	struct:mfu_perms_t
populate	test/legacy/dtest/dtest	/^	def populate(self, chance):$/;"	m	class:test
post_process	test/legacy/dtest/dtest	/^	def post_process(self, id):$/;"	m	class:test
pprev	src/common/list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
pred_commit	src/dfind/dfind.c	/^static void pred_commit (mfu_pred* p)$/;"	f	file:
prefetch	src/common/list.h	23;"	d
prepare_mode_format	src/dsh/dsh.c	/^static void prepare_mode_format(mode_t mode)$/;"	f	file:
preserve	src/common/mfu_flist.h	/^    bool    preserve;$/;"	m	struct:__anon10
preserve	src/common/mfu_param_path.h	/^    bool         preserve;         \/* whether to preserve timestamps, ownership, permissions, etc. *\/$/;"	m	struct:__anon28
preserve	src/dcp1/common.h	/^    bool   preserve;$/;"	m	struct:__anon36
preserve_acls	src/common/mfu_flist.h	/^    bool    preserve_acls;$/;"	m	struct:__anon10
preserve_fflags	src/common/mfu_flist.h	/^    bool    preserve_fflags;$/;"	m	struct:__anon10
preserve_owner	src/common/mfu_flist.h	/^    bool    preserve_owner;$/;"	m	struct:__anon10
preserve_permissions	src/common/mfu_flist.h	/^    bool    preserve_permissions;$/;"	m	struct:__anon10
preserve_times	src/common/mfu_flist.h	/^    bool    preserve_times;$/;"	m	struct:__anon10
preserve_xattrs	src/common/mfu_flist.h	/^    bool    preserve_xattrs;$/;"	m	struct:__anon10
prev	src/common/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
prev	src/common/mfu_path.h	/^  struct mfu_path_elem_struct* prev; \/* pointer to previous element *\/$/;"	m	struct:mfu_path_elem_struct	typeref:struct:mfu_path_elem_struct::mfu_path_elem_struct
print_comparison_stats	src/dsync/dsync.c	/^static void print_comparison_stats($/;"	f	file:
print_file	src/common/mfu_flist.c	/^static void print_file(mfu_flist flist, uint64_t idx)$/;"	f	file:
print_file	src/dsh/dsh.c	/^static void print_file(mfu_flist flist, uint64_t idx, int rank)$/;"	f	file:
print_file_text	src/common/mfu_flist_io.c	/^static size_t print_file_text(mfu_flist flist, uint64_t idx, char* buffer, size_t bufsize)$/;"	f	file:
print_files	src/dsh/dsh.c	/^static void print_files(mfu_flist flist, mfu_path* path)$/;"	f	file:
print_flist_distribution	src/dwalk/dwalk.c	/^static int print_flist_distribution(int file_histogram,$/;"	f	file:
print_summary	src/common/mfu_flist_copy.c	/^static void print_summary(mfu_flist flist)$/;"	f	file:
print_summary	src/dfilemaker/dfilemaker.c	/^static void print_summary(mfu_flist flist)$/;"	f	file:
print_summary	src/dsh/dsh.c	/^static void print_summary(mfu_flist flist)$/;"	f	file:
print_sums	src/dsh/dsh.c	/^static void print_sums(mfu_path* origpath, uint64_t count, uint64_t allmax, uint64_t maxcount, $/;"	f	file:
print_usage	dist/builddist	/^print_usage() {$/;"	f
print_usage	src/daos-deserialize/daos-deserialize.c	/^void print_usage(void)$/;"	f
print_usage	src/daos-gen/daos-gen.c	/^void print_usage(void)$/;"	f
print_usage	src/daos-serialize/daos-serialize.c	/^void print_usage(void)$/;"	f
print_usage	src/dbcast/dbcast.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dbz2/dbz2.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dchmod/dchmod.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dcmp/dcmp.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dcp/dcp.c	/^void print_usage(void)$/;"	f
print_usage	src/ddup/ddup.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dfilemaker1/dfilemaker1.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dfind/dfind.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dgrep/dgrep.c	/^print_usage(char *prog)$/;"	f
print_usage	src/dreln/dreln.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/drm/drm.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dsh/dsh.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dstripe/dstripe.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dsync/dsync.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dtar/dtar.c	/^static void print_usage(void)$/;"	f	file:
print_usage	src/dwalk/dwalk.c	/^static void print_usage(void)$/;"	f	file:
procpernode	test/legacy/dtest/dtest	/^	procpernode = 1$/;"	v	class:test
progfn	src/common/mfu_progress.h	/^    mfu_progress_fn progfn; \/* callback function to execute to print progress message *\/$/;"	m	struct:__anon31
project	doc/rst/conf.py	/^project = u'mpiFileUtils'$/;"	v
pygments_style	doc/rst/conf.py	/^pygments_style = 'sphinx'$/;"	v
queue	test/legacy/dtest/moab.py	/^	def queue(self):$/;"	m	class:job
quiet	src/dcmp/dcmp.c	/^    int quiet;$/;"	m	struct:dcmp_options	file:
quiet	src/dsync/dsync.c	/^    int quiet;$/;"	m	struct:dsync_options	file:
random	test/legacy/dtest/dtest	/^import random$/;"	i
rank	src/common/mfu_compress_bz2_libcircle.c	/^    int rank;$/;"	m	struct:block_info	file:
rank_of_owner	src/common/mfu_flist.h	/^  uint64_t rank_of_owner;  \/* MPI rank acting as the owner of this file *\/$/;"	m	struct:mfu_file_chunk_struct
re	test/legacy/dtest/dtest	/^import re$/;"	i
read	src/common/mfu_flist.h	/^    int read;            \/* set to 1 if 'r' is given *\/$/;"	m	struct:mfu_perms_t
read	src/common/mfu_flist_archive.c	/^    int   read; \/* whether file is open for read-only (1) or write (0) *\/$/;"	m	struct:__anon14	file:
read	src/common/mfu_flist_copy.c	/^    int   read;    \/* whether file is open for read-only (1) or write (0) *\/$/;"	m	struct:__anon21	file:
read	src/dcp1/common.h	/^    int   read;$/;"	m	struct:__anon37
read_cache_v3	src/common/mfu_flist_io.c	/^static void read_cache_v3($/;"	f	file:
read_cache_v4	src/common/mfu_flist_io.c	/^static void read_cache_v4($/;"	f	file:
read_cache_variable	src/common/mfu_flist_io.c	/^static void read_cache_variable($/;"	f	file:
read_data	src/ddup/ddup.c	/^static int read_data(const char* fname, char* chunk_buf, uint64_t chunk_id,$/;"	f	file:
read_entry_index	src/common/mfu_flist_archive.c	/^static int read_entry_index($/;"	f	file:
read_entry_index_file	src/common/mfu_flist_archive.c	/^static int read_entry_index_file($/;"	f	file:
read_entry_index_footer	src/common/mfu_flist_archive.c	/^static int read_entry_index_footer($/;"	f	file:
read_entry_index_xattr	src/common/mfu_flist_archive.c	/^static int read_entry_index_xattr($/;"	f	file:
read_source_bits	src/common/mfu_flist_chmod.c	/^static void read_source_bits(const mfu_perms* p, mode_t mode, int* read, int* write, int* execute)$/;"	f	file:
rec_dset_id	src/common/mfu_daos.h	/^	uint64_t rec_dset_id;$/;"	m	struct:__anon7
rec_kv_val	src/common/mfu_daos.h	/^	hvl_t rec_kv_val;$/;"	m	struct:__anon6
rec_single_val	src/common/mfu_daos.h	/^	hvl_t rec_single_val;$/;"	m	struct:__anon7
reduce_buf	src/common/mfu_flist_archive.c	/^static uint64_t reduce_buf[2];$/;"	v	file:
reduce_bytes	src/common/mfu_flist_archive.c	/^static uint64_t reduce_bytes;$/;"	v	file:
reduce_exec	src/common/mfu_flist_archive.c	/^static void reduce_exec(const void* buf1, size_t size1, const void* buf2, size_t size2)$/;"	f	file:
reduce_exec	src/common/mfu_flist_walk.c	/^static void reduce_exec(const void* buf1, size_t size1, const void* buf2, size_t size2)$/;"	f	file:
reduce_fini	src/common/mfu_flist_archive.c	/^static void reduce_fini(const void* buf, size_t size)$/;"	f	file:
reduce_fini	src/common/mfu_flist_walk.c	/^static void reduce_fini(const void* buf, size_t size)$/;"	f	file:
reduce_init	src/common/mfu_flist_archive.c	/^static void reduce_init(void)$/;"	f	file:
reduce_init	src/common/mfu_flist_walk.c	/^static void reduce_init(void)$/;"	f	file:
reduce_items	src/common/mfu_flist_walk.c	/^static uint64_t reduce_items;$/;"	v	file:
reduce_opstr	src/common/mfu_flist_archive.c	/^const char* reduce_opstr = NULL;$/;"	v
reduce_req	src/common/mfu_progress.h	/^    MPI_Request reduce_req; \/* request for outstanding reduce *\/$/;"	m	struct:__anon31
reduce_start	src/common/mfu_flist_archive.c	/^static double   reduce_start;$/;"	v	file:
reduce_start	src/common/mfu_flist_walk.c	/^static double   reduce_start;$/;"	v	file:
release	doc/rst/conf.py	/^release = u'0.11.1'$/;"	v
release	test/legacy/dtest/moab.py	/^	def release(self):$/;"	m	class:job
release	test/legacy/dtest/moab.py	/^def release(id):$/;"	f
reliable_filesystem	src/dcp1/common.h	/^    bool   reliable_filesystem;$/;"	m	struct:__anon36
reln_count	src/dreln/dreln.c	/^static uint64_t reln_count;$/;"	v	file:
reln_count_total	src/dreln/dreln.c	/^static uint64_t reln_count_total;$/;"	v	file:
reln_progress_fn	src/dreln/dreln.c	/^static void reln_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
remove	src/common/mfu_param_path.h	/^    int remove;         \/* flag option to remove files during walk *\/$/;"	m	struct:__anon26
remove_by_algo	src/common/mfu_flist_remove.c	/^static void remove_by_algo(mfu_remove_algos algo, mfu_flist flist, uint64_t* count, mfu_file_t* mfu_file)$/;"	f	file:
remove_count	src/common/mfu_flist_remove.c	/^uint64_t remove_count;$/;"	v
remove_count_total	src/common/mfu_flist_remove.c	/^uint64_t remove_count_total;$/;"	v
remove_create	src/common/mfu_flist_remove.c	/^static void remove_create(CIRCLE_handle* handle)$/;"	f	file:
remove_direct	src/common/mfu_flist_remove.c	/^static void remove_direct(mfu_flist list, uint64_t* rmcount, mfu_file_t* mfu_file)$/;"	f	file:
remove_libcircle	src/common/mfu_flist_remove.c	/^static void remove_libcircle(mfu_flist list, uint64_t* rmcount, mfu_file_t* mfu_file)$/;"	f	file:
remove_map	src/common/mfu_flist_remove.c	/^static void remove_map(mfu_flist list, uint64_t* rmcount, mfu_file_t* mfu_file)$/;"	f	file:
remove_process	src/common/mfu_flist_remove.c	/^static void remove_process(CIRCLE_handle* handle)$/;"	f	file:
remove_progress_fn	src/common/mfu_flist_remove.c	/^static void remove_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
remove_sort	src/common/mfu_flist_remove.c	/^static void remove_sort(mfu_flist list, uint64_t* rmcount, mfu_file_t* mfu_file)$/;"	f	file:
remove_spread	src/common/mfu_flist_remove.c	/^static void remove_spread(mfu_flist flist, uint64_t* rmcount, mfu_file_t* mfu_file)$/;"	f	file:
remove_spread_sort	src/common/mfu_flist_remove.c	/^static void remove_spread_sort(mfu_flist flist, uint64_t* rmcount, mfu_file_t* mfu_file)$/;"	f	file:
remove_type	src/common/mfu_flist_remove.c	/^static void remove_type(char type, const char* name, mfu_file_t* mfu_file)$/;"	f	file:
right	src/common/strmap.h	/^  struct strmap_node_struct* right;  \/* pointer to right child *\/$/;"	m	struct:strmap_node_struct	typeref:struct:strmap_node_struct::strmap_node_struct
rmprog	src/common/mfu_flist_remove.c	/^mfu_progress* rmprog;$/;"	v
root	src/common/strmap.h	/^  strmap_node* root; \/* pointer to the root node in the tree *\/$/;"	m	struct:strmap_struct
root	src/dfind/common.h	/^    char * root;$/;"	m	struct:__anon38
run_one	test/tests/test_dcmp/test_dcmp.sh	/^run_one() {$/;"	f
run_test	test/legacy/dtest/dtest	/^	run_test = True$/;"	v	class:test
run_test	test/tests/test_dcmp/test_dcmp.sh	/^run_test()$/;"	f
rx_chunk_dims	src/common/mfu_daos.h	/^    hsize_t rx_chunk_dims[1];$/;"	m	struct:hdf5_args
rx_dims	src/common/mfu_daos.h	/^    hsize_t rx_dims[1];$/;"	m	struct:hdf5_args
rx_dset	src/common/mfu_daos.h	/^    hid_t rx_dset;$/;"	m	struct:hdf5_args
rx_dspace	src/common/mfu_daos.h	/^    hid_t rx_dspace;$/;"	m	struct:hdf5_args
rx_dtype	src/common/mfu_daos.h	/^    hid_t rx_dtype;$/;"	m	struct:hdf5_args
rx_max_dims	src/common/mfu_daos.h	/^    hsize_t rx_max_dims[1];$/;"	m	struct:hdf5_args
rx_memspace	src/common/mfu_daos.h	/^    hid_t rx_memspace;$/;"	m	struct:hdf5_args
sb	src/dcp1/common.h	/^  struct stat64* sb;      \/* stat info *\/$/;"	m	struct:list_elem	typeref:struct:list_elem::stat64
secs	src/common/mfu_pred.h	/^    uint64_t secs;  \/* seconds since Linux epoch *\/$/;"	m	struct:mfu_pred_times_t
select_algo	src/common/mfu_flist_remove.c	/^static mfu_remove_algos select_algo(void)$/;"	f	file:
select_create_algo	src/common/mfu_flist_archive.c	/^static mfu_flist_archive_create_algo select_create_algo(void)$/;"	f	file:
select_extract_algo	src/common/mfu_flist_archive.c	/^static mfu_flist_archive_extract_algo select_extract_algo(void)$/;"	f	file:
select_index_algo	src/common/mfu_flist_archive.c	/^static mfu_flist_archive_index_algo select_index_algo(void)$/;"	f	file:
select_scan_algo	src/common/mfu_flist_archive.c	/^static mfu_flist_archive_scan_algo select_scan_algo(void)$/;"	f	file:
selection_attr	src/common/mfu_daos.h	/^    hid_t selection_attr;$/;"	m	struct:hdf5_args
separator_number	src/dwalk/dwalk.c	/^    int separator_number;$/;"	m	struct:distribute_option	file:
separators	src/dwalk/dwalk.c	/^    uint64_t separators[MAX_DISTRIBUTE_SEPARATORS];$/;"	m	struct:distribute_option	file:
serialize_akeys	src/common/mfu_daos.c	/^static int serialize_akeys(struct hdf5_args *hdf5,$/;"	f	file:
serialize_daos_metadata	src/common/mfu_daos.c	/^static int serialize_daos_metadata(char *filename,$/;"	f	file:
serialize_dkeys	src/common/mfu_daos.c	/^static int serialize_dkeys(struct hdf5_args *hdf5,$/;"	f	file:
serialize_kv_rec	src/common/mfu_daos.c	/^static int serialize_kv_rec(struct hdf5_args *hdf5, $/;"	f	file:
serialize_recx_array	src/common/mfu_daos.c	/^static int serialize_recx_array(struct hdf5_args *hdf5,$/;"	f	file:
serialize_recx_single	src/common/mfu_daos.c	/^static int serialize_recx_single(struct hdf5_args *hdf5, $/;"	f	file:
set_modebits	src/common/mfu_flist_chmod.c	/^static void set_modebits(const mfu_perms* head, mfu_filetype type, mode_t old_mode, mode_t mask, mode_t* mode)$/;"	f	file:
set_other_xattrs	test/tests/test_dsync/test_xattr.sh	/^function set_other_xattrs()$/;"	f
set_owner	src/common/mfu_flist.h	/^    bool set_owner;       \/* whether to copy uid\/gid from flist to item *\/$/;"	m	struct:__anon8
set_permissions	src/common/mfu_flist.h	/^    bool set_permissions; \/* whether to copy permission bits from flist to item *\/$/;"	m	struct:__anon8
set_symbolic_bits	src/common/mfu_flist_chmod.c	/^static void set_symbolic_bits(const mfu_perms* p, mfu_filetype type, mode_t mask, mode_t* mode)$/;"	f	file:
set_target_bits	src/common/mfu_flist_chmod.c	/^static void set_target_bits(const mfu_perms* p, int read, int write, int execute, mode_t* mode)$/;"	f	file:
set_timestamps	src/common/mfu_flist.h	/^    bool set_timestamps;  \/* whether to copy timestamps from flist to item *\/$/;"	m	struct:__anon8
setname	src/dfilemaker/dfilemaker.c	/^void setname(char* aname, unsigned long int ftype, int n, const char* path)$/;"	f
shutil	test/legacy/dtest/dtest	/^import shutil$/;"	i
silence	src/common/mfu_flist.h	/^    bool silence;   \/* avoid printing EPERM errors *\/$/;"	m	struct:__anon9
size	src/common/mfu_flist_internal.h	/^    uint64_t size;          \/* file size in bytes *\/$/;"	m	struct:list_elem
size	src/common/strmap.h	/^  uint64_t size;     \/* number of nodes in the tree *\/$/;"	m	struct:strmap_struct
size	src/dfilemaker/dfilemaker.c	/^size_t size, isize;$/;"	v
smartquotes	doc/rst/conf.py	/^smartquotes = False$/;"	v
sno	src/common/mfu_compress_bz2_libcircle.c	/^    int64_t sno;$/;"	m	struct:block_info	file:
sort_field	src/common/mfu_flist_sort.c	/^} sort_field;$/;"	t	typeref:enum:__anon23	file:
sort_field	src/dsh/dsh.c	/^} sort_field;$/;"	t	typeref:enum:__anon40	file:
sort_files_readdir	src/common/mfu_flist_sort.c	/^static mfu_flist sort_files_readdir(const char* sortfields, mfu_flist flist)$/;"	f	file:
sort_files_readdir	src/dsh/dsh.c	/^static int sort_files_readdir(const char* sortfields, mfu_flist* pflist)$/;"	f	file:
sort_files_stat	src/common/mfu_flist_sort.c	/^static mfu_flist sort_files_stat(const char* sortfields, mfu_flist flist)$/;"	f	file:
sort_files_stat	src/dsh/dsh.c	/^static int sort_files_stat(const char* sortfields, mfu_flist* pflist)$/;"	f	file:
sort_scan_sort	src/dsh/dsh.c	/^static void sort_scan_sort(mfu_path* origpath, uint64_t allmax, $/;"	f	file:
source	src/common/mfu_flist.h	/^    char source;         \/* records source of target: 'u', 'g', 'a' *\/$/;"	m	struct:mfu_perms_t
source_base_offset	src/dcp1/common.h	/^    uint16_t source_base_offset;$/;"	m	struct:__anon34
source_encoding	doc/rst/conf.py	/^source_encoding = 'utf-8-sig'$/;"	v
source_suffix	doc/rst/conf.py	/^source_suffix = '.rst'$/;"	v
source_suffix	doc/rst/conf.py	/^source_suffix = ['.rst', '.md']$/;"	v
sparse	src/common/mfu_param_path.h	/^    bool         sparse;           \/* whether to create sparse files *\/$/;"	m	struct:__anon28
sparse	test/legacy/dtest/dtest	/^	sparse = False$/;"	v	class:test
src_coh	src/common/mfu_daos.h	/^    daos_handle_t src_coh;  \/* source container handle *\/$/;"	m	struct:__anon2
src_cont	src/common/mfu_daos.h	/^    char src_cont[DAOS_PROP_LABEL_MAX_LEN + 1];$/;"	m	struct:__anon2
src_cont_type	src/common/mfu_daos.h	/^    enum daos_cont_props src_cont_type; \/* type of the source container *\/$/;"	m	struct:__anon2	typeref:enum:__anon2::daos_cont_props
src_epc	src/common/mfu_daos.h	/^    daos_epoch_t src_epc;   \/* src container epoch *\/$/;"	m	struct:__anon2
src_matched_list	src/dcmp/dcmp.c	/^    mfu_flist src_matched_list;    \/* matched src items in this conjunction *\/$/;"	m	struct:dcmp_conjunction	file:
src_matched_list	src/dsync/dsync.c	/^    mfu_flist src_matched_list;    \/* matched src items in this conjunction *\/$/;"	m	struct:dsync_conjunction	file:
src_name	src/common/mfu_compress_bz2_libcircle.c	/^static char* src_name;$/;"	v	file:
src_name	src/common/mfu_decompress_bz2_libcircle.c	/^static char* src_name;$/;"	v	file:
src_params	src/dcp1/handle_args.c	/^static mfu_param_path* src_params;$/;"	v	file:
src_path	src/common/mfu_daos.h	/^    char* src_path;         \/* allocated src path *\/$/;"	m	struct:__anon2
src_poh	src/common/mfu_daos.h	/^    daos_handle_t src_poh;  \/* source pool handle *\/$/;"	m	struct:__anon2
src_pool	src/common/mfu_daos.h	/^    char src_pool[DAOS_PROP_LABEL_MAX_LEN + 1];$/;"	m	struct:__anon2
state	src/dcmp/dcmp.c	/^    dcmp_state state;              \/* expected state of the field *\/$/;"	m	struct:dcmp_expression	file:
state	src/dsync/dsync.c	/^    dsync_state state;              \/* expected state of the field *\/$/;"	m	struct:dsync_expression	file:
state	test/legacy/dtest/moab.py	/^	def state(self):$/;"	m	class:job
status	src/common/mfu_daos.h	/^    hid_t status;$/;"	m	struct:hdf5_args
stock	test/legacy/dtest/dtest	/^	stock = False$/;"	v	class:test
strid	src/common/mfu_flist_usrgrp.c	/^typedef struct strid {$/;"	s	file:
strid_delete	src/common/mfu_flist_usrgrp.c	/^static void strid_delete(strid_t** head, strid_t** tail, int* count)$/;"	f	file:
strid_insert	src/common/mfu_flist_usrgrp.c	/^static void strid_insert($/;"	f	file:
strid_serialize	src/common/mfu_flist_usrgrp.c	/^static void strid_serialize(strid_t* head, int chars, void* buf)$/;"	f	file:
strid_t	src/common/mfu_flist_usrgrp.c	/^} strid_t;$/;"	t	typeref:struct:strid	file:
stripe_info_report	src/dstripe/dstripe.c	/^static void stripe_info_report(mfu_flist list)$/;"	f	file:
stripe_prog	src/dstripe/dstripe.c	/^mfu_progress* stripe_prog;$/;"	v
stripe_prog_bytes	src/dstripe/dstripe.c	/^uint64_t stripe_prog_bytes;$/;"	v
stripe_prog_bytes_total	src/dstripe/dstripe.c	/^uint64_t stripe_prog_bytes_total;$/;"	v
stripe_progress_fn	src/dstripe/dstripe.c	/^static void stripe_progress_fn(const uint64_t* vals, int count, int complete, int ranks, double secs)$/;"	f	file:
strmap	src/common/strmap.h	/^} strmap;$/;"	t	typeref:struct:strmap_struct
strmap_delete	src/common/strmap.c	/^void strmap_delete(strmap** ptree)$/;"	f
strmap_foreach	src/common/strmap.h	114;"	d
strmap_get	src/common/strmap.c	/^const char* strmap_get(const strmap* tree, const char* key)$/;"	f
strmap_getf	src/common/strmap.c	/^const char* strmap_getf(strmap* map, const char* format, ...)$/;"	f
strmap_merge	src/common/strmap.c	/^void strmap_merge(strmap* dst, const strmap* src)$/;"	f
strmap_new	src/common/strmap.c	/^strmap* strmap_new()$/;"	f
strmap_node	src/common/strmap.h	/^} strmap_node;$/;"	t	typeref:struct:strmap_node_struct
strmap_node_balance_factor	src/common/strmap.c	/^static int strmap_node_balance_factor(const strmap_node* node)$/;"	f	file:
strmap_node_delete	src/common/strmap.c	/^static int strmap_node_delete(strmap_node* node)$/;"	f	file:
strmap_node_extract_single	src/common/strmap.c	/^static strmap_node* strmap_node_extract_single(strmap_node* node)$/;"	f	file:
strmap_node_first	src/common/strmap.c	/^const strmap_node* strmap_node_first(const strmap* tree)$/;"	f
strmap_node_key	src/common/strmap.c	/^const char* strmap_node_key(const strmap_node* node)$/;"	f
strmap_node_last	src/common/strmap.c	/^const strmap_node* strmap_node_last(const strmap* tree)$/;"	f
strmap_node_leftmost	src/common/strmap.c	/^static const strmap_node* strmap_node_leftmost(const strmap_node* node)$/;"	f	file:
strmap_node_new	src/common/strmap.c	/^static strmap_node* strmap_node_new(const char* key, const char* value)$/;"	f	file:
strmap_node_next	src/common/strmap.c	/^const strmap_node* strmap_node_next(const strmap_node* node)$/;"	f
strmap_node_previous	src/common/strmap.c	/^const strmap_node* strmap_node_previous(const strmap_node* node)$/;"	f
strmap_node_rebalance	src/common/strmap.c	/^static strmap_node* strmap_node_rebalance(strmap_node* node)$/;"	f	file:
strmap_node_rightmost	src/common/strmap.c	/^static const strmap_node* strmap_node_rightmost(const strmap_node* node)$/;"	f	file:
strmap_node_rotate_left	src/common/strmap.c	/^static strmap_node* strmap_node_rotate_left(strmap_node* node)$/;"	f	file:
strmap_node_rotate_right	src/common/strmap.c	/^static strmap_node* strmap_node_rotate_right(strmap_node* node)$/;"	f	file:
strmap_node_search	src/common/strmap.c	/^static strmap_node* strmap_node_search($/;"	f	file:
strmap_node_set_height	src/common/strmap.c	/^static int strmap_node_set_height(strmap_node* node)$/;"	f	file:
strmap_node_struct	src/common/strmap.h	/^typedef struct strmap_node_struct {$/;"	s
strmap_node_value	src/common/strmap.c	/^const char* strmap_node_value(const strmap_node* node)$/;"	f
strmap_set	src/common/strmap.c	/^int strmap_set(strmap* tree, const char* key, const char* value)$/;"	f
strmap_setf	src/common/strmap.c	/^int strmap_setf(strmap* map, const char* format, ...)$/;"	f
strmap_size	src/common/strmap.c	/^uint64_t strmap_size(const strmap* tree)$/;"	f
strmap_struct	src/common/strmap.h	/^typedef struct strmap_struct {$/;"	s
strmap_unset	src/common/strmap.c	/^int strmap_unset(strmap* tree, const char* key)$/;"	f
strmap_unsetf	src/common/strmap.c	/^int strmap_unsetf(strmap* map, const char* format, ...)$/;"	f
submit	test/legacy/dtest/moab.py	/^def submit(job):$/;"	f
subprocess	test/legacy/dtest/dtest	/^import subprocess$/;"	i
subprocess	test/legacy/dtest/moab.py	/^import subprocess$/;"	i
subprocess	test/tests/test_dchmod/test_octal.py	/^import subprocess $/;"	i
subprocess	test/tests/test_dcp/test_fiemap.py	/^import subprocess $/;"	i
subprocess	test/tests/test_dsync/test_xattr.py	/^import subprocess$/;"	i
sum_child	src/dsh/dsh.c	/^static void sum_child(mfu_flist flist, uint64_t idx, uint64_t* vals)$/;"	f	file:
sum_uint64_t	src/common/mfu_daos.c	/^static uint64_t sum_uint64_t(uint32_t number, uint64_t* buf)$/;"	f	file:
summarize_children	src/dsh/dsh.c	/^static void summarize_children(mfu_flist flist, mfu_path* path, int print_default)$/;"	f	file:
symlinks	test/legacy/dtest/dtest	/^	symlinks = False$/;"	v	class:test
sync	src/common/mfu_flist_archive.c	/^    int   sync; \/* whether to fsync file on close (1) or not (0) *\/$/;"	m	struct:__anon14	file:
sync_and_verify	test/tests/test_dsync/test_xattr.sh	/^function sync_and_verify()$/;"	f
sync_on_close	src/common/mfu_flist.h	/^    bool    sync_on_close;$/;"	m	struct:__anon10
synchronous	src/dcp1/common.h	/^    bool   synchronous;$/;"	m	struct:__anon36
sys	test/legacy/dtest/dtest	/^import sys$/;"	i
t	src/common/mfu_pred.h	/^    mfu_pred_times t;   \/* base time to be compared against *\/$/;"	m	struct:mfu_pred_times_rel_t
t	test/legacy/dtest/dtest	/^	t = test()$/;"	v
tail	src/common/mfu_path.h	/^  mfu_path_elem* tail; \/* pointer to last element *\/$/;"	m	struct:__anon29
tar_name	test/legacy/dtest/dtest	/^	tar_name = 'test.tar'$/;"	v	class:test
target	src/common/mfu_param_path.h	/^    char* target;            \/* fully resolved path, no more symlinks *\/$/;"	m	struct:mfu_param_path_t
target_stat	src/common/mfu_param_path.h	/^    struct stat target_stat; \/* stat of target path *\/$/;"	m	struct:mfu_param_path_t	typeref:struct:mfu_param_path_t::stat
target_stat_valid	src/common/mfu_param_path.h	/^    int   target_stat_valid; \/* flag to indicate whether target_stat is valid *\/$/;"	m	struct:mfu_param_path_t
templates_path	doc/rst/conf.py	/^templates_path = ['_templates']$/;"	v
tera	src/common/mfu_util.c	/^static unsigned long long tera  =       1099511627776ULL;$/;"	v	file:
test	test/legacy/dtest/dtest	/^class test(object):$/;"	c
test_0	test/tests/test_dcmp/test_dcmp.sh	/^test_0()$/;"	f
test_1	test/tests/test_dcmp/test_dcmp.sh	/^test_1()$/;"	f
test_10	test/tests/test_dcmp/test_dcmp.sh	/^test_10()$/;"	f
test_2	test/tests/test_dcmp/test_dcmp.sh	/^test_2()$/;"	f
test_3	test/tests/test_dcmp/test_dcmp.sh	/^test_3()$/;"	f
test_4	test/tests/test_dcmp/test_dcmp.sh	/^test_4()$/;"	f
test_5	test/tests/test_dcmp/test_dcmp.sh	/^test_5()$/;"	f
test_6	test/tests/test_dcmp/test_dcmp.sh	/^test_6()$/;"	f
test_7	test/tests/test_dcmp/test_dcmp.sh	/^test_7()$/;"	f
test_8	test/tests/test_dcmp/test_dcmp.sh	/^test_8()$/;"	f
test_9	test/tests/test_dcmp/test_dcmp.sh	/^test_9()$/;"	f
test_all	test/tests/test_dcp1/test_all.py	/^def test_all():$/;"	f
test_dcp1_many_dir_to_single_dir	test/tests/test_dcp1/test_many_dir_to_single_dir.py	/^def test_dcp1_many_dir_to_single_dir():$/;"	f
test_dcp1_many_dir_to_single_file	test/tests/test_dcp1/test_many_dir_to_single_file.py	/^def test_dcp1_many_dir_to_single_file():$/;"	f
test_dcp1_many_file_to_single_dir	test/tests/test_dcp1/test_many_file_to_single_dir.py	/^def test_dcp1_many_file_to_single_dir():$/;"	f
test_dcp1_many_file_to_single_file	test/tests/test_dcp1/test_many_file_to_single_file.py	/^def test_dcp1_many_file_to_single_file():$/;"	f
test_dcp1_single_dir_to_single_dir	test/tests/test_dcp1/test_single_dir_to_single_dir.py	/^def test_dcp1_single_dir_to_single_dir():$/;"	f
test_dcp1_single_dir_to_single_file	test/tests/test_dcp1/test_single_dir_to_single_file.py	/^def test_dcp1_single_dir_to_single_file():$/;"	f
test_dcp1_single_file_to_single_dir	test/tests/test_dcp1/test_single_file_to_single_dir.py	/^def test_dcp1_single_file_to_single_dir():$/;"	f
test_dcp1_single_file_to_single_file	test/tests/test_dcp1/test_single_file_to_single_file.py	/^def test_dcp1_single_file_to_single_file():$/;"	f
test_fiemap	test/tests/test_dcp/test_fiemap.py	/^def test_fiemap():$/;"	f
test_fiemap	test/tests/test_dcp/test_fiemap.sh	/^function test_fiemap {$/;"	f
test_fiemap_support	test/tests/test_dcp/checkfiemap.c	/^static int test_fiemap_support(int fd) {$/;"	f	file:
test_octal	test/tests/test_dchmod/test_octal.py	/^def test_octal():$/;"	f
test_xattr	test/tests/test_dsync/test_xattr.py	/^def test_xattr():$/;"	f
texinfo_documents	doc/rst/conf.py	/^texinfo_documents = [$/;"	v
thread	test/legacy/dtest/dtest	/^import thread$/;"	i
thread_complete	test/legacy/dtest/dtest	/^	thread_complete = 0$/;"	v	class:test
thread_count	test/legacy/dtest/dtest	/^	thread_count = 0$/;"	v	class:test
threading	test/legacy/dtest/dtest	/^import threading$/;"	i
time	test/legacy/dtest/dtest	/^import time$/;"	i
time	test/legacy/dtest/moab.py	/^	def time(self):$/;"	m	class:job
time_ended	src/common/mfu_daos.h	/^    time_t   time_ended;    \/* time when ended *\/$/;"	m	struct:mfu_daos_stats
time_ended	src/common/mfu_flist_copy.c	/^    time_t   time_ended;         \/* time when dcp command ended *\/$/;"	m	struct:__anon20	file:
time_ended	src/dcp1/common.h	/^    time_t   time_ended;$/;"	m	struct:__anon35
time_last	src/common/mfu_progress.h	/^    double time_last;       \/* time when last report was requested *\/$/;"	m	struct:__anon31
time_start	src/common/mfu_progress.h	/^    double time_start;      \/* time when start was called *\/$/;"	m	struct:__anon31
time_started	src/common/mfu_daos.h	/^    time_t   time_started;  \/* time when started *\/$/;"	m	struct:mfu_daos_stats
time_started	src/common/mfu_flist_copy.c	/^    time_t   time_started;       \/* time when dcp command started *\/$/;"	m	struct:__anon20	file:
time_started	src/dcp1/common.h	/^    time_t   time_started;$/;"	m	struct:__anon35
time_strmap_compare	src/dcmp/dcmp.c	/^static void time_strmap_compare(mfu_flist src_list, double start_compare,$/;"	f	file:
timeout	src/common/mfu_progress.h	/^    double timeout;         \/* number of seconds between reports *\/$/;"	m	struct:__anon31
tmp_dir	test/legacy/dtest/dtest	/^	tmp_dir = ''$/;"	v	class:test
tnamcomp	src/dfilemaker/dfilemaker.c	/^int tnamcomp(const void* a, const void* b)$/;"	f
tnamsort	src/dfilemaker/dfilemaker.c	/^void tnamsort(char** buff, int nitems)$/;"	f
todo_include_todos	doc/rst/conf.py	/^todo_include_todos = False$/;"	v
tot_blocks	src/common/mfu_compress_bz2_libcircle.c	/^static int64_t tot_blocks;$/;"	v	file:
total_akeys	src/common/mfu_daos.h	/^    uint64_t total_akeys;   \/* sum of akeys *\/$/;"	m	struct:mfu_daos_stats
total_bytes	src/dfilemaker/dfilemaker.c	/^uint64_t total_bytes   = 0;$/;"	v
total_bytes	src/dsh/dsh.c	/^uint64_t total_bytes   = 0;$/;"	v
total_bytes	src/dwalk/dwalk.c	/^uint64_t total_bytes   = 0;$/;"	v
total_bytes_copied	src/common/mfu_flist_copy.c	/^    int64_t  total_bytes_copied; \/* total bytes written *\/$/;"	m	struct:__anon20	file:
total_bytes_copied	src/dcp1/common.h	/^    int64_t  total_bytes_copied; \/* total bytes written *\/$/;"	m	struct:__anon35
total_dirs	src/common/mfu_flist_copy.c	/^    int64_t  total_dirs;         \/* sum of all directories *\/$/;"	m	struct:__anon20	file:
total_dirs	src/dcp1/common.h	/^    int64_t  total_dirs;         \/* sum of all directories *\/$/;"	m	struct:__anon35
total_dirs	src/dfilemaker/dfilemaker.c	/^uint64_t total_dirs    = 0;$/;"	v
total_dirs	src/dsh/dsh.c	/^uint64_t total_dirs    = 0;$/;"	v
total_dirs	src/dwalk/dwalk.c	/^uint64_t total_dirs    = 0;$/;"	v
total_dkeys	src/common/mfu_daos.h	/^    uint64_t total_dkeys;   \/* sum of dkeys *\/$/;"	m	struct:mfu_daos_stats
total_files	src/common/mfu_flist_copy.c	/^    int64_t  total_files;        \/* sum of all files *\/$/;"	m	struct:__anon20	file:
total_files	src/common/mfu_flist_internal.h	/^    uint64_t total_files;    \/* total item count in list across all procs *\/$/;"	m	struct:flist
total_files	src/dcp1/common.h	/^    int64_t  total_files;        \/* sum of all files *\/$/;"	m	struct:__anon35
total_files	src/dfilemaker/dfilemaker.c	/^uint64_t total_files   = 0;$/;"	v
total_files	src/dsh/dsh.c	/^uint64_t total_files   = 0;$/;"	v
total_files	src/dwalk/dwalk.c	/^uint64_t total_files   = 0;$/;"	v
total_groups	src/common/mfu_flist_internal.h	/^    uint64_t total_groups;   \/* number of groups (valid if detail is 1) *\/$/;"	m	struct:flist
total_links	src/common/mfu_flist_copy.c	/^    int64_t  total_links;        \/* sum of all symlinks *\/$/;"	m	struct:__anon20	file:
total_links	src/dcp1/common.h	/^    int64_t  total_links;        \/* sum of all symlinks *\/$/;"	m	struct:__anon35
total_links	src/dfilemaker/dfilemaker.c	/^uint64_t total_links   = 0;$/;"	v
total_links	src/dsh/dsh.c	/^uint64_t total_links   = 0;$/;"	v
total_links	src/dwalk/dwalk.c	/^uint64_t total_links   = 0;$/;"	v
total_oids	src/common/mfu_daos.h	/^    uint64_t total_oids;    \/* sum of object ids *\/$/;"	m	struct:mfu_daos_stats
total_size	src/common/mfu_flist_copy.c	/^    int64_t  total_size;         \/* sum of all file sizes *\/$/;"	m	struct:__anon20	file:
total_size	src/dcp1/common.h	/^    int64_t  total_size;         \/* sum of all file sizes *\/$/;"	m	struct:__anon35
total_size	test/legacy/dtest/dtest	/^	total_size = '100M'$/;"	v	class:test
total_unknown	src/dfilemaker/dfilemaker.c	/^uint64_t total_unknown = 0;$/;"	v
total_unknown	src/dsh/dsh.c	/^uint64_t total_unknown = 0;$/;"	v
total_unknown	src/dwalk/dwalk.c	/^uint64_t total_unknown = 0;$/;"	v
total_users	src/common/mfu_flist_internal.h	/^    uint64_t total_users;    \/* number of users (valid if detail is 1) *\/$/;"	m	struct:flist
type	src/common/mfu_flist_internal.h	/^    mfu_filetype type;    \/* type of file object *\/$/;"	m	struct:list_elem
type	src/common/mfu_param_path.h	/^    enum                 {POSIX, DFS, DAOS} type;$/;"	m	struct:__anon24	typeref:enum:__anon24::__anon25
type_str_dir	src/dsh/dsh.c	/^static char type_str_dir[]     = "DIR";$/;"	v	file:
type_str_file	src/dsh/dsh.c	/^static char type_str_file[]    = "REG";$/;"	v	file:
type_str_link	src/dsh/dsh.c	/^static char type_str_link[]    = "LNK";$/;"	v	file:
type_str_unknown	src/dsh/dsh.c	/^static char type_str_unknown[] = "UNK";$/;"	v	file:
uid	src/common/mfu_flist.h	/^    uid_t uid;      \/* new user id for item's owner, -1 for no change *\/$/;"	m	struct:__anon9
uid	src/common/mfu_flist_internal.h	/^    uint64_t uid;           \/* user id *\/$/;"	m	struct:list_elem
umask	src/common/mfu_flist.h	/^    mode_t umask;         \/* umask to apply when setting permissions (default current umask) *\/$/;"	m	struct:__anon8
umask	src/common/mfu_flist.h	/^    mode_t umask;   \/* umask to apply when setting item permissions *\/$/;"	m	struct:__anon9
units_bw	src/common/mfu_util.c	/^static const char* units_bw[] = {"B\/s", "KiB\/s", "MiB\/s", "GiB\/s", "TiB\/s", "PiB\/s", "EiB\/s"};$/;"	v	file:
units_bytes	src/common/mfu_util.c	/^static const char* units_bytes[] = {"B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB"};$/;"	v	file:
units_count	src/common/mfu_util.c	/^static const char* units_count[] = {"", "k", "M", "G", "T", "P", "E"};$/;"	v	file:
use_stat	src/common/mfu_param_path.h	/^    int use_stat;       \/* flag option on whether or not to stat files during walk *\/$/;"	m	struct:__anon26
user	test/legacy/dtest/moab.py	/^	def user(self):$/;"	m	class:job
user_id2name	src/common/mfu_flist_internal.h	/^    strmap* user_id2name;  \/* map linux uid to user name *\/$/;"	m	struct:flist
users	src/common/mfu_flist_internal.h	/^    buf_t users;$/;"	m	struct:flist
usr	src/common/mfu_flist.h	/^    int usr;             \/* set to 1 if user (owner) bits should be set (e.g. u+r) *\/$/;"	m	struct:mfu_perms_t
usr_attr	src/common/mfu_daos.h	/^    hid_t usr_attr;$/;"	m	struct:hdf5_args
usr_attr_memtype	src/common/mfu_daos.h	/^    hid_t usr_attr_memtype;$/;"	m	struct:hdf5_args
usr_attr_name_vtype	src/common/mfu_daos.h	/^    hid_t usr_attr_name_vtype;$/;"	m	struct:hdf5_args
usr_attr_t	src/common/mfu_daos.h	/^} usr_attr_t;$/;"	t	typeref:struct:__anon4
usr_attr_val_vtype	src/common/mfu_daos.h	/^    hid_t usr_attr_val_vtype;$/;"	m	struct:hdf5_args
validate	test/legacy/dtest/dtest	/^	validate = False$/;"	v	class:test
value	src/common/strmap.h	/^  const char* value; \/* pointer to value string *\/$/;"	m	struct:strmap_node_struct
value_len	src/common/strmap.h	/^  size_t value_len;  \/* number of characters in value string (including terminating NUL) *\/$/;"	m	struct:strmap_node_struct
values	src/common/mfu_progress.h	/^    uint64_t* values;       \/* array holding contribution to global sum from local proc *\/$/;"	m	struct:__anon31
verbose	src/dcmp/dcmp.c	/^    int verbose;$/;"	m	struct:dcmp_options	file:
verbose	src/dsh/dsh.c	/^static int verbose   = 0;$/;"	v	file:
verbose	src/dsync/dsync.c	/^    int verbose;$/;"	m	struct:dsync_options	file:
verbose	test/legacy/dtest/dtest	/^	verbose = False$/;"	v	class:test
version	doc/rst/conf.py	/^version = u'0.11.1'$/;"	v
version_attr	src/common/mfu_daos.h	/^    hid_t version_attr;$/;"	m	struct:hdf5_args
version_attr_dims	src/common/mfu_daos.h	/^    hsize_t version_attr_dims[1];$/;"	m	struct:hdf5_args
version_attr_dspace	src/common/mfu_daos.h	/^    hid_t version_attr_dspace;$/;"	m	struct:hdf5_args
version_attr_type	src/common/mfu_daos.h	/^    hid_t version_attr_type;$/;"	m	struct:hdf5_args
walk_getdents_create	src/common/mfu_flist_walk.c	/^static void walk_getdents_create(CIRCLE_handle* handle)$/;"	f	file:
walk_getdents_process	src/common/mfu_flist_walk.c	/^static void walk_getdents_process(CIRCLE_handle* handle)$/;"	f	file:
walk_getdents_process_dir	src/common/mfu_flist_walk.c	/^static void walk_getdents_process_dir(const char* dir, CIRCLE_handle* handle)$/;"	f	file:
walk_readdir_create	src/common/mfu_flist_walk.c	/^static void walk_readdir_create(CIRCLE_handle* handle)$/;"	f	file:
walk_readdir_process	src/common/mfu_flist_walk.c	/^static void walk_readdir_process(CIRCLE_handle* handle)$/;"	f	file:
walk_readdir_process_dir	src/common/mfu_flist_walk.c	/^static void walk_readdir_process_dir(const char* dir, CIRCLE_handle* handle)$/;"	f	file:
walk_stat_create	src/common/mfu_flist_walk.c	/^static void walk_stat_create(CIRCLE_handle* handle)$/;"	f	file:
walk_stat_process	src/common/mfu_flist_walk.c	/^static void walk_stat_process(CIRCLE_handle* handle)$/;"	f	file:
walk_stat_process_dir	src/common/mfu_flist_walk.c	/^static void walk_stat_process_dir(char* dir, CIRCLE_handle* handle)$/;"	f	file:
wave_blocks	src/common/mfu_compress_bz2_libcircle.c	/^static int64_t wave_blocks;$/;"	v	file:
write	src/common/mfu_flist.h	/^    int write;           \/* set to 1 if 'w' is given *\/$/;"	m	struct:mfu_perms_t
write	test/legacy/dtar_tests/test.sh	/^function write {$/;"	f
write_cache_readdir_variable	src/common/mfu_flist_io.c	/^static void write_cache_readdir_variable($/;"	f	file:
write_cache_stat_v4	src/common/mfu_flist_io.c	/^static void write_cache_stat_v4($/;"	f	file:
write_entry_index	src/common/mfu_flist_archive.c	/^static int write_entry_index($/;"	f	file:
write_entry_index_file	src/common/mfu_flist_archive.c	/^static int write_entry_index_file($/;"	f	file:
write_entry_index_footer	src/common/mfu_flist_archive.c	/^static int write_entry_index_footer($/;"	f	file:
write_entry_index_xattr	src/common/mfu_flist_archive.c	/^static int write_entry_index_xattr($/;"	f	file:
write_file	src/dfilemaker/dfilemaker.c	/^static int write_file(mfu_flist list, uint64_t idx)$/;"	f	file:
write_file_chunk	src/dstripe/dstripe.c	/^static void write_file_chunk(mfu_file_chunk* p, const char* out_path)$/;"	f	file:
write_files	src/dfilemaker/dfilemaker.c	/^static int write_files(mfu_flist list)$/;"	f	file:
write_header	src/common/mfu_flist_archive.c	/^static int write_header($/;"	f	file:
write_links	src/dfilemaker/dfilemaker.c	/^static void write_links(int nlink, char* linknames, char* targnames)$/;"	f	file:
wtime_ended	src/common/mfu_daos.h	/^    double   wtime_ended;   \/* relative time when ended *\/$/;"	m	struct:mfu_daos_stats
wtime_ended	src/common/mfu_flist_copy.c	/^    double   wtime_ended;        \/* time when dcp command ended *\/$/;"	m	struct:__anon20	file:
wtime_ended	src/dcp1/common.h	/^    double   wtime_ended;$/;"	m	struct:__anon35
wtime_started	src/common/mfu_daos.h	/^    double   wtime_started; \/* relative time when started *\/$/;"	m	struct:mfu_daos_stats
wtime_started	src/common/mfu_flist_copy.c	/^    double   wtime_started;      \/* time when dcp command started *\/$/;"	m	struct:__anon20	file:
wtime_started	src/dcp1/common.h	/^    double   wtime_started;$/;"	m	struct:__anon35
